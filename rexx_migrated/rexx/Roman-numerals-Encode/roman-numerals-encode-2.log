-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:27
-------------------------------------------------------------------------
0001 /*REXX program converts (Arabic) non─negative decimal integers (≥0) ───► Roman numerals.*/
0002 numeric digits 10000                             /*decimal digs can be higher if wanted.*/
0003 parse arg #                                      /*obtain optional integers from the CL.*/
0004 @er= "argument isn't a non-negative integer: "   /*literal used when issuing error msg. */
0005 if #=''  then                                    /*Nothing specified?  Then generate #s.*/
0006 do
0007 do j= 0  by  11  to  111; #=# j;     end
0008 #=# 49;                                       do k=88  by 100  to 1200; #=# k;     end
0009 #=# 1000 2000 3000 4000 5000 6000;            do m=88  by 200  to 1200; #=# m;     end
0010 #=# 1304 1405 1506 1607 1708 1809 1910 2011;  do p= 4          to   50; #=# 10**p; end
0011 end                                          /*finished with generation of numbers. */
0012 
0013 do i=1  for words(#);         x=word(#, i)     /*convert each of the numbers───►Roman.*/
0014 if \datatype(x, 'W') | x<0  then say "***error***"  @er  x     /*¬ whole #?  negative?*/
0015 say  right(x, 55)     dec2rom(x)
0016 end   /*i*/
0017 exit                                             /*stick a fork in it,  we're all done. */
0018 /*──────────────────────────────────────────────────────────────────────────────────────*/
0019 dec2rom: procedure;   parse arg n,#              /*obtain the number, assign # to a null*/
0020 n=space(translate(n/1, , ','),  0)      /*remove commas from normalized integer*/
0021 nulla= 'ZEPHIRUM NULLAE NULLA NIHIL'    /*Roman words for "nothing" or "none". */
0022 if n==0  then return word(nulla, 1)     /*return a Roman word for  "zero".     */
0023 maxnp=(length(n)-1)%3                   /*find max(+1) # of parenthesis to use.*/
0024 highPos=(maxnp+1)*3                     /*highest position of number.          */
0025 nn=reverse( right(n, highPos, 0) )      /*digits for Arabic──►Roman conversion.*/
0026 do j=highPos  to 1  by -3
0027 _=substr(nn, j,   1);  select     /*════════════════════hundreds.*/
0028 when _==9  then hx='CM'
0029 when _>=5  then hx='D'copies("C", _-5)
0030 when _==4  then hx='CD'
0031 otherwise       hx=   copies('C', _)
0032 end  /*select hundreds*/
0033 _=substr(nn, j-1, 1);  select     /*════════════════════════tens.*/
0034 when _==9  then tx='XC'
0035 when _>=5  then tx='L'copies("X", _-5)
0036 when _==4  then tx='XL'
0037 otherwise       tx=   copies('X', _)
0038 end  /*select tens*/
0039 _=substr(nn, j-2, 1);  select     /*═══════════════════════units.*/
0040 when _==9  then ux='IX'
0041 when _>=5  then ux='V'copies("I", _-5)
0042 when _==4  then ux='IV'
0043 otherwise       ux=   copies('I', _)
0044 end  /*select units*/
0045 $=hx || tx || ux
0046 if $\==''  then #=# || copies("(", (j-1)%3)$ ||copies(')', (j-1)%3)
0047 end   /*j*/
0048 if pos('(I',#)\==0  then do i=1  for 4           /*special case: M,MM,MMM,MMMM.*/
0049 if i==4  then _ = '(IV)'
0050 else _ = '('copies("I", i)')'
0051 if pos(_, #)\==0  then #=changestr(_, #, copies('M', i))
0052 end   /*i*/
0053 return #
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 n                19 20
002 nulla            21
003 maxnp            23
004 highPos          24
005 nn               25
006 j                26
007 i                48
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @er              -> newV1            4
002 #                -> newV2            3 7 8 8 9 9 10 10 19 46 51
003 _                -> newV3            27 33 39 49
004 $                -> newV4            45
