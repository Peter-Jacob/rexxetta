/*ª*REXX program implements a sleep sort (with numbers entered from the command line (CL).*/
numeric digits 300                               /*ª*over the top,  but what the hey!     */
/*ª*  (above)  Â·Â·Â· from vaudeville.      */
newV3.=                                              /*ª*placeholder for the array of numbers.*/
stuff= 1e9 50 5 40 4 1 100 30 3 12 2 8 9 7 6 6 10 20 0      /*ª*alphabetically Â·Â·Â· so far.*/
parse arg numbers                                /*ª*obtain optional arguments from the CL*/
if numbers=''  then numbers= stuff               /*ª*Not specified?  Then use the default.*/
N= words(numbers)                                /*ª*N  is the number of numbers in list. */
w= length(N)                                     /*ª*width of  N  (used for nice output). */
parse upper version newV2 .                       /*ª*obtain which REXX we're running under*/
newV1= ('REXX-REGINA'==left(newV2, 11) )        /*ª*indicate (or not) if this is Regina. */
say N  'numbers to be sorted:'   numbers         /*ª*informative informational information*/
/*ª*from department of redundancy depart.*/
do j=1  for N                                /*ª*let's start to boogieâ”€woogie da sort.*/
newV3.j= word(numbers, j)                        /*ª*plug in a single number at a time.   */
if datatype(newV3.j, 'N')  then newV3.j= newV3.j / 1     /*ª*normalize it if it's a numeric number*/
if newV1  then call fork                   /*ª*only REGINA REXX supports  FORK  BIF.*/
call sortItem j                              /*ª*start a sort for an array number.    */
end   /*ª*j*/

do forever  while \inOrder(N)              /*ª*wait for the sorts to complete.      */
call delay 1                               /*ª*one second is minimum effective time.*/
end    /*ª*forever while*/                   /*ª*well heck,  other than zero seconds. */

m= max(length(newV3.1), length(newV3.N) )                /*ª*width of smallest or largest number. */
say;                        say  'after sort:'   /*ª*display a blank line and a title.    */

do k=1  for N                              /*ª*list the  (sorted)  array's elements.*/
say left('', 20)     'array element'      right(k, w)      'â”€â”€â”€â–º'      right(newV3.k, m)
end   /*ª*k*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
sortItem: procedure expose newV3.;   parse arg newV4     /*ª*sorts a single  (numeric)  item.     */
do Asort=1  until \switched        /*ª*sort unsorted array until it's sorted*/
switched= 0                        /*ª*it's all hunkyâ”€dorey, happyâ”€dappy Â·Â·Â·*/
do i=1   while   newV3.i\==''  &  \switched
if newV3.newV4 >= newV3.i then iterate     /*ª*item is in order. */
parse value   newV3.newV4  newV3.i     with     newV3.i  newV3.newV4
switched= 1                    /*ª* [â†‘]  swapped one.*/
end   /*ª*i*/
if Asort//newV4==0  then call delay switched              /*ª*sleep if last item*/
end   /*ª*Asort*/
return               /*ª*Sleeping Beauty awakes.  Not to worry:  (c)=circa 1697.*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
inOrder: procedure expose newV3.;  parse arg howMany /*ª*is the array in numerical order?     */
do m=1  for howMany-1;  next= m+1;  if newV3.m>newV3.next  then return 0 /*ª*Â¬ in order*/
end   /*ª*m*/                           /*ª*keep looking for fountain of youth.  */
return 1                                /*ª*yes, indicate with an indicator.     */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Sorting-algorithms-Sleep-sort\sorting-algorithms-sleep-sort.rexx was migrated on 23 Mar 2025 at 10:43:30
 * -------------------------------------------------------------------------
*/ 
