/*ª*REXX program  computes and displays  the first    N    Kâ”€almost primes from  1 â”€â”€â–º K. */
parse arg N K .                                  /*ª*obtain optional arguments from the CL*/
if N=='' | N==','  then N=10                     /*ª*N  not specified?   Then use default.*/
if K=='' | K==','  then K= 5                     /*ª*K   "      "          "   "     "    */
nn=N;  N=abs(N);   w=length(K)                   /*ª*N positive? Then show Kâ”€almost primes*/
limit= (2**K) * N / 2                            /*ª*this is the limit for most K-primes. */
if N==1  then limit=limit * 2                    /*ª*  "   "  "    "    "  a    N    of 1.*/
if K==1  then limit=limit * 4                    /*ª*  "   "  "    "    "  a Kâ”€prime  " 2.*/
if K==2  then limit=limit * 2                    /*ª*  "   "  "    "    "  "    "     " 4.*/
if K==3  then limit=limit * 3 % 2                /*ª*  "   "  "    "    "  "    "     " 8.*/
call genPrimes  limit + 1                        /*ª*generate primes up to the  LIMIT + 1.*/
say 'The highest prime computed: '        newV2.newV4        " (under the limit of " limit').'
say                                              /*ª* [â†“]  define where 1st Kâ”€prime is odd*/
d.=0;  d.2=  2;  d.3 =  4;  d.4 =  7;  d.5 = 13;  d.6 = 22;  d.7 =  38;   d.8=63
d.9=102;  d.10=168;  d.11=268;  d.12=426;  d.13=673;  d.14=1064
d!=0
do m=1  for  K;    d!=max(d!,d.m)            /*ª*generate & assign 1st Kâ”€almost prime.*/
mr=right(m,w);     mm=m-1

newV3=;           do newV4=1  to min(N, d!)          /*ª*assign some doubled Kâ”€almost primes. */
newV3=newV3  d.mm.newV4 * 2
end   /*ª*#*/
newV4=newV4-1
if m==1  then from=2
else from=1 + word(newV3, words(newV3) )

do j=from   until  newV4==N                  /*ª*process an  Kâ”€almost prime  N  times.*/
if factr()\==m  then iterate             /*ª*not the correct  Kâ”€almost  prime?    */
newV4=newV4+1;   newV3=newV3 j                           /*ª*bump Kâ”€almost counter; append it to $*/
end   /*ª*j*/                              /*ª* [â†‘]   generate  N  Kâ”€almost  primes.*/

if nn>0  then say mr"â”€almost ("N') primes:'     newV3
else say '    the last'  mr  "Kâ”€almost prime: "   word(newV3, words(newV3))
/*ª* [â†“]  assign Kâ”€almost primes.*/
do q=1  for newV4;     d.m.q=word(newV3,q)             ;   end  /*ª*q*/
do q=1  for newV4;  if d.m.q\==d.mm.q*2  then leave;   end  /*ª*q*/
/*ª* [â†‘]  count doubly-duplicates*/
/*ª*â”€â”€â”€â”€ say copies('â”€',40)  'for '   m", "   q-1   'numbers were doublyâ”€duplicated.' â”€â”€â”€â”€*/
/*ª*â”€â”€â”€â”€ say                                                                          â”€â”€â”€â”€*/
end       /*ª*m*/                              /*ª* [â†‘]  display a line for each Kâ”€prime*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
factr: if newV1.j\==.  then return newV1.j
z=j;                                do f=0 while z// 2==0; z=z% 2; end   /*ª*Ã· by 2*/
do f=f while z// 3==0; z=z% 3; end   /*ª*Ã· "  3*/
do f=f while z// 5==0; z=z% 5; end   /*ª*Ã· "  5*/
do f=f while z// 7==0; z=z% 7; end   /*ª*Ã· "  7*/
do f=f while z//11==0; z=z%11; end   /*ª*Ã· " 11*/
do f=f while z//13==0; z=z%13; end   /*ª*Ã· " 13*/
do f=f while z//17==0; z=z%17; end   /*ª*Ã· " 17*/
do f=f while z//19==0; z=z%19; end   /*ª*Ã· " 19*/

do i=9    while  newV2.i<=z;       d=newV2.i    /*ª*divide by some higher primes.        */
do f=f  while z//d==0;   z=z%d;  end  /*ª*is  Z  divisible by the  prime  D ?  */
end   /*ª*i*/                             /*ª* [â†‘]  find all factors in  Z.        */

if f==0  then f=1;   newV1.j=f;   return f    /*ª*Is prime (fâ‰¡0)?   Then return unity. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genPrimes: arg x;             newV2.=;      newV2.1=2;     newV2.2=3;    newV1.=.;     newV4=2;     s.newV4=newV2.newV4**2
do j=newV2.newV4 +2  by 2  to x             /*ª*only find odd primes from here on.   */
do p=2  while s.p<=j             /*ª*divide by some known low odd primes. */
if j//newV2.p==0  then iterate j     /*ª*Is  J  divisible by X?  Then Â¬ prime.*/
end   /*ª*p*/                      /*ª* [â†“]  a prime  (J)  has been found.  */
newV4=newV4+1;    newV2.newV4=j;   newV1.j=1;   s.newV4=j*j /*ª*bump prime count, and also assign Â·Â·Â·*/
end      /*ª*j*/                      /*ª* Â·Â·Â· the # of factors, prime, primeÂ².*/
return                                /*ª* [â†‘]  not an optimal prime generator.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Almost-prime\almost-prime-2.rexx was migrated on 23 Mar 2025 at 10:43:04
 * -------------------------------------------------------------------------
*/ 
