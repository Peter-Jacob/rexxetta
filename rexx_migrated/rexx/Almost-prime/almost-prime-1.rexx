/*ª*REXX program  computes and displays  the  first  N  Kâ”€almost  primes  from   1 â”€â”€â–º K. */
parse arg N K .                                  /*ª*get optional arguments from the C.L. */
if N=='' | N==","  then N=10                     /*ª*N  not specified?   Then use default.*/
if K=='' | K==","  then K= 5                     /*ª*K   "      "          "   "     "    */
/*ª*W: is the width of K, used for output*/
do m=1  for  K;     newV1=2**m;  fir=newV1           /*ª*generate & assign 1st Kâ”€almost prime.*/
newV2=1;                if newV2==N  then leave      /*ª*#: Kâ”€almost primes; Enough are found?*/
newV2=2;                newV1=newV1  3*(2**(m-1))        /*ª*generate & append 2nd Kâ”€almost prime.*/
if newV2==N  then leave                          /*ª*#: Kâ”€almost primes; Enough are found?*/
if m==1  then newV3=fir + fir                    /*ª* [â†“]  gen & append 3rd Kâ”€almost prime*/
else do;  newV3=9 * (2**(m-2));    newV2=3;    newV1=newV1  newV3;    end
do j=newV3 + m - 1   until newV2==N              /*ª*process an  Kâ”€almost prime  N  times.*/
if factr()\==m  then iterate             /*ª*not the correct  Kâ”€almost  prime?    */
newV2=newV2 + 1;         newV1=newV1 j                   /*ª*bump Kâ”€almost counter; append it to $*/
end   /*ª*j*/                              /*ª* [â†‘]   generate  N  Kâ”€almost  primes.*/
say right(m, length(K))"â”€almost ("N') primes:'     newV1
end       /*ª*m*/                              /*ª* [â†‘]  display a line for each Kâ”€prime*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
factr: z=j;                    do f=0  while z// 2==0;  z=z% 2;  end  /*ª*divisible by  2.*/
do f=f  while z// 3==0;  z=z% 3;  end  /*ª*divisible  "  3.*/
do f=f  while z// 5==0;  z=z% 5;  end  /*ª*divisible  "  5.*/
do f=f  while z// 7==0;  z=z% 7;  end  /*ª*divisible  "  7.*/
do f=f  while z//11==0;  z=z%11;  end  /*ª*divisible  " 11.*/
do f=f  while z//13==0;  z=z%13;  end  /*ª*divisible  " 13.*/
do p=17  by 6  while  p<=z              /*ª*insure  P  isn't divisible by three. */
parse var  p   ''  -1  newV3                /*ª*obtain the rightâ”€most decimal digit. */
/*ª* [â†“]  fast check for divisible by 5. */
if newV3\==5  then do; do f=f+1  while z//p==0; z=z%p; end;  f=f-1; end  /*ª*Ã· by P? */
if newV3 ==3  then iterate                  /*ª*fast check for  X  divisible by five.*/
x=p+2;             do f=f+1  while z//x==0; z=z%x; end;  f=f-1       /*ª*Ã· by X? */
end   /*ª*i*/                             /*ª* [â†‘]  find all the factors in  Z.    */

if f==0  then return 1                    /*ª*if  prime (f==0),  then return unity.*/
return f                    /*ª*return to invoker the number of divs.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Almost-prime\almost-prime-1.rexx was migrated on 23 Mar 2025 at 10:43:04
 * -------------------------------------------------------------------------
*/ 
