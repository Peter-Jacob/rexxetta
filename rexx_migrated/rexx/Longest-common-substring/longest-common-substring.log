-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:19
-------------------------------------------------------------------------
0001 /*REXX program determines the   LCSUBSTR   (Longest Common Substring)  via a function.  */
0002 parse arg a b .                                  /*obtain optional arguments from the CL*/
0003 if a==''  then a= "thisisatest"                  /*Not specified?  Then use the default.*/
0004 if b==''  then b= "testing123testing"            /* "      "         "   "     "    "   */
0005 say '   string A ='            a                 /*echo string A to the terminal screen.*/
0006 say '   string B ='               b              /*  "     "   B  "  "      "       "   */
0007 say '   LCsubstr ='   LCsubstr(a, b)             /*display the Longest Common Substring.*/
0008 exit 0                                           /*stick a fork in it,  we're all done. */
0009 /*──────────────────────────────────────────────────────────────────────────────────────*/
0010 LCsubstr: procedure;  parse arg x,y,,$;     #= 0 /*LCsubstr:  Longest Common Substring. */
0011 L= length(x);     w= length(y)         /*placeholders for string length of X,Y*/
0012 if w<L  then do;  parse arg y,x;  L= w /*switch X & Y   if Y is shorter than X*/
0013 end
0014 do j=1  for L  while j<=L-#         /*step through start points in string X*/
0015 do k=L-j+1   to #   by -1        /*step through string lengths.         */
0016 _= substr(x, j, k)               /*extract a possible common substring. */
0017 if pos(_, y)\==0  then  if k>#  then do;     $= _;     #= k;      end
0018 end   /*k*/                      /* [↑]  determine if string _ is longer*/
0019 end      /*j*/                      /*#:  the current length of  $  string.*/
0020 return $                               /*$:  (null if there isn't common str.)*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 y                12
002 x                12
003 L                12
004 j                14
005 k                15
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 $                -> newV1            10 17
002 #                -> newV2            10 17
003 _                -> newV3            16
