-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:33
-------------------------------------------------------------------------
0001 /*REXX program  tests  if a number  (possibly complex)  is  equivalent  to an integer.  */
0002 numeric digits 3000                              /*be able to handle gihugic integers.  */
0003 parse arg #s                                     /*obtain optional numbers list from CL.*/
0004 if #s=''  then #s= '3.14   1.00000   33   999999999   99999999999   1e272   AA   0'    ,
0005 '1.000-3i   1.000-3.3i   4j   2.00000000+0j   0j   333   -1-i'      ,
0006 '1+i   .00i   j   0003-00.0j   1.2d1   2e55666   +0003-00.0j   +0j' ,
0007 '-.3q+2   -0i   +03.0e+01+0.00e+20j   -030.0e-001+0.0e-020j'
0008 /* [↑]  use these numbers for defaults.*/
0009 do j=1  for words(#s);    ox=word(#s, j)       /*obtain a number from the numbers list*/
0010 parse  upper  var  ox  x                       /*obtain an uppercase version of  OX.  */
0011 x=translate(x, 'EEI', "QDJ")                   /*translate exponent and imag indicator*/
0012 if right(x, 1)=='I'  then call tImag           /*has the  X  number an imaginary part?*/
0013 if isInt(x)  then say  right(ox, 55)  "     is an integer."      /*yuppers, it does.  */
0014 else say  right(ox, 55)  "  isn't an integer."      /*noppers, it doesn't*/
0015 end   /*j*/                                    /* [↑]  process each number in the list*/
0016 exit                                             /*stick a fork in it,  we're all done. */
0017 /*──────────────────────────────────────────────────────────────────────────────────────*/
0018 isInt:  procedure;  parse arg n                  /*obtain the number in question.       */
0019 if datatype(n, 'Whole')  then return 1   /*it's a simple integer (small).       */
0020 parse  var  n   m  'E'  p                /*separate base from the  10's  power. */
0021 if \datatype(p, 'Numb')  then return 0   /*Not an integer if  P  not an integer.*/
0022 return  p>0  |  m=0                      /*is   power>0   or   mantissa = zero? */
0023 /*──────────────────────────────────────────────────────────────────────────────────────*/
0024 isSign: parse arg ? 2;   return ?=='+' | ?=="-"  /*a method to test for a leading sign. */
0025 /*──────────────────────────────────────────────────────────────────────────────────────*/
0026 tImag:  x=left(x, length(x) -1)                  /*strip the trailing I or J from number*/
0027 if isInt(x)   then do                    /*is what's remaining an integer ?     */
0028 if x\=0  then x=.     /*what's remaining isn't equal to zero.*/
0029 return                /*return to invoker in either case.    */
0030 end                   /* [↑]  handle simple imaginary case.  */
0031 if isSign(x)  then x=substr(x, 2)        /*X has a sign?  Strip the leading sign*/
0032 e=verify(x, .0123456789)                 /*find 1st char not a digit or a  dot. */
0033 if e==0       then do; x=.; return; end  /*Nothing?  Then it's not an integer.  */
0034 y=substr(x, e, 1)                        /*Y  is the suspect character.         */
0035 if isSign(y)  then do                    /*is suspect character a plus or minus?*/
0036 z=substr(x, e+1)      /*obtain the imaginary part of  X.     */
0037 x=  left(x, e-1)      /*   "    "    real      "   "  "      */
0038 if isInt(z)  then if z=0  then return   /*imaginary part is 0*/
0039 x=.                   /*the imaginary part isn't zero.       */
0040 end                   /* [↑]  end of imaginary part of  X.   */
0041 if y\=='E'    then return                /*real part of X doesn't have an expon.*/
0042 p=substr(x, e+1)                         /*obtain power of real part of  X.     */
0043 _=  left(p, 1)                           /*obtain the possible sign of the power*/
0044 if isSign(_)  then p=substr(p, 2)        /*strip the sign from the exponent.    */
0045 s=verify(p, '-+', "M")                   /*is there an imaginary separator char?*/
0046 if s==0       then do; x=.; return; end  /*No sign?   Then isn't not an integer.*/
0047 z=substr(p, s+1)                         /*obtain the the imaginary part of  X. */
0048 x=  left(x, e+s)                         /*   "    "   "     real     "   "  "  */
0049 if isInt(z)   then if z\=0  then x=.     /*Not imaginary part=0? Not an integer.*/
0050 return                                   /*return to the invoker of this sub.   */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                28 31 33 37 39 46 48 49
002 e                32
003 y                34
004 z                36 47
005 p                42 44
006 s                45
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #s               -> newV1            3 4
002 ?                -> newV2            24
003 _                -> newV3            43
