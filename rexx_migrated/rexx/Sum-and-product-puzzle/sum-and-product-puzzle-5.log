-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:31
-------------------------------------------------------------------------
0001 /*REXX program solves the  Sum and Product Puzzle (also known as the Impossible Puzzle).*/
0002 @.= 0;                        h= 100;  @.3= 1    /*assign array default;  assign high P.*/
0003 do j=5  by 2  to h                  /*find all odd primes  ≤  1st argument.*/
0004 do k=3  while k*k<=j;   if j//k==0  then iterate j          /*J ÷ by K ? */
0005 end  /*k*/;             @.j= 1    /*found a net prime number: J          */
0006 end    /*j*/
0007 @.2=1                                            /*assign the even prime, ex post facto.*/
0008 do s=2  for h-1;  if C1(s)==0  then iterate /*find and display the puzzle solution.*/
0009 $= 0;                do m=2  for  s%2 -1    /* [↓]  check for uniqueness of product*/
0010 if C2(m * (s-m))  then do;  if $>0  then iterate s;  $= m;   end
0011 end   /*m*/
0012 if $>0  then say  'The numbers are:  '         $            " and "           s-$
0013 end   /*s*/
0014 if $==0  then     say  'No solution found.'
0015 exit 0                                           /*stick a fork in it,  we're all done. */
0016 /*──────────────────────────────────────────────────────────────────────────────────────*/
0017 C1: procedure expose @.;        parse arg s      /*validate the first puzzle condition. */
0018 do a=2  for s%2-1;        if @.a  then do;   _= s - a;   if @._  then return 0;  end
0019 end;  /*a*/;              return 1
0020 /*──────────────────────────────────────────────────────────────────────────────────────*/
0021 C2: procedure expose @. h;  parse arg p;    $= 0 /*validate the second puzzle condition.*/
0022 do j=2  while j*j<p                        /*perform up to the square root of  P. */
0023 if p//j==0  then do;               q= p % j
0024 if q>=2  then  if q<=h  then  if C1(j+q)  then  if $  then return 0
0025 else $= 1
0026 end
0027 end   /*j*/;              return $
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 p                21
002 j                22
003 q                23
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           2 2 5 7
002 $                -> newV2            9 10 21
003 _                -> newV3            18
