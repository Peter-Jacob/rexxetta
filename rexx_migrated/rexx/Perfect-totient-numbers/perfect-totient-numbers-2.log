-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:24
-------------------------------------------------------------------------
0001 /*REXX program  calculates and displays  the first   N   perfect totient  numbers.      */
0002 parse arg N .                                    /*obtain optional argument from the CL.*/
0003 if N==''  |  N==","  then N= 20                  /*Not specified?  Then use the default.*/
0004 @.= .                                            /*memoization array of totient numbers.*/
0005 p= 0                                             /*the count of perfect    "       "    */
0006 $=                                               /*list of the     "       "       "    */
0007 do j=3  by 2  until p==N                    /*obtain the totient number for index J*/
0008 if j//3\==0   then  if j//5\==0   then  if j//7\==0   then iterate
0009 s= phi(j);  a= s                            /* [↑]  J  must have 1 of these factors*/
0010 do until a==1;  if @.a==.  then a= phi(a);    else a= @.a
0011 s= s + a
0012 end   /*until*/
0013 if s\==j  then iterate                      /*Is  J  not a perfect totient number? */
0014 p= p + 1                                    /*bump count of perfect totient numbers*/
0015 $= $ j                                      /*add to perfect totient numbers list. */
0016 end   /*j*/
0017 
0018 say 'The first '  N  " perfect totient numbers:" /*display the header to the terminal.  */
0019 say strip($)                                     /*   "     "  list.   "  "     "       */
0020 exit 0                                           /*stick a fork in it,  we're all done. */
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 gcd: parse arg x,y;   do  until y==0;  parse value  x//y  y   with   y  x;  end;  return x
0023 /*──────────────────────────────────────────────────────────────────────────────────────*/
0024 phi: procedure expose @.; parse arg z;   if @.z\==.  then return @.z /*was found before?*/
0025 #= z==1;         do m=1  for z-1;   if gcd(m, z)==1  then #= # + 1;    end  /*m*/
0026 @.z= #;   return #                                              /*use memoization. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 z                24
002 m                25
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           4 26
002 $                -> newV2            6 15
003 #                -> newV3            25 25
