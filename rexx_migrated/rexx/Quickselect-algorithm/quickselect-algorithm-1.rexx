/*ª*REXX program sorts a list (which may be numbers)  by using the quick select algorithm.*/
parse arg list;  if list=''  then list= 9 8 7 6 5 0 1 2 3 4   /*ª*Not given?  Use default.*/
say right('list: ', 22)           list
newV2= words(list)
do i=1  for newV2;  newV1.i= word(list, i) /*ª*assign all the items â”€â”€â–º @. (array). */
end   /*ª*i*/                        /*ª* [â†‘]  #: number of items in the list.*/
say
do j=1  for newV2                              /*ª*show  1 â”€â”€â–º  # items place and value.*/
say right('item', 20)     right(j, length(newV2))",  value:  "      qSel(1, newV2, j)
end   /*ª*j*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
qPart: procedure expose newV1.;  parse arg L 1 newV3,R,X;               xVal= newV1.X
parse value  newV1.X newV1.R   with   newV1.R newV1.X     /*ª*swap the two names items  (X and R). */
do k=L  to R-1                      /*ª*process the left side of the list.   */
if newV1.k>xVal  then iterate           /*ª*when an item > item #X, then skip it.*/
parse value newV1.newV3 newV1.k  with  newV1.k newV1.newV3  /*ª*swap the two named items  (? and K). */
newV3= newV3 + 1                            /*ª*bump the item number (point to next).*/
end   /*ª*k*/
parse       value newV1.R newV1.newV3  with  newV1.newV3 newV1.R  /*ª*swap the two named items  (R and ?). */
return newV3                                  /*ª*return the item number to invoker.   */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
qSel: procedure expose newV1.;  parse arg L,R,z;  if L==R  then return newV1.L  /*ª*only one item?*/
do forever                               /*ª*keep searching until we're all done. */
new= qPart(L, R, (L+R) % 2)              /*ª*partition the list into roughly  Â½.  */
newV4= new - L + 1                           /*ª*calculate pivot distance less  L+1.  */
if newV4==z  then return newV1.new               /*ª*we're all done with this pivot part. */
else if  z<newV4  then     R= new-1 /*ª*decrease the right half of the array.*/
else do; z= z-newV4   /*ª*decrease the distance.               */
L= new+1 /*ª*increase the  left half *f the array.*/
end
end   /*ª*forever*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Quickselect-algorithm\quickselect-algorithm-1.rexx was migrated on 23 Mar 2025 at 10:43:25
 * -------------------------------------------------------------------------
*/ 
