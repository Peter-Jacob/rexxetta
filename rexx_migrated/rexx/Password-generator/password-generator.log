-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:23
-------------------------------------------------------------------------
0001 /*REXX program generates a  random password  according to the Rosetta Code task's rules.*/
0002 @L='abcdefghijklmnopqrstuvwxyz'; @U=@L; upper @U /*define lower-, uppercase Latin chars.*/
0003 @#= 0123456789                                   /*   "   " string of base ten numerals.*/
0004 @@= '!"#$%&()+,-./:;<=>?@[]^{|}~' || "'"         /*define a bunch of special characters.*/
0005 parse arg L N seed xxx yyy .                     /*obtain optional arguments from the CL*/
0006 if L=='?'               then signal help         /*does user want documentation shown?  */
0007 if L=='' | L==","       then L=8                 /*Not specified?  Then use the default.*/
0008 if N=='' | N==","       then N=1                 /* "      "         "   "   "     "    */
0009 if xxx\==''             then call weed  xxx      /*Any chars to be ignored?  Scrub lists*/
0010 if yyy\==''             then call weed  x2c(yyy) /*Hex   "    "  "     "       "     "  */
0011 if  datatype(seed,'W')  then call random ,,seed  /*the seed for repeatable RANDOM BIF #s*/
0012 if \datatype(L,   'W')  then call serr  "password length, it isn't an integer: "       L
0013 if L<4                  then call serr  "password length, it's too small  (< 4): "     L
0014 if L>80                 then call serr  "password length, it's too large  (> 80): "    L
0015 if \datatype(N,   'W')  then call serr  "number of passwords, it isn't an integer: "   N
0016 
0017 do g=1  to N;       $=                       /*generate N passwords (default is one)*/
0018 do k=1  for L;       z=k;   if z>4  then z=random(1,4) /*1st four parts │ random*/
0019 if z==1  then $=$ || substr(@L,random(1,length(@L)),1) /*append lowercase letter*/
0020 if z==2  then $=$ || substr(@U,random(1,length(@U)),1) /*   "   uppercase    "  */
0021 if z==3  then $=$ || substr(@#,random(1,length(@#)),1) /*   "    numeral        */
0022 if z==4  then $=$ || substr(@@,random(1,length(@@)),1) /*   "  special character*/
0023 end   /*k*/
0024 /* [↓]  scrambles PW, hides gen order. */
0025 do a=1  for L;          b=random(1, L)   /*swap every character with another.   */
0026 parse var $ =(a) x +1 =(b)  y  +1        /*≡  x=substr($,a,1);  y=substr($,b,1) */
0027 $=overlay(x,$,b);       $=overlay(y,$,a) /*(both statements) swap two characters*/
0028 end  /*L+L*/                             /* [↑]  more swaps obfuscates gen order*/
0029 
0030 say right(g, length(N))  'password is: '  $  /*display the  Nth  password to console*/
0031 /*      call lineout 'GENPW.PW', $  */       /*and also write the password to a file*/     /*or not.*/
0032 end      /*g*/                               /* [↑]  {a comment}   fileID= GENPW.PW */
0033 exit                                             /*stick a fork in it,  we're all done. */
0034 /*──────────────────────────────────────────────────────────────────────────────────────*/
0035 weed:  parse arg ig;   @L=dont(@L);   @U=dont(@U);   @#=dont(@#);   @@=dont(@@);    return
0036 dont:  return space( translate(arg(1), , ig), 0)              /*remove chars from a list*/
0037 serr:  say;   say '***error*** invalid'  arg(1);  exit 13     /*display an error message*/
0038 help:  signal .; .: do j=sigL+1 to sourceline(); say strip(left(sourceline(j),79)); end /*
0039 ╔═════════════════════════════════════════════════════════════════════════════╗
0040 ║  GENPW  ?                    ◄─── shows this documentation.                 ║
0041 ║  GENPW                       ◄─── generates 1 password  (with length  8).   ║
0042 ║  GENPW len                   ◄─── generates (all) passwords with this length║
0043 ║  GENPW  ,   n                ◄─── generates     N      number of passwords. ║
0044 ║  GENPW  ,   ,  seed          ◄─── generates passwords  using a random seed. ║
0045 ║  GENPW  ,   ,    ,  xxx      ◄─── generates passwords that don't contain xxx║
0046 ║  GENPW  ,   ,    ,   ,  yyy  ◄─── generates passwords that don't contain yyy║
0047 ║                                                                             ║
0048 ╟──────────── where   [if a  comma (,)  is specified,  the default is used]:  ║
0049 ║ len     is the length of the passwords to be generated.    The default is 8.║
0050 ║         The minimum is  4,   the maximum is  80.                            ║
0051 ║ n       is the number of passwords to be generated.        The default is 1.║
0052 ║ seed    is an integer seed used for the RANDOM BIF.     (Default is random.)║
0053 ║ xxx     are characters to  NOT  be used for generating passwords.           ║
0054 ║         The default is to use  all  the  (normal)  available characters.    ║
0055 ║ yyy     (same as XXX,  except the chars are expressed as hexadecimal pairs).║
0056 ╚═════════════════════════════════════════════════════════════════════════════╝         */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 ig               35
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 =(a)             -> newV1            26
002 =(b)             -> newV2            26
003 @L               -> newV3            2 35
004 @U               -> newV4            2 35
005 @#               -> newV5            3 35
006 @@               -> newV6            4 35
007 $                -> newV7            17 19 20 21 22 26 27 27
