/*ª*REXX program finds/displays fortunate numbers  N,  where  N  is specified (default=8).*/
numeric digits 12
parse arg n cols .                               /*ª*obtain optional argument from the CL.*/
if    n=='' |    n==","  then    n=  8           /*ª*Not specified?  Then use the default.*/
if cols=='' | cols==","  then cols= 10           /*ª* "      "         "   "   "     "    */
call genP n**2                                   /*ª*build array of semaphores for primes.*/
pp.= 1
do i=1  for n+1;   im= i - 1;    pp.i= pp.im * newV2.i   /*ª*calculate primorial numbers*/
end   /*ª*i*/
i=i-1;  call genp pp.i + 1000
title= ' fortunate numbers'
w= 10                                            /*ª*maximum width of a number in any col.*/
say ' index â”‚'center(title, 1 + cols*(w+1)     )
say 'â”€â”€â”€â”€â”€â”€â”€â”¼'center(""   , 1 + cols*(w+1), 'â”€')
found= 0;                           idx= 1       /*ª*number of fortunate (so far) & index.*/
newV1.= 0;                             maxFN= 0     /*ª*(stemmed)  array of fortunate numbers*/
do j=1  until found==n;     pt= pp.j     /*ª*search for fortunate numbers in range*/
pt= pp.j                                 /*ª*get the precalculated primorial prime*/
do m=3  by 2;  t= pt + m    /*ª*find  M  that satisfies requirement. */
if newV3.t==''  then leave      /*ª*Is !.t prime?  Then we found a good M*/
end   /*ª*m*/
if newV1.m  then iterate                    /*ª*Fortunate # already found?  Then skip*/
newV1.m= 1;      found= found + 1           /*ª*assign fortunate number;  bump count.*/
maxFN= max(maxFN, t)                     /*ª*obtain max fortunate # for displaying*/
end   /*ª*j*/
newV4=;                                 finds= 0     /*ª*$:  line of output;    FINDS:  count.*/
do k=1  for maxFN;  if \newV1.k  then iterate /*ª*show the fortunate numbers we found. */
finds= finds + 1                           /*ª*bump the  count of numbers (for $).  */
c= commas(k)                               /*ª*maybe add commas to the number.      */
newV4= newV4  right(c, max(w, length(c) ) )        /*ª*add a nice prime â”€â”€â–º list, allow big#*/
if found//cols\==0  then iterate           /*ª*have we populated a line of output?  */
say center(idx, 7)'â”‚'  substr(newV4, 2);   newV4=  /*ª*display what we have so far  (cols). */
idx= idx + cols                            /*ª*bump the  index  count for the output*/
end   /*ª*k*/

if newV4\==''  then say center(idx, 7)"â”‚"  substr(newV4, 2)  /*ª*possible display residual output.*/
say 'â”€â”€â”€â”€â”€â”€â”€â”´'center(""   , 1 + cols*(w+1), 'â”€')     /*ª*display the foot separator.      */
say
say 'Found '       commas(found)      title
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
commas: parse arg newV5;  do jc=length(newV5)-3  to 1  by -3; newV5=insert(',', newV5, jc); end;  return newV5
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP:        newV2.1=2; newV2.2=3; newV2.3=5; newV2.4=7;  newV2.5=11 /*ª*define some low primes.              */
newV3.=0;  newV3.2=;  newV3.3=;  newV3.5=;  newV3.7=;   newV3.11=  /*ª*   "     "   "    "     semaphores.  */
newV6= 5;  sq.newV6= newV2.newV6**2   /*ª*squares of low primes.*/
do j=newV2.newV6+2  by 2  to arg(1)              /*ª*find odd primes from here on.        */
parse var j '' -1 newV7;     if newV7==5  then iterate       /*ª*J Ã· by 5 ?               */
if j//3==0  then iterate;  if j//7==0  then iterate  /*ª*" "  " 3?;    J Ã· by 7 ? */
do k=5  while sq.k<=j             /*ª* [â†“]  divide by the known odd primes.*/
if j // newV2.k == 0  then iterate j  /*ª*Is  J Ã· X?  Then not prime.     ___  */
end   /*ª*k*/                       /*ª* [â†‘]  only process numbers  â‰îå÷Ö´  âˆš J   */
newV6= newV6+1;    newV2.newV6= j;    sq.newV6= j*j;  newV3.j=   /*ª*bump # of Ps; assign next P;  PÂ²; P# */
end          /*ª*j*/;               return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Fortunate-numbers\fortunate-numbers.rexx was migrated on 23 Mar 2025 at 10:43:14
 * -------------------------------------------------------------------------
*/ 
