-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:23
-------------------------------------------------------------------------
0001 /*REXX program  converts  Reverse Polish Notation  (RPN)    ───►    an infix notation.  */
0002 showAction = 1                                   /*  0  if no   showActions   wanted.   */
0003 # = 0                                   /*initialize stack pointer to 0 (zero).*/
0004 oS = '+ - / * ^'                         /*the operator symbols.                */
0005 oP = '2 2 3 3 4'                         /*the operator priorities.             */
0006 oA = '◄ ◄ ◄ ◄ ►'                         /*the operator associations.           */
0007 say  "infix: "   toInfix( "3 4 2 * 1 5 - 2 3 ^ ^ / +" )
0008 say  "infix: "   toInfix( "1 2 + 3 4 + ^ 5 6 + ^" )     /* [↓]  Sprechen Sie Deutsch?   */
0009 say  "infix: "   toInfix( "Mond Sterne Schlamm + * Feur Suppe * ^" )
0010 exit 0                                           /*stick a fork in it,  we're all done. */
0011 /*──────────────────────────────────────────────────────────────────────────────────────*/
0012 pop:       pop= #;                 #= # - 1;                     return @.pop
0013 push:      #= # + 1;               @.#= arg(1);                  return
0014 /*──────────────────────────────────────────────────────────────────────────────────────*/
0015 stack2str: $=;             do j=1  for #;          _ = @.j;      y= left(_, 1)
0016 if pos(' ', _)==0  then _ = '{'strip( substr(_, 2) )"}"
0017 else _ =           substr(_, 2)
0018 $=$  '{'strip(y _)"}"
0019 end   /*j*/
0020 return space($)
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 toInfix:   parse arg rpn;   say copies('─', 80 - 1);             say 'RPN: '  space(rpn)
0023 
0024 do N=1  for words(RPN)                  /*process each of the RPN tokens.*/
0025 ?= word(RPN, N)                         /*obtain next item in the list.  */
0026 if pos(?,oS)==0  then call push '¥' ?   /*when in doubt, add a Yen to it.*/
0027 else do;   g= pop();    gp= left(g, 1);    g= substr(g, 2)
0028 h= pop();    hp= left(h, 1);    h= substr(h, 2)
0029 tp= substr(oP, pos(?, oS),  1)
0030 ta= substr(oA, pos(?, oS),  1)
0031 if hp<tp  |  (hp==tp & ta=='►')  then h= "("h")"
0032 if gp<tp  |  (gp==tp & ta=='◄')  then g= "("g")"
0033 call  push   tp  ||  h  ?  g
0034 end
0035 if showAction  then say   right(?, 25)    "──►"    stack2str()
0036 end   /*N*/
0037 
0038 return space( substr( pop(), 2) )
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 rpn              22
002 N                24
003 g                27 27 32
004 gp               27
005 h                28 28 31
006 hp               28
007 tp               29
008 ta               30
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           13
002 #                -> newV2            3 12
003 _                -> newV3            15 16
004 $                -> newV4            18
005 ?                -> newV5            25
