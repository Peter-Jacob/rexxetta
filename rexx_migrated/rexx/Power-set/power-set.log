-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:25
-------------------------------------------------------------------------
0001 /*REXX program  displays a  power set;  items may be  anything  (but can't have blanks).*/
0002 Parse Arg text                                   /*allow the user specify optional set. */
0003 If text='' Then                                  /*Not specified?  Then use the default.*/
0004 text='one two three four'
0005 n=words(text)
0006 psi=0
0007 Do k=0 To n               /* loops from 0 to n elements of a set      */
0008 cc=comb(n,k)            /* returns the combinations of 1 through k  */
0009 Do while pos('/',cc)>0        /* as long as there is a combination  */
0010 Parse Var cc elist '/' cc   /* get i from comb's result string    */
0011 psl=''                      /* initialize the list of words       */
0012 psi=psi+1                   /* index of this set                  */
0013 Do While elist<>''          /* loop through elements              */
0014 parse var elist e elist   /* get an element (a digit)           */
0015 psl=psl','word(text,e)    /* add corresponding test word to set */
0016 End
0017 psl=substr(psl,2)           /* get rid of leading comma           */
0018 Say right(psi,2) '{'psl'}'  /* show this element of the power set */
0019 End
0020 End
0021 Exit
0022 comb: Procedure
0023 /***********************************************************************
0024 * Returns the combinations of size digits out of things digits
0025 * e.g. comb(4,2) -> ' 1 2/1 3/1 4/2 3/2 4/3 4/'
0026 1 2/  1 3/  1 4/  2 3/  2 4/  3 4 /
0027 ***********************************************************************/
0028 Parse Arg things,size
0029 n=2**things-1
0030 list=''
0031 Do u=1 To n
0032 co=combinations(u)
0033 If co>'' Then
0034 list=list '/' combinations(u)
0035 End
0036 Return substr(space(list),2) '/'    /* remove leading / */
0037 
0038 combinations: Procedure Expose things size
0039 Parse Arg u
0040 nc=0
0041 bu=x2b(d2x(u))
0042 bu1=space(translate(bu,' ',0),0)
0043 If length(bu1)=size Then Do
0044 ub=reverse(bu)
0045 res=''
0046 Do i=1 To things
0047 c=i
0048 If substr(ub,i,1)=1 Then res=res i
0049 End
0050 Return res
0051 End
0052 Else
0053 Return ''
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 u                39
002 nc               40
003 bu               41
004 bu1              42
005 ub               44
006 res              45 48
007 i                46
008 c                47
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
