/*ª*REXX program  computes the   forward difference   of a  list of numbers.              */
numeric digits 100                               /*ª*ensure enough accuracy (decimal digs)*/
parse arg e ',' N                                /*ª*get a list:  Îµ1 Îµ2 Îµ3 Îµ4 Â·Â·Â· , order */
if e==''  then e=90 47 58 29 22 32 55 5 55 73    /*ª*Not specified?  Then use the default.*/
newV3=words(e);    w=5                               /*ª*#  is the number of elements in list.*/
/*ª* [â†“]  verify list items are numeric. */
do i=1  for newV3;        newV4=word(e, i)            /*ª*process each number one at a time.   */
if \datatype(newV4, 'N')  then call ser    newV4    "isn't a valid number";    newV1.i=newV4/1
w=max(w, length(newV1.i))                         /*ª*use the maximum length of an element.*/
end   /*ª*i*/                                   /*ª* [â†‘]  removes superfluous stuff.     */
/*ª* [â†“]  process the optional order.    */
if N==''  then parse value 0 newV3 newV3 with bot top N  /*ª*define the default  order  range.    */
else parse var N bot 1 top             /*ª*Not specified?  Then use only 1 order*/
if newV3==0   then call ser     "no numbers were specified."
if N<0    then call ser  N  "(order) can't be negative."
if N>newV3    then call ser  N  "(order) can't be greater than"  newV3
newV4=;               do k=1  for newV3;  newV4=newV4 right(newV1.k, w);  end  /*ª*k*/;        newV4=substr(newV4, 2)
say right(newV3  'numbers:', 44)  newV4                  /*ª*display the header title    and Â·Â·Â·  */
say left('', 44)copies('â”€', w*newV3+newV3)               /*ª*   "     "     "   fence.            */
/*ª* [â†“]  where da rubber meets da road. */
do o=bot  to top;        do r=1  for newV3;  newV2.r=newV1.r;     end /*ª*r*/;        newV5=
do j=1  for o; d=newV2.j;  do k=j+1  to newV3;     parse value  newV2.k  newV2.k-d   with   d  newV2.k
w=max(w, length(newV2.k))
end   /*ª*k*/
end   /*ª*j*/
do i=o+1  to newV3; newV5=newV5 right(newV2.i/1, w);  end  /*ª*i*/
if newV5==''  then newV5=' [null]'
say right(o, 7)th(o)'â”€order forward difference vector ='     newV5
end     /*ª*o*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
ser:           say;           say '***error***';      say arg(1);     say;         exit 13
th: procedure; x=abs(arg(1)); return word('th st nd rd',1+x//10*(x//100%10\==1)*(x//10<4))
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Forward-difference\forward-difference-3.rexx was migrated on 23 Mar 2025 at 10:43:14
 * -------------------------------------------------------------------------
*/ 
