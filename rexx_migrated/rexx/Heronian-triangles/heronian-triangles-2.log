-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:16
-------------------------------------------------------------------------
0001 /*REXX program generates & displays primitive Heronian triangles by side length and area*/
0002 parse arg  N  first  area  .                     /*obtain optional arguments from the CL*/
0003 if     N==''  |     N==","  then     N= 200      /*Not specified?  Then use the default.*/
0004 if first==''  | first==","  then first=  10      /* "      "         "   "   "     "    */
0005 if  area==''  |  area==","  then  area= 210      /* "      "         "   "   "     "    */
0006 numeric digits 99; numeric digits max(9, 1+length(N**5))  /*ensure 'nuff decimal digits.*/
0007 call Heron;       HT= 'Heronian triangles'       /*invoke the  Heron  subroutine.       */
0008 say  #          ' primitive'    HT    "found with sides up to "     N      ' (inclusive).'
0009 call show     , 'Listing of the first '       first        ' primitive'            HT":"
0010 call show area, 'Listing of the (above) found primitive'   HT   "with an area of "    area
0011 exit                                             /*stick a fork in it,  we're all done. */
0012 /*──────────────────────────────────────────────────────────────────────────────────────*/
0013 Heron: @.= 0;   #= 0;   !.= .;   minP= 9e9;  maxA= 0;  maxP= 0;  minA= 9e9;  Ln= length(N)
0014 do i=1  for N**2%2;    _= i*i;      !._= i               /*     __   */
0015 end   /*i*/                   /* [↑]  pre─calculate some fast  √     */
0016 do a=3  to N                                   /*start at a minimum side length of 3. */
0017 Aeven= a//2==0                        /*if  A  is even,  B and C must be odd.*/
0018 do b=a+Aeven  to N  by 1+Aeven;   ab= a + b  /*AB: a shortcut for the sum of A & B. */
0019 if b//2==0  then                bump= 1      /*Is  B  even?       Then  C  is odd.  */
0020 else if Aeven  then bump= 0      /*Is  A  even?         "   "   "  "    */
0021 else bump= 1      /*A and B  are both odd,  biz as usual.*/
0022 do c=b+bump  to N  by 2;   s= (ab + c) % 2 /*calculate triangle's perimeter:   S. */
0023 _= s*(s-a)*(s-b)*(s-c);  if !._==.     then iterate  /*Is  _  not a square?  Skip.*/
0024 if hGCD(a,b,c) \== 1                   then iterate  /*GCD of sides not 1?   Skip.*/
0025 #= # + 1;     p= ab + c;   ar= !._                   /*primitive Heronian triangle*/
0026 minP= min( p, minP);     maxP= max( p, maxP);       Lp= length(maxP)
0027 minA= min(ar, minA);     maxA= max(ar, maxA);       La= length(maxA);         @.ar=
0028 _= @.ar.p.0  +  1                                    /*bump the triangle counter. */
0029 @.ar.p.0= _;    @.ar.p._= right(a, Ln)    right(b, Ln)    right(c, Ln)    /*unique*/
0030 end   /*c*/                                /* [↑]  keep each unique perimeter #.  */
0031 end     /*b*/
0032 end       /*a*/;    return #                   /*return number of Heronian triangles. */
0033 /*──────────────────────────────────────────────────────────────────────────────────────*/
0034 hGCD: x=a;  do j=2  for 2;   y= arg(j);         do until y==0; parse value x//y y with y x
0035 end   /*until*/
0036 end   /*j*/;                return x
0037 /*──────────────────────────────────────────────────────────────────────────────────────*/
0038 show: m=0;  say;  say;   parse arg ae;     say arg(2);         if ae\==''  then first= 9e9
0039 say;  $=left('',9);   $a= $"area:";  $p= $'perimeter:';  $s= $"sides:"  /*literals*/
0040 do   i=minA  to maxA;  if ae\=='' & i\==ae  then iterate          /*= area? */
0041 do j=minP  to maxP  until m>=first      /*only display the  FIRST entries.*/
0042 do k=1  for @.i.j.0;    m= m + 1      /*display each  perimeter  entry. */
0043 say right(m, 9)   $a    right(i, La)    $p   right(j, Lp)    $s    @.i.j.k
0044 end   /*k*/
0045 end     /*j*/                           /* [↑]  use the known perimeters. */
0046 end       /*i*/;            return        /* [↑]  show any found triangles. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 ae               38
002 first            38
003 i                40
004 j                41
005 k                42
006 m                42
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 !.               -> newV1.           13 14
002 @.               -> newV2.           27 29 29
003 $a               -> newV3            39
004 $p               -> newV4            39
005 $s               -> newV5            39
006 #                -> newV6            13 25
007 _                -> newV7            14 23 28
008 $                -> newV8            39
