-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:18
-------------------------------------------------------------------------
0001 /*REXX pgm solves the continuous burglar's knapsack problem; items with weight and value*/
0002 @.=               /*═══════  name    weight  value  ══════*/
0003 @.1 = 'flitch     4       30  '
0004 @.2 = 'beef       3.8     36  '
0005 @.3 = 'pork       5.4     43  '
0006 @.4 = 'greaves    2.4     45  '
0007 @.5 = 'brawn      2.5     56  '
0008 @.6 = 'welt       3.7     67  '
0009 @.7 = 'ham        3.6     90  '
0010 @.8 = 'salami     3       95  '
0011 @.9 = 'sausage    5.9     98  '
0012 parse arg maxW d .                               /*get possible arguments from the C.L. */
0013 if maxW=='' | maxW==","  then maxW=15            /*the burglar's knapsack maximum weight*/
0014 if    d=='' |    d==","  then    d= 3            /*# decimal digits shown with  FORMAT. */
0015 wL=d+length('weight');   nL=d+length("total weight");    vL=d+length('value')  /*lengths*/
0016 totW=0;  totV=0                                  /* [↓]  assign item to separate lists. */
0017 do #=1  while @.#\=='';    parse var @.# n.# w.# v.# .;   end;      #=#-1
0018 call show  'unsorted item list'                  /*display the header and the   @  list.*/
0019 call sortD                                       /*invoke descemdomg sort for:  n. w. v.*/
0020 call hdr "burglar's knapsack contents"
0021 do j=1  for #      while totW<maxW;   f=1        /*process the items.  */
0022 if totW+w.j>=maxW  then f=(maxW-totW)/w.j        /*calculate fraction. */
0023 totW=totW+w.j*f;        totV=totV+v.j*f          /*add it ───► totals. */
0024 call syf  left(word('{all}',1+(f\==1)),5)   n.j,  w.j*f,  v.j*f
0025 end   /*j*/                     /* [↑]  display item, maybe with {all} */
0026 call sep;  say                                   /* [↓]   $  suppresses trailing zeroes.*/
0027 call sy  left('total weight', nL, "─"),              $(format(totW,,d))
0028 call sy  left('total  value', nL, "─"),      ,       $(format(totV,,d))
0029 exit                                             /*stick a fork in it,  we're all done. */
0030 /*──────────────────────────────────────────────────────────────────────────────────────*/
0031 sortD: do s=2  to #;  a=n.s; !=w.s; u=v.s        /* [↓]  this is a descending sort.     */
0032 do k=s-1  by -1  to 1  while v.k/w.k<u/!;  ?=k+1; n.?=n.k; w.?=w.k; v.?=v.k;  end
0033 ?=k+1;   n.?=a;   w.?=!;   v.?=u
0034 end   /*s*/;               return         /* ↑↑↑ algorithm is OK for small arrays*/
0035 /*──────────────────────────────────────────────────────────────────────────────────────*/
0036 hdr:   say;  say;  say center(arg(1),50,'─');   say;  call title;  call sep;      return
0037 sep:   call sy  copies('═', nL),  copies("═", wL),  copies('═', vL);              return
0038 show:  call hdr arg(1);           do j=1  for #;   call syf n.j, w.j, v.j;   end; return
0039 sy:    say left('',9)   left(arg(1),nL)   right(arg(2),wL)   right(arg(3),vL);    return
0040 syf:   call sy arg(1),    $(format(arg(2), , d)),    $(format(arg(3), , d));      return
0041 title: call sy center('item',nL),  center("weight", wL),  center('value', vL);    return
0042 $:     parse arg x;if pos(.,x)>1 then x=left(strip(strip(x,'T',0),,.),length(x)); return x
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                42 42
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           2 3 4 5 6 7 8 9 10 11 17
002 #                -> newV2            17 17
003 !                -> newV3            31
004 ?                -> newV4            32 33
