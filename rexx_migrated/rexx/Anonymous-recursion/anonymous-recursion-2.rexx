/*ª*REXX program to show anonymous recursion of a function or subroutine with memoization.*/
numeric digits 1e6                               /*ª*in case the user goes ka-razy with X.*/
parse arg x .                                    /*ª*obtain the optional argument from CL.*/
if x=='' | x==","  then x= 12                    /*ª*Not specified?  Then use the default.*/
newV1.= .;     newV1.0= 0;      newV1.1= 1                   /*ª*used to implement memoization for FIB*/
w= length(x)                                     /*ª*W:  used for formatting the output.  */
do j=0  for x+1               /*ª*use the  argument  as an upper limit.*/
say 'fibonacci('right(j, w)") ="   fib(j)
end  /*ª*j*/                    /*ª* [â†‘] show Fibonacci sequence: 0 â”€â”€â–º X*/
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
fib: procedure expose newV1.; arg z;  if z>=0  then return .(z)
say "***error***  argument can't be negative.";   exit
.: procedure expose newV1.; arg #; if newV1.#\==.  then return newV1.#;  newV1.#=.(#-1)+.(#-2); return newV1.#
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Anonymous-recursion\anonymous-recursion-2.rexx was migrated on 23 Mar 2025 at 10:43:05
 * -------------------------------------------------------------------------
*/ 
