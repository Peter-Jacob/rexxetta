/*ª*REXX program illustrates building a simple inverted index  and  a method of word find.*/
newV2.=                                              /*ª*a dictionary of words   (so far).    */
newV4=                                               /*ª*a list of found words   (so far).    */
call invertI 0, 'BURMA0.TXT'                     /*ª*read the file:  BURMA0.TXT  Â·Â·Â·      */
call invertI 1, 'BURMA1.TXT'                     /*ª*  "   "    "    BURMA1.TXT  Â·Â·Â·      */
call invertI 2, 'BURMA2.TXT'                     /*ª*  "   "    "    BURMA2.TXT  Â·Â·Â·      */
call invertI 3, 'BURMA3.TXT'                     /*ª*  "   "    "    BURMA3.TXT  Â·Â·Â·      */
call invertI 4, 'BURMA4.TXT'                     /*ª*  "   "    "    BURMA4.TXT  Â·Â·Â·      */
call invertI 5, 'BURMA5.TXT'                     /*ª*  "   "    "    BURMA5.TXT  Â·Â·Â·      */
call invertI 6, 'BURMA6.TXT'                     /*ª*  "   "    "    BURMA6.TXT  Â·Â·Â·      */
call invertI 7, 'BURMA7.TXT'                     /*ª*  "   "    "    BURMA7.TXT  Â·Â·Â·      */
call invertI 8, 'BURMA8.TXT'                     /*ª*  "   "    "    BURMA8.TXT  Â·Â·Â·      */
call invertI 9, 'BURMA9.TXT'                     /*ª*  "   "    "    BURMA9.TXT  Â·Â·Â·      */
call findAword  "huz"                            /*ª*find a word.                         */
call findAword  "60"                             /*ª*find another word.                   */
call findAword  "don't"                          /*ª*and find another word.               */
call findAword  "burma-shave"                    /*ª*and find yet another word.           */
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
findAword: procedure expose newV2.;  arg x           /*ª*get an uppercase version of the X arg*/
parse arg ox                          /*ª*get original (as-is)  value of X arg.*/
newV5=newV2.x;    oxo='â”€â”€â”€'ox"â”€â”€â”€"
if newV5==''  then do
say 'word'   oxo   "not found."
return 0
end
newV3=newV5                                  /*ª*save _ text, pass it back to invoker.*/
say 'word'  oxo  "found in:"
do  until newV5=='';    parse var   newV5   f  w  newV5
say '       file='f   "  word="w
end   /*ª*until Â·Â·Â· */
return newV3
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
invertI:   procedure expose newV2. newV4; parse arg newV6,fn /*ª*the file number and the filename.    */
call lineout fn                       /*ª*close the file, Â·Â·Â· just in case.    */
w=0                                   /*ª*the number of words found  (so far). */
do  while lines(fn)\==0           /*ª* [â†“]   process the entire file.      */
newV5=space( linein(fn) )             /*ª*read a line, elide superfluous blanks*/
if newV5==''  then iterate            /*ª*if a blank record,  then ignore it.  */
say 'file' newV6", record:" newV5         /*ª*display the record â”€â”€â–º terminal.     */

do  until newV5==''                /*ª*pick off words from record until done*/
parse upper var   newV5   newV7  newV5     /*ª*pick off a word  (it's in uppercase).*/
newV7=stripper(newV7)                  /*ª*strip any trailing punctuation.      */
if newV7=''  then iterate          /*ª*is the word now all blank (or null)? */
w=w+1                          /*ª*bump the word counter (index).       */
newV2.newV7=newV2.newV7  newV6  w                  /*ª*append the new word to a list.       */
if wordpos(newV7,newV4)==0  then newV4=newV4 newV7 /*ª*add it to the list of words found.   */
end   /*ª*until Â·Â·Â· */
end      /*ª*while Â·Â·Â· */
say;     call lineout fn              /*ª*close the file, just to be neat&safe.*/
return w                              /*ª*return the index of word in record.  */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
stripper:  procedure;  parse arg q               /*ª*remove punctuation at the end of word*/
newV1= '.,:;?Âîå÷Ö·!Âîå÷Ö´âˆ™Â·';        do j=1  for length(newV1)
q=strip(q, 'T', substr(newV1, j, 1) )
end   /*ª*j*/
return q
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Inverted-index\inverted-index.rexx was migrated on 23 Mar 2025 at 10:43:17
 * -------------------------------------------------------------------------
*/ 
