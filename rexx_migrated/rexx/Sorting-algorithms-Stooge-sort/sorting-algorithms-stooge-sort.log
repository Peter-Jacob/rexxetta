-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:30
-------------------------------------------------------------------------
0001 /*REXX program sorts  an  integer array   @.   [the first element starts at index zero].*/
0002 parse arg N .                                    /*obtain an optional argument from C.L.*/
0003 if N=='' | N==","  then N=19                     /*Not specified?  Then use the default.*/
0004 call gen@                                        /*generate a type of scattered array.  */
0005 call show    'before sort'                       /*show the   before   array elements.  */
0006 say copies('▒', wN+wV+ 50)                       /*show a separator line (between shows)*/
0007 call stoogeSort  0, N                            /*invoke the  Stooge Sort.             */
0008 call show    ' after sort'                       /*show the    after   array elements.  */
0009 exit                                             /*stick a fork in it,  we're all done. */
0010 /*──────────────────────────────────────────────────────────────────────────────────────*/
0011 gen@: wV= 0;   do k=0  to N;      @.k= k*2 + k*-1**k;     if @.k//7==0  then @.k= -100 - k
0012 wV= max(wV, length(@.k) );  end;        wN=length(N);                return
0013 /*──────────────────────────────────────────────────────────────────────────────────────*/
0014 show: do j=0 to N; say right('element',22) right(j,wN) arg(1)":" right(@.j,wV); end;return
0015 /*──────────────────────────────────────────────────────────────────────────────────────*/
0016 stoogeSort: procedure expose @.;  parse arg i,j                  /*sort from  I ───► J. */
0017 if @.j<@.i  then parse value @.i @.j  with  @.j @.i  /*swap  @.i  with  @.j */
0018 if j-i>1    then do;   t=(j-i+1) % 3                 /*%:  integer division.*/
0019 call stoogeSort  i  ,  j-t    /*invoke recursively.  */
0020 call stoogeSort  i+t,  j      /*   "        "        */
0021 call stoogeSort  i  ,  j-t    /*   "        "        */
0022 end
0023 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 i                16
002 j                16
003 wV               12
004 wN               12
005 NORMAL.5         
006 NORMAL.6         
007 NORMAL.7         
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
014 NORMAL.14        
015 t                18
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           11 11 17 17
