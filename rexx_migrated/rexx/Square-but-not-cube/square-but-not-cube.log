-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:30
-------------------------------------------------------------------------
0001 /*REXX pgm shows N ints>0 that are squares and not cubes, & which are squares and cubes.*/
0002 numeric digits 20                                /*ensure handling of larger numbers.   */
0003 parse arg N .                                    /*obtain optional argument from the CL.*/
0004 if N=='' | N==","  then N= 30                    /*Not specified?  Then use the default.*/
0005 sqcb= N<0                                        /*N negative? Then show squares & cubes*/
0006 N = abs(N)                                       /*define  N  to be the absolute value. */
0007 w= (length(N) + 3)  *  3                         /*W:  used for aligning output columns.*/
0008 say '   count   '                                /*display the  1st  line of the title. */
0009 say '  ───────  '                                /*   "     "   2nd    "   "  "    "    */
0010 @.= 0                                            /*@:  stemmed array for computed cubes.*/
0011 #= 0;  ##= 0                  /*count (integer): squares & not cubes.*/
0012 do j=1  until #==N | ##==N                  /*loop 'til enough    "    "  "    "   */
0013 sq= j*j;          cube= sq*j;    @.cube= 1  /*compute the square of J and the cube.*/
0014 if @.sq  then do
0015 ##= ## + 1                    /*bump the counter of squares & cubes. */
0016 if \sqcb  then counter=   left('', 12)     /*don't show this counter.*/
0017 else counter= center(##, 12)     /*  do    "    "     "    */
0018 say counter        right(commas(sq), w)  'is a square and       a cube'
0019 end
0020 else do
0021 if sqcb  then  iterate
0022 #= # + 1                      /*bump the counter of squares & ¬ cubes*/
0023 say center(#, 12)  right(commas(sq), w)  'is a square and  not  a cube'
0024 end
0025 end   /*j*/
0026 exit 0                                           /*stick a fork in it,  we're all done. */
0027 /*──────────────────────────────────────────────────────────────────────────────────────*/
0028 commas: parse arg ?;  do jc=length(?)-3  to 1  by -3; ?=insert(',', ?, jc); end;  return ?
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 jc               28
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           10 13
002 ##               -> newV2            11 15
003 #                -> newV3            11 22
004 ?                -> newV4            28 28
