-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:24
-------------------------------------------------------------------------
0001 /*REXX program  tests  if a number  (or a range of numbers)  is/are  perfect.           */
0002 parse arg low high .                             /*obtain optional arguments from the CL*/
0003 if high=='' & low==""  then high=34000000        /*if no arguments,  then use a  range. */
0004 if  low==''            then  low=1               /*if no   LOW,  then assume unity.     */
0005 low=low+low//2                                   /*if LOW is odd,   bump it by  one.    */
0006 if high==''            then high=low             /*if no  HIGH,   then assume  LOW.     */
0007 w=length(high)                                   /*use  W  for formatting the output.   */
0008 numeric digits max(9,w+2)                        /*ensure enough digits to handle number*/
0009 
0010 do i=low  to high  by 2              /*process the single number or a range.*/
0011 if isPerfect(i)  then say  right(i,w)   'is a perfect number.'
0012 end   /*i*/
0013 exit                                             /*stick a fork in it,  we're all done. */
0014 /*──────────────────────────────────────────────────────────────────────────────────────*/
0015 isPerfect: procedure;  parse arg x 1 y           /*obtain the number to be tested.      */
0016 if x==6  then return 1                /*handle the special case  of  six.    */
0017 
0018 do  until  y<10                   /*find the digital root of  Y.         */
0019 parse var y 1 r 2;    do k=2  for length(y)-1; r=r+substr(y,k,1); end /*k*/
0020 y=r                               /*find digital root of the digital root*/
0021 end   /*until*/                   /*wash, rinse, repeat ···              */
0022 
0023 if r\==1  then return 0               /*Digital root ¬ 1 ?    Then ¬ perfect.*/
0024 s=3 + x%2                             /*the first 3 factors of X.         ___*/
0025 do j=3  while  j*j<=x     /*starting at 3, find the factors ≤√ X */
0026 if x//j\==0  then iterate /*J  isn't a factor o f X,  so skip it.*/
0027 s = s + j + x%j           /*  ··· add it  and  the other factor. */
0028 end   /*j*/               /*(above)  is marginally faster.       */
0029 return s==x                           /*if sum matches  X, then it's perfect!*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 y                19 20
002 r                19 19
003 k                19
004 s                24 27
005 j                25
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
