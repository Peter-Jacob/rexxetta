-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:24
-------------------------------------------------------------------------
0001 /*REXX program  tests  if a number  (or a range of numbers)  is/are  perfect.           */
0002 parse arg low high .                             /*obtain the optional arguments from CL*/
0003 if high=='' & low==""  then high=34000000        /*if no arguments,  then use a range.  */
0004 if  low==''            then  low=1               /*if no   LOW,  then assume  unity.    */
0005 low=low+low//2                                   /*if LOW is odd,  bump it by  one.     */
0006 if high==''            then high=low             /*if no  HIGH,  then assume  LOW.      */
0007 w=length(high)                                   /*use   W   for formatting the output. */
0008 numeric digits max(9,w+2)                        /*ensure enough digits to handle number*/
0009 @.=0;   @.1=2                                    /*highest magic number  and its index. */
0010 
0011 do i=low  to high  by 2              /*process the single number or a range.*/
0012 if isPerfect(i)  then say  right(i,w)   'is a perfect number.'
0013 end   /*i*/
0014 exit                                             /*stick a fork in it,  we're all done. */
0015 /*──────────────────────────────────────────────────────────────────────────────────────*/
0016 isPerfect: procedure expose @.;  parse arg x     /*obtain the number to be tested.      */
0017 /*Lucas-Lehmer know that perfect       */
0018 /*    numbers can be expressed as:     */
0019 /*    [2**n - 1]  *  [2** (n-1) ]      */
0020 
0021 if @.0<x then do @.1=@.1  while @._<=x; _=(2**@.1-1)*2**(@.1-1);  @.0=_;  @._=_
0022 end   /*@.1*/           /*uses memoization for the formula.    */
0023 
0024 if @.x==0  then return 0              /*Didn't pass Lucas-Lehmer test?       */
0025 s = 3 + x%2                           /*we know the following factors:       */
0026 /*  1      ('cause Mama said so.)      */
0027 /*  2      ('cause it's even.)         */
0028 /* x÷2     (   "     "    "  )      ___*/
0029 do j=3  while  j*j<=x     /*starting at 3, find the factors ≤√ X */
0030 if x//j\==0  then iterate /*J  divides  X  evenly,  so ···       */
0031 s=s + j + x%j             /*···  add it  and  the other factor.  */
0032 end   /*j*/               /*(above)  is marginally faster.       */
0033 return s==x                           /*if the sum matches  X,  it's perfect!*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                16
002 s                25 31
003 j                29
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           9 9 21 21 21
002 _                -> newV2            21
