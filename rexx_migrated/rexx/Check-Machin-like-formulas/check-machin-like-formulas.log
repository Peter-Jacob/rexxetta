-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:08
-------------------------------------------------------------------------
0001 /*REXX program  evaluates  some  Machin─like  formulas  and  verifies  their veracity.  */
0002 @.=;   pi= pi();        numeric digits( length(pi) ) - length(.);      numeric fuzz 3
0003 say center('  computing with ' digits() " decimal digits  ", 110, '═')
0004 @.1 = 'pi/4 =    atan(1/2)    +    atan(1/3)'
0005 @.2 = 'pi/4 =  2*atan(1/3)    +    atan(1/7)'
0006 @.3 = 'pi/4 =  4*atan(1/5)    -    atan(1/239)'
0007 @.4 = 'pi/4 =  5*atan(1/7)    +  2*atan(3/79)'
0008 @.5 = 'pi/4 =  5*atan(29/278) +  7*atan(3/79)'
0009 @.6 = 'pi/4 =    atan(1/2)    +    atan(1/5)   +    atan(1/8)'
0010 @.7 = 'pi/4 =  4*atan(1/5)    -    atan(1/70)  +    atan(1/99)'
0011 @.8 = 'pi/4 =  5*atan(1/7)    +  4*atan(1/53)  +  2*atan(1/4443)'
0012 @.9 = 'pi/4 =  6*atan(1/8)    +  2*atan(1/57)  +    atan(1/239)'
0013 @.10= 'pi/4 =  8*atan(1/10)   -    atan(1/239) -  4*atan(1/515)'
0014 @.11= 'pi/4 = 12*atan(1/18)   +  8*atan(1/57)  -  5*atan(1/239)'
0015 @.12= 'pi/4 = 16*atan(1/21)   +  3*atan(1/239) +  4*atan(3/1042)'
0016 @.13= 'pi/4 = 22*atan(1/28)   +  2*atan(1/443) -  5*atan(1/1393) - 10*atan(1/11018)'
0017 @.14= 'pi/4 = 22*atan(1/38)   + 17*atan(7/601) + 10*atan(7/8149)'
0018 @.15= 'pi/4 = 44*atan(1/57)   +  7*atan(1/239) - 12*atan(1/682)  + 24*atan(1/12943)'
0019 @.16= 'pi/4 = 88*atan(1/172)  + 51*atan(1/239) + 32*atan(1/682)  + 44*atan(1/5357)  + 68           *atan(1/12943)'
0020 @.17= 'pi/4 = 88*atan(1/172)  + 51*atan(1/239) + 32*atan(1/682)  + 44*atan(1/5357)  + 68           *atan(1/12944)'
0021 @.18= 'pi/4 = 88*atan(1/172)  + 51*atan(1/239) + 32*atan(1/682)  + 44*atan(1/5357)  + 67.9999999994*atan(1/12943)'
0022 
0023 do j=1  while  @.j\==''                  /*evaluate each "Machin─like" formulas.*/
0024 interpret  'answer='        @.j          /*where REXX does the heavy lifting.   */
0025 say  right( word( 'bad OK', answer + 1),  3)": "          @.j
0026 end   /*j*/
0027 exit                                             /*stick a fork in it,  we're all done. */
0028 /*──────────────────────────────────────────────────────────────────────────────────────*/
0029 pi:   return 3.141592653589793238462643383279502884197169399375105820974944592307816406286
0030 Acos: procedure; parse arg x;            return pi() * .5 - Asin(x)
0031 Atan: procedure; arg x; if abs(x)=1 then return pi()/4*sign(x); return Asin(x/sqrt(1+x*x))
0032 /*──────────────────────────────────────────────────────────────────────────────────────*/
0033 Asin: procedure; parse arg x 1 z 1 o 1 p;       a=abs(x);       aa=a*a
0034 if a>=sqrt(2)*.5  then  return sign(x)  *  Acos( sqrt(1 - aa) )
0035 do j=2 by 2 until p=z;  p=z;  o=o*aa*(j-1)/j;  z=z+o/(j+1); end /*j*/;  return z
0036 /*──────────────────────────────────────────────────────────────────────────────────────*/
0037 sqrt: procedure; parse arg x; if x=0  then return 0; d=digits(); m.=9; h=d+6; numeric form
0038 numeric digits; parse value format(x,2,1,,0) 'E0'  with  g 'E' _ .;  g=g *.5'e'_ % 2
0039 do j=0  while h>9;       m.j=h;               h=h%2+1;       end /*j*/
0040 do k=j+5  to 0  by -1;   numeric digits m.k;  g=(g+x/g)*.5;  end /*k*/;  return g
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                37
002 d                37
003 m.               37 39
004 h                37 39
005 a                33
006 aa               33
007 j                35 39
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 NORMAL.17        
018 NORMAL.18        
019 NORMAL.19        
020 NORMAL.20        
021 NORMAL.21        
022 NORMAL.22        
023 g                38 38 40
024 k                40
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
002 _                -> newV2            38
