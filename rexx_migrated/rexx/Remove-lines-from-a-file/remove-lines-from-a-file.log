-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:26
-------------------------------------------------------------------------
0001 /*REXX program reads and writes a specified file  and  delete(s)  specified record(s).  */
0002 parse arg  iFID   ','   N   ","   many   .       /*input FID, start of delete, how many.*/
0003 if iFID=''  then call er  "no input fileID specified."                           /*oops.*/
0004 if    N=''  then call er  "no start number specified."                           /*oops.*/
0005 if many=''  then many=1                          /*Not specified?  Assume delete 1 line.*/
0006 stop=N+many-1                                    /*calculate  high end  of delete range.*/
0007 oFID=iFID'.$$$'                                  /*temp name (fileID) of the output file*/
0008 #=0                                              /*the count (so far) of records written*/
0009 do j=1  while  lines(iFID)\==0             /*J  is the record# (line)  being read.*/
0010 @=linein(iFID)                             /*read a record (line) from input file.*/
0011 if j>=N & j<=stop  then iterate            /*if it's in the range, then ignore it.*/
0012 call lineout oFID,@;    #=#+1              /*write record (line);, bump write cnt.*/
0013 end   /*j*/                                /* [↑]  by ignoring it is to delete it.*/
0014 j=j-1                                            /*adjust J (because of DO loop advance)*/
0015 if j<stop  then say  "The number of lines in file is less than the range given."
0016 $='"'                                            /*handle cases of blanks in the FID(s).*/
0017 'ERASE'   $ || iFID || $                         /*erase the original file.             */
0018 'RENAME'  $ || oFID || $      $ || iFID || $     /*rename "    new      "  to original. */
0019 say 'file '    iFID    " had"    j    'record's(j)", it now has"     #    'record's(w)"."
0020 exit                                             /*stick a fork in it,  we're all done. */
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 er:   say;      say '***error***';        say;    say arg(1);         say;         exit 13
0023 s:    if arg(1)==1  then return arg(3);   return word(arg(2) 's', 1)       /*pluralizer.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 many             5
002 stop             6
003 oFID             7
004 j                9 14
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #                -> newV1            8 12
002 @                -> newV2            10
003 $                -> newV3            16
