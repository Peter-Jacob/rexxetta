-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:30
-------------------------------------------------------------------------
0001 /*REXX program generates some random numbers, shows bin histogram, finds mean & stdDev. */
0002 numeric digits 20                                /*use twenty decimal digits precision, */
0003 showDigs=digits()%2                              /* ··· but only show ten decimal digits*/
0004 parse arg size seed .                            /*allow specification:  size, and seed.*/
0005 if size=='' | size==","  then size=100           /*Not specified?  Then use the default.*/
0006 if datatype(seed,'W')    then call random ,,seed /*allow a  seed  for the  RANDOM  BIF. */
0007 #.=0                                             /*count of the numbers in each bin.    */
0008 do j=1  for size                 /*generate some random numbers.        */
0009 @.j=random(, 99999)  /  100000   /*express random number as a fraction. */
0010 _=substr(@.j'00', 3, 1)          /*determine which bin the number is in,*/
0011 #._=#._ + 1                      /*    ···  and bump its count.         */
0012 end   /*j*/
0013 
0014 do k=0  for 10;    kp=k + 1                 /*show a histogram of the bins.        */
0015 lr='0.'k      ;    if k==0  then lr= "0  "  /*adjust for the  low range.           */
0016 hr='0.'kp     ;    if k==9  then hr= "1  "  /*   "    "   "  high range.           */
0017 barPC=right( strip( left( format( 100*#.k / size, , 2), 5)), 5)   /*compute the %. */
0018 say lr"──►"hr' '   barPC  copies("─", barPC * 2  % 1 )            /*show histogram.*/
0019 end   /*k*/
0020 say
0021 say 'sample size = ' size;          say
0022 avg=  mean(size)         ;          say '       mean = '           format(avg, , showDigs)
0023 std=stdDev(size)         ;          say '     stdDev = '           format(std, , showDigs)
0024 exit                                             /*stick a fork in it,  we're all done. */
0025 /*──────────────────────────────────────────────────────────────────────────────────────*/
0026 mean:   arg N;   $=0;    do m=1  for N;  $=$ + @.m;           end;     return      $/N
0027 stdDev: arg N;   $=0;    do s=1  for N;  $=$ + (@.s-avg)**2;  end;     return sqrt($/N) /1
0028 /*──────────────────────────────────────────────────────────────────────────────────────*/
0029 sqrt: procedure; parse arg x; if x=0  then return 0; d=digits(); m.=9; numeric form; h=d+6
0030 numeric digits;  parse value format(x,2,1,,0) 'E0'  with  g 'E' _ .;  g=g*.5'e'_ % 2
0031 do j=0  while h>9;      m.j=h;               h=h%2+1;        end /*j*/
0032 do k=j+5  to 0  by -1;  numeric digits m.k;  g=(g+x/g)*.5;   end /*k*/;  return g
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                29
002 d                29
003 m.               29 31
004 h                29 31
005 kp               14
006 lr               15 15
007 hr               16 16
008 barPC            17
009 avg              22
010 std              23
011 m                26
012 s                27
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 NORMAL.17        
018 NORMAL.18        
019 NORMAL.19        
020 NORMAL.20        
021 NORMAL.21        
022 NORMAL.22        
023 g                30 30 32
024 j                31
025 k                32
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #.               -> newV1.           7 11
002 @.               -> newV2.           9
003 _                -> newV3            10 30
004 $                -> newV4            26 26 27 27
