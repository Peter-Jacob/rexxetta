/*ª*REXX program  partitions  integer(s)    (greater than unity)   into   N   primes.     */
parse arg what                                   /*ª*obtain an optional list from the C.L.*/

do  until what==''                             /*ª*possibly process a series of integers*/
parse var what x n what; parse var  x  x '-' y /*ª*get possible range  and # partitions.*/
parse var  n  n '-' m /*ª* "      "      "     "  "      "     */
if x=='' | x==","   then x= 19                 /*ª*Not specified?  Then use the default.*/
if y=='' | y==","   then y=  x                 /*ª* "      "         "   "   "     "    */
if n=='' | n==","   then n=  3                 /*ª* "      "         "   "   "     "    */
if m=='' | m==","   then m=  n                 /*ª* "      "         "   "   "     "    */
call genP y                                    /*ª*generate   Y   number of primes.     */
do   g=x  to y              /*ª*partition  X â”€â”€â”€â–º Y  into partitions.*/
do q=n  to m;  call part  /*ª*    "      G   into    Q    primes.  */
end  /*ª*q*/
end    /*ª*g*/
end   /*ª*until*/

exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP: arg high;     newV1.1= 2;   newV1.2= 3;    newV2= 2    /*ª*get highest prime, assign some vars. */
do j=newV1.newV2+2  by 2  until newV1.newV2>high  /*ª*only find odd primes from here on.   */
do k=2  while k*k<=j           /*ª*divide by some known low odd primes. */
if j // newV1.k==0  then iterate j /*ª*Is  J  divisible by P?  Then Â¬ prime.*/
end   /*ª*k*/                    /*ª* [â†“]  a prime  (J)  has been found.  */
newV2= newV2 + 1;               newV1.newV2= j    /*ª*bump prime count; assign prime to  @.*/
end      /*ª*j*/;         return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
getP: procedure expose i. p. newV1.;  parse arg z    /*ª*bump the prime in the partition list.*/
if i.z==0  then do;   newV3= z - 1;     i.z= i.newV3;   end
i.z= i.z + 1;         newV3= i.z;       p.z= newV1.newV3;                      return 0
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
list: newV3= p.1;    if newV5==g  then do j=2  to q;     newV3= newV3 p.j
end   /*ª*j*/
else newV3= '__(not_possible)'
return 'prime'  ||  word("s", 1 + (q==1))   translate(newV3, '+ ', " _")    /*ª*plural? */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
part: i.= 0;  do j=1  for q;   call getP j
end   /*ª*j*/

do newV4=0  by 0;         newV5= 0         /*ª*!:  a DO variable for LEAVE & ITERATE*/
do s=1  for q;    newV5= newV5 + p.s   /*ª* [â†“]  is sum of the primes too large?*/
if newV5>g  then do;  if s==1  then leave newV4        /*ª*perform a quick exit?*/
do k=s    to q;  i.k= 0;       end  /*ª*k*/
do r=s-1  to q;  call getP r;  end  /*ª*r*/
iterate newV4
end
end   /*ª*s*/
if newV5==g  then leave                /*ª*is sum of the primes exactly right ? */
if newV5 <g  then do;    call getP q;    iterate;    end
end   /*ª*!*/                        /*ª* [â†‘]   Is sum too low?  Bump a prime.*/
say 'partitioned'       center(g,9)        "into"        center(q, 5)        list()
return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Partition-an-integer-x-into-n-primes\partition-an-integer-x-into-n-primes.rexx was migrated on 23 Mar 2025 at 10:43:23
 * -------------------------------------------------------------------------
*/ 
