-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:03
-------------------------------------------------------------------------
0001 /*REXX program plays the  21  game with a human,  each player chooses 1, 2, or 3  which */
0002 /*──────────── is added to the current sum, the first player to reach  21  exactly wins.*/
0003 sep= copies('─', 8);  sep2= " "copies('═', 8)" " /*construct an eye─catching msg fences.*/
0004 say sep  'Playing the  21  game.'                /*tell what's happening here at the zoo*/
0005 $=0;                       goal= 21              /*the sum [or running total]  (so far).*/
0006 do j=1  while $<goal;  call g                /*obtain the user's number via a prompt*/
0007 if x\==0    then call tot x, 1               /*Not 0?   The user wants to go first. */
0008 if $==goal  then leave                       /*the user won the game with the last #*/
0009 call ?;     if y==.  then y= random(1, 3)    /*get computer's choice  or  a random #*/
0010 say sep 'The computer chooses '     y     " as its choice."         /*inform player.*/
0011 call tot y, 0                                /*call subroutine to show the total.   */
0012 end   /*j*/
0013 say
0014 if who  then say sep  'Congratulations!   You have won the  21  game.'
0015 else say sep  'The computer has won the  21  game.'
0016 exit 0                                           /*stick a fork in it,  we're all done. */
0017 /*──────────────────────────────────────────────────────────────────────────────────────*/
0018 ?:   y=.;   do c=1  for 3  until y\==.;  if (c+$) // 4 == 1  then y= c;    end;     return
0019 ser: if bad  then return;  bad=1;  say;  say;  say sep '***error***' arg(1);  say;  return
0020 tot: arg q,who; $=$+q; say sep 'The game total is now' sep2 $ sep2; /*add; show $*/ return
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 g: low = (j \== 1)                               /*allow user to have computer go first.*/
0023 do until \bad;   bad= 0;     say            /*prompt 'til user gives a good number.*/
0024 say sep  'Please enter a number from ' low " ───► 3               (or Quit):"
0025 if j=1  then say sep '[A value of 0 (zero) means you want the computer to go first.]'
0026 parse pull x _ . 1 ox;   upper x            /*obtain user's lowercase response(s). */
0027 if   x=''             then call ser "Nothing entered."
0028 if _\==''             then call ser "Too many arguments entered: "       ox
0029 if abbrev('QUIT', x, 1)  then do;   say;      say sep  "quitting.";      exit 1;  end
0030 if \datatype(x, 'N')  then call ser "Argument isn't numeric: "           ox
0031 if \datatype(x, 'W')  then call ser "Number isn't an integer: "          ox
0032 if x<0                then call ser "Number can't be negative: "          x
0033 if x=0  &  j>1        then call ser "Number can't be zero: "              x
0034 if x>3                then call ser "Number is too large  (>3): "         x
0035 if bad                then iterate          /*Had an error? Then get another number*/
0036 x= x/1; if $+x>goal   then call ser "Number will cause the sum to exceed " goal': ' x
0037 end   /*until*/;           return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 pull             26
002 x                26 36
003 ox               26
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 $                -> newV1            5 20
002 _                -> newV2            26
