-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:26
-------------------------------------------------------------------------
0001 /*REXX program uses the Ramer-Douglas-Peucker (RDP) line simplification algorithm  for*/
0002 /*--------------------------- reducing the number of points used to define its shape. */
0003 Parse Arg epsilon pl                           /*obtain optional arguments from the CL*/
0004 If epsilon='' | epsilon=',' then epsilon= 1    /*Not specified?  Then use the default.*/
0005 If pl='' Then pl= '(0,0) (1,0.1) (2,-0.1) (3,5) (4,6) (5,7) (6,8.1) (7,9) (8,9) (9,9)'
0006 Say '  error threshold:' epsilon
0007 Say ' points specified:' pl
0008 Say 'points simplified:' dlp(pl)
0009 Exit
0010 dlp: Procedure Expose epsilon
0011 Parse Arg pl
0012 plc=pl
0013 Do i=1 By 1 While plc<>''
0014 Parse Var plc '(' x ',' y ')' plc
0015 p.i=x y
0016 End
0017 end=i-1
0018 dmax=0
0019 index=0
0020 Do i=2 To end-1
0021 d=distpg(p.i,p.1,p.end)
0022 If d>dmax Then Do
0023 index=i
0024 dmax=d
0025 End
0026 End
0027 If dmax>epsilon Then Do
0028 rla=dlp(subword(pl,1,index))
0029 rlb=dlp(subword(pl,index,end))
0030 rl=subword(rla,1,words(rla)-1) rlb
0031 End
0032 Else
0033 rl=word(pl,1) word(pl,end)
0034 Return rl
0035 
0036 distpg: Procedure
0037 /**********************************************************************
0038 * compute the distance of point P from the line giveb by A and B
0039 **********************************************************************/
0040 Parse Arg P,A,B
0041 Parse Var P px py
0042 Parse Var A ax ay
0043 Parse Var B bx by
0044 If ax=bx Then
0045 res=px-ax
0046 Else Do
0047 k=(by-ay)/(bx-ax)
0048 d=(ay-ax*k)
0049 res=(py-k*px-d)/sqrt(1+k**2)
0050 End
0051 Return abs(res)
0052 sqrt: Procedure
0053 /* REXX ***************************************************************
0054 * EXEC to calculate the square root of a = 2 with high precision
0055 **********************************************************************/
0056 Parse Arg x,prec
0057 If prec<9 Then prec=9
0058 prec1=2*prec
0059 eps=10**(-prec1)
0060 k = 1
0061 Numeric Digits 3
0062 r0= x
0063 r = 1
0064 Do i=1 By 1 Until r=r0 | (abs(r*r-x)<eps)
0065 r0 = r
0066 r  = (r + x/r) / 2
0067 k  = min(prec1,2*k)
0068 Numeric Digits (k + 5)
0069 End
0070 Numeric Digits prec
0071 r=r+0
0072 Return r
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                56
002 prec             56 57
003 prec1            58
004 eps              59
005 k                60 67
006 r0               62 65
007 r                63 66 71
008 i                64
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
