-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:13
-------------------------------------------------------------------------
0001 /*REXX program to find and display  Fermat  numbers, and show factors of Fermat numbers.*/
0002 parse arg n .                                    /*obtain optional argument from the CL.*/
0003 if n=='' | n==","  then n= 9                     /*Not specified?  Then use the default.*/
0004 numeric digits 20                                /*ensure enough decimal digits, for n=9*/
0005 
0006 do j=0  to n;   f= 2** (2**j)   +  1      /*calculate a series of Fermat numbers.*/
0007 say right('F'j, length(n) + 1)': '     f  /*display a particular     "      "    */
0008 end   /*j*/
0009 say
0010 do k=0  to n;   f= 2** (2**k)   +  1; say /*calculate a series of Fermat numbers.*/
0011 say center(' F'k": " f' ', 79, "═")       /*display a particular     "      "    */
0012 p= factr(f)                               /*factor a Fermat number,  given time. */
0013 if words(p)==1  then say f ' is prime.'
0014 else say 'factors: '   p
0015 end   /*k*/
0016 exit 0                                           /*stick a fork in it,  we're all done. */
0017 /*──────────────────────────────────────────────────────────────────────────────────────*/
0018 factr:  procedure; parse arg x 1 z,,?
0019 do k=1  to 11  by 2;  j= k;  if j==1  then j= 2;  if j==9  then iterate
0020 call build                          /*add  J  to the factors list.         */
0021 end   /*k*/                         /* [↑]  factor  X  with some low primes*/
0022 
0023 do y=0  by 2;         j= j + 2 +   y // 4      /*ensure not  ÷  by three.  */
0024 parse var j '' -1 _;  if _==5  then iterate    /*last digit a "5"? Skip it.*/
0025 if j*j>x | j>z  then leave
0026 call build                          /*add  Y  to the factors list.         */
0027 end   /*y*/                         /* [↑]  factor  X  with other higher #s*/
0028 j= z
0029 if z\==1  then ?= build()
0030 if ?=''   then do;  @.1= x;  ?= x;  #= 1;  end
0031 return ?
0032 /*──────────────────────────────────────────────────────────────────────────────────────*/
0033 build:     do  while z//j==0;    z= z % j;    ?= ? j;    end;              return strip(?)
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 j                24 28
002 z                33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           30
002 ?                -> newV2            18 29 30 33
003 _                -> newV3            24
004 #                -> newV4            30
