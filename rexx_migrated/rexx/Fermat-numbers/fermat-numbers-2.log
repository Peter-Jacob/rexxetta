-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:13
-------------------------------------------------------------------------
0001 /*REXX program to find and display  Fermat  numbers, and show factors of Fermat numbers.*/
0002 parse arg n .                                    /*obtain optional argument from the CL.*/
0003 if n=='' | n==","  then n= 9                     /*Not specified?  Then use the default.*/
0004 numeric digits 200                               /*ensure enough decimal digits, for n=9*/
0005 
0006 do j=0  to n;   f= 2** (2**j)   +  1      /*calculate a series of Fermat numbers.*/
0007 say right('F'j, length(n) + 1)': '     f  /*display a particular     "      "    */
0008 end   /*j*/
0009 say
0010 do k=5  to n;   f= 2** (2**k)   +  1; say /*calculate a series of Fermat numbers.*/
0011 say center(' F'k": " f' ', 79, "═")       /*display a particular     "      "    */
0012 a= rho(f)                                 /*factor a Fermat number,  given time. */
0013 b= f % a
0014 if a==b  then say f ' is prime.'
0015 else say 'factors:  '   commas(a)     " "     commas(b)
0016 end   /*k*/
0017 exit 0                                           /*stick a fork in it,  we're all done. */
0018 /*──────────────────────────────────────────────────────────────────────────────────────*/
0019 commas:  parse arg _;  do ?=length(_)-3  to 1  by -3; _=insert(',', _, ?); end;   return _
0020 /*──────────────────────────────────────────────────────────────────────────────────────*/
0021 rho:  procedure;  parse arg n;    y= 2;  d= 1    /*initialize  X, Y,  and  D  variables.*/
0022 do x=2  until d==n                       /*try rho method with X=2 for 1st time.*/
0023 do    while d==1
0024 x= (x*x + 1) // n
0025 v= (y*y + 1) // n
0026 y= (v*v + 1) // n
0027 parse value  x-y   with  xy  1  sig  2 /*obtain sign of the  x-y  difference. */
0028 if sig=='-'  then parse var  xy  2  xy /*Negative?   Then use absolute value. */
0029 nn= n
0030 do  until nn==0
0031 parse value xy//nn nn with nn xy /*assign two variables:   NN  and  XY  */
0032 end   /*until*/                  /*this is an  in-line   GCD  function. */
0033 d= xy                                  /*assign variable   D   with a new  XY */
0034 end   /*while*/
0035 end     /*x*/
0036 return d                                   /*found a factor of  N.      Return it.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 xy               28 28 31
002 nn               29 31
003 until            30
004 x                22 24
005 while            23
006 v                25
007 NORMAL.7         
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 xy               27
012 sig              27
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 d                33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _                -> newV1            19 19
002 ?                -> newV2            19
