-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:19
-------------------------------------------------------------------------
0001 /*REXX pgm demonstrates some binary (also known as bit or logical)  extended operations.*/
0002 x= 1    ;    @x= ' x '   /*set the initial values of  X  and Y, */
0003 y= 0    ;    @y= ' y '   /*  and a couple of literals for HDRs. */
0004 /* [↓]  echo  the   X  and  Y   values.*/
0005 call $ 'name', "value"                           /*display the  header  (title) line.   */
0006 call $ 'x'   ,    x                              /*display "x"  and then the value of X.*/
0007 call $ 'y'   ,    y                              /*   "    "y"   "    "   "    "    " Y */
0008 /* [↓]  negate the X; then the Y value.*/
0009 call $ 'name', "negated"                         /*some REXXes support the  ¬  character*/
0010 call $ 'x'   ,   \x                              /*display "x"  and then the value of ¬X*/
0011 call $ 'y'   ,   \y                              /*   "    "y"   "    "   "    "    " ¬Y*/
0012 say                                              /*note:  NXOR  is also known as  XNOR. */
0013 say                                              /*all  16  boolean operations could ···*/
0014 /*  be shown, but only the commonly ···*/
0015 /*  known functions will be shown here.*/
0016 call $ @x, @y, 'AND' ;   do x=0  to 1;   do y=0  to 1;   call $ x, y,   x  & y ;  end; end
0017 call $ @x, @y, 'NAND';   do x=0  to 1;   do y=0  to 1;   call $ x, y, \(x  & y);  end; end
0018 call $ @x, @y, 'OR'  ;   do x=0  to 1;   do y=0  to 1;   call $ x, y,   x  | y ;  end; end
0019 call $ @x, @y, 'NOR' ;   do x=0  to 1;   do y=0  to 1;   call $ x, y, \(x  | y);  end; end
0020 call $ @x, @y, 'XOR' ;   do x=0  to 1;   do y=0  to 1;   call $ x, y,   x && y ;  end; end
0021 call $ @x, @y, 'NXOR';   do x=0  to 1;   do y=0  to 1;   call $ x, y, \(x && y);  end; end
0022 exit 0                                           /*stick a fork in it,  we're all done. */
0023 /*──────────────────────────────────────────────────────────────────────────────────────*/
0024 $: parse arg @.1, @.2, @.3, @.4;            hdr= length(@.1) \== 1;     if hdr  then say
0025 do j=0  to hdr;               _=
0026 do k=1  for arg();      _=_  center(@.k, 7)
0027 end   /*k*/
0028 say _
0029 @.= copies('═', 7)                 /*define a new separator (header) line.*/
0030 end         /*j*/
0031 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 hdr              24
002 j                25
003 k                26
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @x               -> newV1            2
002 @y               -> newV2            3
003 @.               -> newV3.           24 24 24 24 29
004 _                -> newV4            25 26
