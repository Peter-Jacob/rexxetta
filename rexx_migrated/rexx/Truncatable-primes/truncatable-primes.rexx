/*ª*REXX program finds largest  leftâ”€ and rightâ”€truncatable  primes â‰¤ 1m  (or argument 1).*/
parse arg hi .;      if hi==''  then hi= 1000000 /*ª*Not specified? Then use default of 1m*/
call genP                                        /*ª*generate some primes,  about  hi Ã· 2 */
/*ª* [â†“]  find largest left truncatable P*/
do L=newV4  by -1  for newV4                           /*ª*search from top end;  get the length.*/
do k=1  for length(newV1.L); newV3= right(newV1.L, k) /*ª*validate all left truncatable primes.*/
if \newV2.newV3  then iterate L                   /*ª*Truncated number not prime?  Skip it.*/
end   /*ª*k*/
leave                                          /*ª*egress, found left truncatable prime.*/
end        /*ª*L*/
/*ª* [â†“]  find largest right truncated P.*/
do R=newV4  by -1  for newV4                           /*ª*search from top end;  get the length.*/
do k=1  for length(newV1.R);  newV3= left(newV1.R, k) /*ª*validate all right truncatable primes*/
if \newV2.newV3  then iterate R                   /*ª*Truncated number not prime?  Skip it.*/
end   /*ª*k*/
leave                                          /*ª*egress, found right truncatable prime*/
end        /*ª*R*/

say 'The largest  leftâ”€truncatable prime â‰¤'        hi        " is "       right(newV1.L, w)
say 'The largest rightâ”€truncatable prime â‰¤'        hi        " is "       right(newV1.R, w)
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP: newV2.= 0;                     w= length(hi)   /*ª*placeholders for primes;  max width. */
newV1.1=2;  newV1.2=3;  newV1.3=5;  newV1.4=7;  newV1.5=11     /*ª*define some low primes.              */
newV2.2=1;  newV2.3=1;  newV2.5=1;  newV2.7=1;  newV2.11=1     /*ª*   "     "   "    "     flags.       */
newV4=5;     s.newV4= newV1.newV4 **2    /*ª*number of primes so far;     primeÂ². */
/*ª* [â†“]  generate more  primes  â‰¤  high.*/
do j=newV1.newV4+2  by 2  for max(0, hi%2-newV1.newV4%2-1)      /*ª*find odd primes from here on. */
parse var j '' -1 newV3; if     newV3==5  then iterate  /*ª*J divisible by 5?  (right dig)*/
if j// 3==0  then iterate  /*ª*"     "      " 3?             */
if j// 7==0  then iterate  /*ª*"     "      " 7?             */
/*ª* [â†‘]  the above five lines saves time*/
do k=5  while s.k<=j              /*ª* [â†“]  divide by the known odd primes.*/
if j // newV1.k == 0  then iterate j  /*ª*Is  J Ã· X?  Then not prime.     ___  */
end   /*ª*k*/                       /*ª* [â†‘]  only process numbers  â‰¤  âˆš J   */
newV4= newV4+1;    newV1.newV4= j;    s.newV4= j*j;   newV2.j= 1 /*ª*bump # of Ps; assign next P;  PÂ²; P# */
end          /*ª*j*/
return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Truncatable-primes\truncatable-primes.rexx was migrated on 23 Mar 2025 at 10:43:33
 * -------------------------------------------------------------------------
*/ 
