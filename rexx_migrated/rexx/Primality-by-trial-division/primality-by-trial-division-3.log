-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:25
-------------------------------------------------------------------------
0001 /*REXX program tests for  primality by using  (kinda smartish)  trial division.         */
0002 parse arg n .;  if n==''  then n=10000           /*let the user choose the upper limit. */
0003 tell=(n>0);     n=abs(n)                         /*display the primes  only if   N > 0. */
0004 p=0                                              /*a count of the primes found (so far).*/
0005 do j=-57  to n                             /*start in the cellar and work up.     */
0006 if \isPrime(j)  then iterate               /*if not prime,  then keep looking.    */
0007 p=p+1                                      /*bump the jelly bean counter.         */
0008 if tell  then say right(j,20) 'is prime.'  /*maybe display prime to the terminal. */
0009 end   /*j*/
0010 say
0011 say  "There are "      p       " primes up to "        n        ' (inclusive).'
0012 exit                                             /*stick a fork in it,  we're all done. */
0013 /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
0014 isPrime: procedure;    parse arg x               /*get the integer to be investigated.  */
0015 if x<107  then return wordpos(x, '2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53',
0016 '59 61 67 71 73 79 83 89 97 101 103')\==0  /*some low primes.*/
0017 if x// 2 ==0  then return 0             /*eliminate all the even numbers.      */
0018 if x// 3 ==0  then return 0             /* Â·Â·Â· and eliminate the triples.      */
0019 parse var  x  ''  -1  _                 /*          obtain the rightmost digit.*/
0020 if     _ ==5  then return 0             /* Â·Â·Â· and eliminate the nickels.      */
0021 if x// 7 ==0  then return 0             /* Â·Â·Â· and eliminate the luckies.      */
0022 if x//11 ==0  then return 0
0023 if x//13 ==0  then return 0
0024 if x//17 ==0  then return 0
0025 if x//19 ==0  then return 0
0026 if x//23 ==0  then return 0
0027 if x//29 ==0  then return 0
0028 if x//31 ==0  then return 0
0029 if x//37 ==0  then return 0
0030 if x//41 ==0  then return 0
0031 if x//43 ==0  then return 0
0032 if x//47 ==0  then return 0
0033 if x//53 ==0  then return 0
0034 if x//59 ==0  then return 0
0035 if x//61 ==0  then return 0
0036 if x//67 ==0  then return 0
0037 if x//71 ==0  then return 0
0038 if x//73 ==0  then return 0
0039 if x//79 ==0  then return 0
0040 if x//83 ==0  then return 0
0041 if x//89 ==0  then return 0
0042 if x//97 ==0  then return 0
0043 if x//101==0  then return 0
0044 if x//103==0  then return 0             /*Note:  REXX   //   is  Ã·  remainder. */
0045 do k=107  by 6  while k*k<=x  /*this skips odd multiples of three.   */
0046 if x//k    ==0  then return 0 /*perform a divide (modulus),          */
0047 if x//(k+2)==0  then return 0 /* Â·Â·Â· and the next also.   ___        */
0048 end   /*k*/                   /*divide up through the    âˆš x         */
0049 return 1                                /*after all that,  Â·Â·Â· it's a prime.   */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                19
002 k                45
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 'µ¹ ¶± ¶· ·± ·³  -> newV1            16
002 _                -> newV2            19
