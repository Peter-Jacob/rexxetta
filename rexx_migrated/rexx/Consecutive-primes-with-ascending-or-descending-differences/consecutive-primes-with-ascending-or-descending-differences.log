-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:09
-------------------------------------------------------------------------
0001 /*REXX program finds the longest sequence of consecutive primes where the differences   */
0002 /*──────────── between the primes are strictly ascending;  also for strictly descending.*/
0003 parse arg hi cols .                              /*obtain optional argument from the CL.*/
0004 if   hi=='' |   hi==","  then   hi= 1000000      /* "      "         "   "   "     "    */
0005 if cols=='' | cols==","  then cols=      10      /* "      "         "   "   "     "    */
0006 call genP                                        /*build array of semaphores for primes.*/
0007 w= 10                                            /*width of a number in any column.     */
0008 call fRun 1;  call show 1                        /*find runs with ascending prime diffs.*/
0009 call fRun 0;  call show 0                        /*  "    "    " descending   "     "   */
0010 exit 0                                           /*stick a fork in it,  we're all done. */
0011 /*──────────────────────────────────────────────────────────────────────────────────────*/
0012 commas: parse arg ?;  do jc=length(?)-3  to 1  by -3; ?=insert(',', ?, jc); end;  return ?
0013 /*──────────────────────────────────────────────────────────────────────────────────────*/
0014 fRun: parse arg ?;    mxrun=0;     seq.=         /*max run length;  lists of prime runs.*/
0015 /*search for consecutive primes  <  HI.*/
0016 do j=2  for #-2;   cp= @.j;   jn= j+1    /*CP: current prime;  JN:  next j      */
0017 diff= @.jn - cp                          /*get difference between last 2 primes.*/
0018 cnt= 1;                       run=       /*initialize the   CNT   and   RUN.    */
0019 do k= jn+1  to #-2;    km= k-1    /*look for more primes in this run.    */
0020 if ?  then if @.k-@.km<=diff  then leave  /*Diff. too small? Stop looking*/
0021 else nop
0022 else if @.k-@.km>=diff  then leave  /*  "    "  large?   "     "   */
0023 run= run  @.k;         cnt= cnt+1 /*append a prime to the run; bump count*/
0024 diff= @.k - @.km                  /*calculate difference for next prime. */
0025 end   /*k*/
0026 if cnt<=mxrun  then iterate              /*This run too short? Then keep looking*/
0027 mxrun= max(mxrun, cnt)                   /*define a new maximum run (seq) length*/
0028 seq.mxrun= cp  @.jn  run                 /*full populate the sequence (RUN).    */
0029 end   /*j*/;                   return
0030 /*──────────────────────────────────────────────────────────────────────────────────────*/
0031 genP: @.1=2; @.2=3; @.3=5; @.4=7; @.5=11; @.6=13; @.7=17; @.8=19    /*define low primes.*/
0032 #=8;   sq.#= @.# ** 2 /*number of primes so far; prime sqiare*/
0033 /* [↓]  generate more  primes  ≤  high.*/
0034 do j=@.#+2  by 2  to hi;  parse var j '' -1 _    /*find odd primes from here on.*/
0035 if     _==5  then iterate;  if j// 3==0  then iterate   /*J ÷  5?    J ÷ by  3? */
0036 if j// 7==0  then iterate;  if j//11==0  then iterate   /*" "  7?    " "  " 11? */
0037 if j//13==0  then iterate;  if j//17==0  then iterate   /*" " 13?    " " "  17? */
0038 do k=8  while sq.k<=j             /* [↓]  divide by the known odd primes.*/
0039 if j // @.k == 0  then iterate j  /*Is  J ÷ X?  Then not prime.     ___  */
0040 end   /*k*/                       /* [↑]  only process numbers  ≤  √ J   */
0041 #= #+1;             @.#= j;    sq.#= j*j /*bump # of Ps; assign next P; P square*/
0042 end          /*j*/;            return
0043 /*──────────────────────────────────────────────────────────────────────────────────────*/
0044 show: parse arg ?;  if ?  then AorD= 'ascending'     /*choose which literal for display.*/
0045 else AorD= 'descending'    /*   "     "      "     "     "    */
0046 title= ' longest run of consecutive primes whose differences between primes are'  ,
0047 'strictly'         AorD         "and  < "         commas(hi)
0048 say;    say;    say
0049 if cols>0  then say ' index │'center(title,   1 + cols*(w+1)     )
0050 if cols>0  then say '───────┼'center(""   ,   1 + cols*(w+1), '─')
0051 found= 0;                idx= 1            /*initialize # of consecutive primes.  */
0052 $=                                         /*a list of consecutive primes (so far)*/
0053 do o=1  for words(seq.mxrun)            /*show all consecutive primes in seq.  */
0054 c= commas( word(seq.mxrun, o) )         /*obtain the next prime in the sequence*/
0055 found= found + 1                        /*bump the number of consecutive primes*/
0056 if cols<=0            then iterate      /*build the list  (to be shown later)? */
0057 $= $  right(c, max(w, length(c) ) )     /*add a nice prime ──► list, allow big#*/
0058 if found//cols\==0    then iterate      /*have we populated a line of output?  */
0059 say center(idx, 7)'│'  substr($, 2)     /*display what we have so far  (cols). */
0060 idx= idx + cols;              $=        /*bump the  index  count for the output*/
0061 end   /*o*/
0062 if $\==''  then say center(idx, 7)"│"  substr($, 2)   /*maybe show residual output*/
0063 if cols>0  then say '───────┴'center(""   ,   1 + cols*(w+1), '─')
0064 say;            say commas(Cprimes)  ' was the'title;        return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 AorD             44
002 title            46
003 found            51 55
004 idx              51 60
005 o                53
006 c                54
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           31 31 31 31 31 31 31 41
002 ?                -> newV2            12 12 14 44
003 #                -> newV3            32 41
004 _                -> newV4            34
005 $                -> newV5            52 57 60
