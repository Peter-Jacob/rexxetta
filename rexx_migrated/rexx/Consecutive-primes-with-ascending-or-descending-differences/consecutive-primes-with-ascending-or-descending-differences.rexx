/*ª*REXX program finds the longest sequence of consecutive primes where the differences   */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ between the primes are strictly ascending;  also for strictly descending.*/
parse arg hi cols .                              /*ª*obtain optional argument from the CL.*/
if   hi=='' |   hi==","  then   hi= 1000000      /*ª* "      "         "   "   "     "    */
if cols=='' | cols==","  then cols=      10      /*ª* "      "         "   "   "     "    */
call genP                                        /*ª*build array of semaphores for primes.*/
w= 10                                            /*ª*width of a number in any column.     */
call fRun 1;  call show 1                        /*ª*find runs with ascending prime diffs.*/
call fRun 0;  call show 0                        /*ª*  "    "    " descending   "     "   */
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
commas: parse arg newV2;  do jc=length(newV2)-3  to 1  by -3; newV2=insert(',', newV2, jc); end;  return newV2
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
fRun: parse arg newV2;    mxrun=0;     seq.=         /*ª*max run length;  lists of prime runs.*/
/*ª*search for consecutive primes  <  HI.*/
do j=2  for newV3-2;   cp= newV1.j;   jn= j+1    /*ª*CP: current prime;  JN:  next j      */
diff= newV1.jn - cp                          /*ª*get difference between last 2 primes.*/
cnt= 1;                       run=       /*ª*initialize the   CNT   and   RUN.    */
do k= jn+1  to newV3-2;    km= k-1    /*ª*look for more primes in this run.    */
if newV2  then if newV1.k-newV1.km<=diff  then leave  /*ª*Diff. too small? Stop looking*/
else nop
else if newV1.k-newV1.km>=diff  then leave  /*ª*  "    "  large?   "     "   */
run= run  newV1.k;         cnt= cnt+1 /*ª*append a prime to the run; bump count*/
diff= newV1.k - newV1.km                  /*ª*calculate difference for next prime. */
end   /*ª*k*/
if cnt<=mxrun  then iterate              /*ª*This run too short? Then keep looking*/
mxrun= max(mxrun, cnt)                   /*ª*define a new maximum run (seq) length*/
seq.mxrun= cp  newV1.jn  run                 /*ª*full populate the sequence (RUN).    */
end   /*ª*j*/;                   return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP: newV1.1=2; newV1.2=3; newV1.3=5; newV1.4=7; newV1.5=11; newV1.6=13; newV1.7=17; newV1.8=19    /*ª*define low primes.*/
newV3=8;   sq.newV3= newV1.newV3 ** 2 /*ª*number of primes so far; prime sqiare*/
/*ª* [â†“]  generate more  primes  â‰îå÷Öµ  high.*/
do j=newV1.newV3+2  by 2  to hi;  parse var j '' -1 newV4    /*ª*find odd primes from here on.*/
if     newV4==5  then iterate;  if j// 3==0  then iterate   /*ª*J Ã·  5?    J Ã· by  3? */
if j// 7==0  then iterate;  if j//11==0  then iterate   /*ª*" "  7?    " "  " 11? */
if j//13==0  then iterate;  if j//17==0  then iterate   /*ª*" " 13?    " " "  17? */
do k=8  while sq.k<=j             /*ª* [â†“]  divide by the known odd primes.*/
if j // newV1.k == 0  then iterate j  /*ª*Is  J Ã· X?  Then not prime.     ___  */
end   /*ª*k*/                       /*ª* [â†‘]  only process numbers  â‰îå÷Öµ  âˆš J   */
newV3= newV3+1;             newV1.newV3= j;    sq.newV3= j*j /*ª*bump # of Ps; assign next P; P square*/
end          /*ª*j*/;            return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
show: parse arg newV2;  if newV2  then AorD= 'ascending'     /*ª*choose which literal for display.*/
else AorD= 'descending'    /*ª*   "     "      "     "     "    */
title= ' longest run of consecutive primes whose differences between primes are'  ,
'strictly'         AorD         "and  < "         commas(hi)
say;    say;    say
if cols>0  then say ' index â”‚'center(title,   1 + cols*(w+1)     )
if cols>0  then say 'â”€â”€â”€â”€â”€â”€â”€â”¼'center(""   ,   1 + cols*(w+1), 'â”€')
found= 0;                idx= 1            /*ª*initialize # of consecutive primes.  */
newV5=                                         /*ª*a list of consecutive primes (so far)*/
do o=1  for words(seq.mxrun)            /*ª*show all consecutive primes in seq.  */
c= commas( word(seq.mxrun, o) )         /*ª*obtain the next prime in the sequence*/
found= found + 1                        /*ª*bump the number of consecutive primes*/
if cols<=0            then iterate      /*ª*build the list  (to be shown later)? */
newV5= newV5  right(c, max(w, length(c) ) )     /*ª*add a nice prime â”€â”€â–º list, allow big#*/
if found//cols\==0    then iterate      /*ª*have we populated a line of output?  */
say center(idx, 7)'â”‚'  substr(newV5, 2)     /*ª*display what we have so far  (cols). */
idx= idx + cols;              newV5=        /*ª*bump the  index  count for the output*/
end   /*ª*o*/
if newV5\==''  then say center(idx, 7)"â”‚"  substr(newV5, 2)   /*ª*maybe show residual output*/
if cols>0  then say 'â”€â”€â”€â”€â”€â”€â”€â”´'center(""   ,   1 + cols*(w+1), 'â”€')
say;            say commas(Cprimes)  ' was the'title;        return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Consecutive-primes-with-ascending-or-descending-differences\consecutive-primes-with-ascending-or-descending-differences.rexx was migrated on 23 Mar 2025 at 10:43:09
 * -------------------------------------------------------------------------
*/ 
