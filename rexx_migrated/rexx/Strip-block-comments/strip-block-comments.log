-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:31
-------------------------------------------------------------------------
0001 /* REXX ***************************************************************
0002 * Split comments
0003 * This program ignores comment delimiters within literal strings
0004 * such as, e.g., in b = "--' O'Connor's widow --";
0005 * it does not (yet) take care of -- comments (ignore rest of line)
0006 * also it does not take care of say 667/*yuppers*/77 (REXX specialty)
0007 *   courtesy GS discussion!
0008 * 12.07.2013 Walter Pachl
0009 **********************************************************************/
0010 fid='in.txt'                           /* input text                 */
0011 oic='oc.txt'; 'erase' oic              /* will contain comments      */
0012 oip='op.txt'; 'erase' oip              /* will contain program parts */
0013 oim='om.txt'; 'erase' oim              /* oc.txt merged with op.txt  */
0014 cmt=0                                  /* comment nesting            */
0015 str=''                                 /* ' or " when in a string    */
0016 Do ri=1 By 1 While lines(fid)>0        /* loop over input            */
0017 l=linein(fid)                        /* an input line              */
0018 oc=''                                /* initialize line for oc.txt */
0019 op=''                                /* initialize line for op.txt */
0020 i=1                                  /* start at first character   */
0021 Do While i<=length(l)                /* loop through input line    */
0022 If cmt=0 Then Do                   /* we are not in a comment    */
0023 If str<>'' Then Do               /* we are in a string         */
0024 If substr(l,i,1)=str Then Do   /* string character           */
0025 If substr(l,i+1,1)=str Then Do /* another one              */
0026 Call app 'P',substr(l,i,2) /* add '' or "" to op         */
0027 i=i+2                      /* increase input pointer     */
0028 Iterate                    /* proceed in input line      */
0029 End
0030 Else Do                      /* end of literal string      */
0031 Call app 'P',substr(l,i,1) /* add ' or " to op           */
0032 str=' '                    /* no longer in string        */
0033 i=i+1                      /* increase input pointer     */
0034 Iterate                    /* proceed in input line      */
0035 End
0036 End
0037 End
0038 End
0039 Select
0040 When str='' &,                   /* not in a string            */
0041 substr(l,i,2)='/*' Then Do  /* start of comment           */
0042 cmt=cmt+1                      /* increase commenr nesting   */
0043 Call app 'C','/*'              /* copy to oc                 */
0044 i=i+2                          /* increase input pointer     */
0045 End
0046 When cmt=0 Then Do               /* not in a comment           */
0047 If str=' ' Then Do             /* not in a string            */
0048 If pos(substr(l,i,1),'''"')>0 Then /* string delimiter     */
0049 str=substr(l,i,1)          /* remember that              */
0050 End
0051 Call app 'P',substr(l,i,1)     /* copy to op                 */
0052 i=i+1                          /* increase input pointer     */
0053 End
0054 When substr(l,i,2)='*/' Then Do  /* end of comment             */
0055 cmt=cmt-1                      /* decrement nesting depth    */
0056 Call app 'C','*/'              /* copy to oc                 */
0057 i=i+2                          /* increase input pointer     */
0058 End
0059 Otherwise Do                     /* any other character        */
0060 Call app 'C',substr(l,i,1)     /* copy to oc                 */
0061 i=i+1                          /* increase input pointer     */
0062 End
0063 End
0064 End
0065 Call oc                              /* Write line oc              */
0066 Call op                              /* Write line op              */
0067 End
0068 Call lineout oic                       /* Close File oic             */
0069 Call lineout oip                       /* Close File oip             */
0070 
0071 Do ri=1 To ri-1                        /* merge program with comments*/
0072 op=linein(oip)
0073 oc=linein(oic)
0074 Do i=1 To length(oc)
0075 If substr(oc,i,1)<>'' Then
0076 op=overlay(substr(oc,i,1),op,i,1)
0077 End
0078 Call lineout oim,op
0079 End
0080 Call lineout oic
0081 Call lineout oip
0082 Call lineout oim
0083 Exit
0084 
0085 app: Parse Arg which,string
0086 /* add str to oc or op                                               */
0087 /* and corresponding blanks to the other (op or oc)                  */
0088 If which='C' Then Do
0089 oc=oc||string
0090 op=op||copies(' ',length(string))
0091 End
0092 Else Do
0093 op=op||string
0094 oc=oc||copies(' ',length(string))
0095 End
0096 Return
0097 
0098 oc: Return lineout(oic,oc)
0099 op: Return lineout(oip,op)
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 which            85
002 string           85
003 oc               89 94
004 op               90 93
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
