/*ª*REXX program enumerates all possible configurations (or an error) for nonogram puzzles*/
newV1.=;    newV1.1=  5   2 1
newV1.2=  5
newV1.3= 10   8
newV1.4= 15   2 3 2 3
newV1.5=  5   2 3
do  i=1  while newV1.i\==''
parse var  newV1.i   N  blocks                 /*ª*obtain  N  and  blocks   from array. */
N= strip(N);     blocks= space(blocks)     /*ª*assign stripped   N   and   blocks.  */
call nono                                  /*ª*incoke NONO subroutine for heavy work*/
end   /*ª*i*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
nono: say copies('=', 70)                                 /*ª*display seperator for title.*/
say 'For '   N   " cells  and blocks of: "   blocks /*ª*display the title for output*/
z=                                                  /*ª*assign starter value for Z. */
do w=1  for words(blocks)                       /*ª*process each of the blocks. */
z= z copies('#', word(blocks,w) )               /*ª*build a string for 1st value*/
end   /*ª*w*/                                     /*ª*Z  now has a leading blank. */
newV4= 1                                                /*ª*number of positions (so far)*/
z= translate( strip(z), ., ' ');   L= length(z)     /*ª*change blanks to periods.   */
if L>N  then do;   say '***error***  invalid blocks for number of cells.';   return
end
newV2.0=;           newV2.1= z;         newV3.=0       /*ª*assign default and the first position*/
z= pad(z)                                  /*ª*fillâ”€out (pad) the value with periods*/

do prepend=1  while words(blocks)\==0   /*ª*process all the positions (leading .)*/
new= . || newV2.prepend                     /*ª*create positions with leading dots.  */
if length(new)>N  then leave            /*ª*Length is too long?  Then stop adding*/
call add                                /*ª*add position that has a leading dot. */
end   /*ª*prepend*/                       /*ª* [â†‘]  prepend positions with dots.   */

do   k=1  for N                         /*ª*process each of the positions so far.*/
do c=1  for N                         /*ª*   "      "   "  "  position blocks. */
if newV2.c==''  then iterate              /*ª*if string is null,  skip the string. */
p= loc(newV2.c, k)                        /*ª*find location of block in position.  */
if p==0 | p>=N  then iterate          /*ª*Location zero or outâ”€ofâ”€range?  Skip.*/
new= strip( insert(., newV2.c, p),'T',.)  /*ª*insert a dot and strip trailing dots.*/
if strip(new,'T',.)=newV2.c  then iterate /*ª*Is it the same value?  Then skip it. */
if length(new)<=N  then call add      /*ª*Is length OK?   Then add position.   */
end   /*ª*k*/
end     /*ª*c*/
say
say 'â”€positionâ”€'  center("value", max(7, length(z) ), 'â”€')  /*ª*show hdr for output.*/

do m=1  for newV4
say center(m, 10)   pad(newV2.m)      /*ª*display the index count and position.*/
end   /*ª*m*/
return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
loc:  newV5=0; do arg(2); newV5=pos('#.',pad(arg(1)),newV5+1); if newV5==0  then return 0; end; return newV5+1
add:  if newV3.new==1  then return;  newV4= newV4 + 1;     newV2.newV4= new;    newV3.new=1;    return
pad:  return  left( arg(1), N, .)
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Nonoblock\nonoblock.rexx was migrated on 23 Mar 2025 at 10:43:22
 * -------------------------------------------------------------------------
*/ 
