-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:35
-------------------------------------------------------------------------
0001 /*REXX program finds and displays Wilson primes:  a prime   P   such that  P**2 divides:*/
0002 /*────────────────── (n-1)! * (P-n)!  -  (-1)**n   where  n  is 1 ──◄ 11,   and  P < 18.*/
0003 parse arg oLO oHI hip .                          /*obtain optional argument from the CL.*/
0004 if  oLO=='' |  oLO==","  then  oLO=      1       /*Not specified?  Then use the default.*/
0005 if  oHI=='' |  oHI==","  then  oHI=     11       /* "      "         "   "   "     "    */
0006 if  hip=='' |  hip==","  then  hip=  11000       /* "      "         "   "   "     "    */
0007 call genP                                        /*build array of semaphores for primes.*/
0008 !!.= .                                           /*define the  default  for factorials. */
0009 bignum= !(hip)                                   /*calculate a ginormous factorial prod.*/
0010 parse value bignum 'E0' with ex 'E' ex .         /*obtain possible exponent of factorial*/
0011 numeric digits (max(9, ex+2) )                   /*calculate max # of dec. digits needed*/
0012 call facts hip                                   /*go & calculate a number of factorials*/
0013 title= ' Wilson primes  P  of order '  oLO " ──► " oHI',  where  P < '  commas(hip)
0014 w= length(title) + 1                             /*width of columns of possible numbers.*/
0015 say ' order │'center(title, w     )
0016 say '───────┼'center(""   , w, '─')
0017 do n=oLO  to oHI;  nf= !(n-1)              /*precalculate a factorial product.    */
0018 z= -1**n                                   /*     "       " plus or minus (+1│-1).*/
0019 if n==1   then lim= 103                    /*limit to known primes for 1st order. */
0020 else lim=   #                    /*  "    "  all     "    "  orders ≥ 2.*/
0021 $=                                         /*$:  a line (output) of Wilson primes.*/
0022 do j=1  for lim;    p= @.j              /*search through some generated primes.*/
0023 if (nf*!(p-n)-z)//sq.j\==0 then iterate /*expression ~ q.j ?  No, then skip it.*/       /* ◄■■■■■■■ the filter.*/
0024 $= $  ' '  commas(p)                    /*add a commatized prime  ──►  $  list.*/
0025 end   /*p*/
0026 
0027 if $==''  then $= '        (none found within the range specified)'
0028 say center(n, 7)'│'  substr($, 2)          /*display what Wilson primes we found. */
0029 end   /*n*/
0030 say '───────┴'center(""   , w, '─')
0031 exit 0                                           /*stick a fork in it,  we're all done. */
0032 /*──────────────────────────────────────────────────────────────────────────────────────*/
0033 !:      arg x; if !!.x\==.  then return !!.x;  a=1;  do f=1  for x;   a=a*f; end; return a
0034 commas: parse arg ?;  do jc=length(?)-3  to 1  by -3; ?=insert(',', ?, jc); end;  return ?
0035 facts:  !!.= 1;   x= 1;  do  f=1  for hip;   x= x * f;   !!.f= x;           end;  return
0036 /*──────────────────────────────────────────────────────────────────────────────────────*/
0037 genP:        @.1=2; @.2=3; @.3=5; @.4=7;  @.5=11 /*define some low primes.              */
0038 !.=0;  !.2=1; !.3=1; !.5=1; !.7=1;  !.11=1 /*   "     "   "    "     semaphores.  */
0039 sq.1=4; sq.2=9; sq.3= 25; sq.4= 49; #= 5;  sq.#= @.#**2   /*squares of low primes.*/
0040 do j=@.#+2  by 2  for max(0, hip%2-@.#%2-1)     /*find odd primes from here on. */
0041 parse var  j   ''  -1  _;  if    _==5  then iterate    /*J ÷ 5?   (right digit).*/
0042 if j//3==0  then iterate;  if j//7==0  then iterate    /*" " 3?    Is J ÷ by 7? */
0043 do k=5  while sq.k<=j             /* [↓]  divide by the known odd primes.*/
0044 if j // @.k == 0  then iterate j  /*Is  J ÷ X?  Then not prime.     ___  */
0045 end   /*k*/                       /* [↑]  only process numbers  ≤  √ J   */
0046 #= #+1;    @.#= j;    sq.#= j*j;  !.j= 1 /*bump # of Ps; assign next P;  P²; P# */
0047 end          /*j*/;               return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 j                41
002 k                43
003 sq.              46
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 !!.              -> newV1.           8 35
002 @.               -> newV2.           37 37 37 37 46
003 !.               -> newV3.           38 38 38 38 38 38 46
004 $                -> newV4            21 24 27
005 ?                -> newV5            34 34
006 #                -> newV6            39 46
007 _                -> newV7            41
