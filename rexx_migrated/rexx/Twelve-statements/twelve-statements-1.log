-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:34
-------------------------------------------------------------------------
0001 /*REXX program solves the  "Twelve Statement Puzzle".                                   */
0002 q=12;      @stmt=right('statement',20)           /*number of statements in the puzzle.  */
0003 m=0                                              /*[↓]  statement one is  TRUE  by fiat.*/
0004 do pass=1  for 2                           /*find the maximum number of  "trues". */
0005 do e=0   for 2**(q-1);    n = '1'right( x2b( d2x( e ) ),  q-1,  0)
0006 do b=1  for q                      /*define various bits in the number  Q.*/
0007 @.b=substr(n, b, 1)                /*define a particular  @  bit  (in  Q).*/
0008 end   /*b*/
0009 if @.1  then if yeses(1,  1)                        \==1  then iterate
0010 if @.2  then if yeses(7, 12)                        \==3  then iterate
0011 if @.3  then if yeses(2, 12,2)                      \==2  then iterate
0012 if @.4  then if yeses(5,  5)   then  if yeses(6, 7) \==2  then iterate
0013 if @.5  then if yeses(2,  4)                        \==0  then iterate
0014 if @.6  then if yeses(1, 12,2)                      \==4  then iterate
0015 if @.7  then if yeses(2,  3)                        \==1  then iterate
0016 if @.8  then if yeses(7,  7)   then  if yeses(5,6)  \==2  then iterate
0017 if @.9  then if yeses(1,  6)                        \==3  then iterate
0018 if @.10 then if yeses(11,12)                        \==2  then iterate
0019 if @.11 then if yeses(7,  9)                        \==1  then iterate
0020 if @.12 then if yeses(1, 11)                        \==4  then iterate
0021 g=yeses(1, 12)
0022 if pass==1  then do;  m=max(m,g);  iterate;  end
0023 else if g\==m     then iterate
0024 do j=1  for q;             z=substr(n, j, 1)
0025 if z  then  say @stmt right(j, 2)    " is "    word('false true', 1 + z)
0026 end   /*tell*/
0027 end       /*e*/
0028 end         /*pass*/
0029 exit                                             /*stick a fork in it,  we're all done. */
0030 /*──────────────────────────────────────────────────────────────────────────────────────*/
0031 yeses: parse arg L,H,B;  #=0;    do i=L  to H  by word(B 1, 1);  #=#+@.i;  end;   return #
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 L                31
002 H                31
003 B                31
004 i                31
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @stmt            -> newV1            2
002 @.               -> newV2.           7
003 #                -> newV3            31 31
