-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:35
-------------------------------------------------------------------------
0001 /*REXX program shows how to support mathematical functions for vectors using functions. */
0002 s1 =     11                               /*define the  s1 scalar: eleven        */
0003 s2 =      2                               /*define the  s2 scalar: two           */
0004 x  = '(5, 7)'                             /*define the  X  vector: five and seven*/
0005 y  = '(2, 3)'                             /*define the  Y  vector: two  and three*/
0006 z  = '(2, 45)'                            /*define vector of length   2  at  45º */
0007 call show  'define a vector (length,ºangle):',     z                ,      Vdef(z)
0008 call show         'addition (vector+vector):',     x      " + "   y ,      Vadd(x, y)
0009 call show      'subtraction (vector-vector):',     x      " - "   y ,      vsub(x, y)
0010 call show   'multiplication (Vector*scalar):',     x      " * "   s1,      Vmul(x, s1)
0011 call show         'division (vector/scalar):',     x      " ÷ "   s2,      Vdiv(x, s2)
0012 exit                                             /*stick a fork in it,  we're all done. */
0013 /*──────────────────────────────────────────────────────────────────────────────────────*/
0014 $fuzz: return min( arg(1), max(1, digits() - arg(2) ) )
0015 cosD:  return cos( d2r( arg(1) ) )
0016 d2d:   return arg(1) // 360                      /*normalize degrees ──► a unit circle. */
0017 d2r:   return r2r( d2d(arg(1)) * pi() / 180)     /*convert degrees   ──►   radians.     */
0018 pi:    pi=3.14159265358979323846264338327950288419716939937510582;         return pi
0019 r2d:   return d2d( (arg(1)*180 / pi()))          /*convert radians   ──►   degrees.     */
0020 r2r:   return arg(1) // (pi() * 2)               /*normalize radians ──► a unit circle. */
0021 show:  say  right( arg(1), 33)   right( arg(2), 20)      ' ──► '      arg(3);       return
0022 sinD:  return  sin( d2r( d2d( arg(1) ) ) )
0023 V:     return  word( translate( arg(1), , '{[(JI)]}')  0,  1)   /*get the number or zero*/
0024 V$:    parse arg r,c;     _='['r;       if c\=0  then _=_"," c;               return _']'
0025 V#:    a=V(a); b=V(b); c=V(c); d=V(d);  ac=a*c; ad=a*d; bc=b*c; bd=b*d; s=c*c+d*d;  return
0026 Vadd:  procedure; arg a ',' b,c "," d;      call V#;       return V$(a+c,             b+d)
0027 Vsub:  procedure; arg a ',' b,c "," d;      call V#;       return V$(a-c,             b-d)
0028 Vmul:  procedure; arg a ',' b,c "," d;      call V#;       return V$(ac-bd,         bc+ad)
0029 Vdiv:  procedure; arg a ',' b,c "," d;      call V#;       return V$((ac+bd)/s, (bc-ad)/s)
0030 Vdef:  procedure; arg a ',' b,c "," d;      call V#;       return V$(a*sinD(b), a*cosD(b))
0031 /*──────────────────────────────────────────────────────────────────────────────────────*/
0032 cos: procedure; parse arg x;        x=r2r(x);       a=abs(x);    numeric fuzz $fuzz(9, 9)
0033 if a=pi             then return -1;
0034 if a=pi*.5 | a=pi*2 then return  0;                   return .sinCos(1,-1)
0035 /*──────────────────────────────────────────────────────────────────────────────────────*/
0036 sin: procedure; parse arg x;        x=r2r(x);                    numeric fuzz $fuzz(5, 3)
0037 if x=pi*.5          then return 1;  if x=pi*1.5  then return -1
0038 if abs(x)=pi | x=0  then return 0;                    return .sinCos(x,+1)
0039 /*──────────────────────────────────────────────────────────────────────────────────────*/
0040 .sinCos: parse arg z 1 _,i;          q=x*x
0041 do k=2  by 2  until p=z;  p=z;  _= -_*q / (k*(k+i));  z=z+_;  end;     return z
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 z                40 41
002 i                40
003 q                40
004 k                41
005 p                41
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _                -> newV1            24 24 40 41
