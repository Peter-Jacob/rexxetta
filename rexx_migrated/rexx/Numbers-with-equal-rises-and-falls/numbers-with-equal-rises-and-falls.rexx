/*ª*REXX pgm  finds and displays  N  numbers that have an equal number of rises and falls,*/
parse arg n .                                    /*ª*obtain optional argument from the CL.*/
if n=='' | n==","  then n= 200                   /*ª*Not specified?  Then use the default.*/
append= n>0                                      /*ª*a flag that is used to append numbers*/
n= abs(n)                                        /*ª*use the absolute value of  N.        */
call init                                        /*ª*initialize the  rise/fall  database. */
do j=1  until newV2==n                     /*ª*test integers until we have N of them*/
s= 0                                   /*ª*initialize the sum of  rises/falls.  */
do k=1  for length(j)-1  /*ª*obtain a set of two digs from number.*/
t= substr(j, k, 2)       /*ª*obtain a set of two digs from number.*/
s= s + newV1.t               /*ª*sum the rises and falls in the number*/
end   /*ª*k*/
if s\==0  then iterate                 /*ª*Equal # of rises & falls? Then add it*/
newV2= newV2 + 1                               /*ª*bump the count of numbers found.     */
if append  then newV3= newV3 j                 /*ª*append to the list of numbers found. */
end   /*ª*j*/

if append  then call show                        /*ª*display a list of  N  numbersâ”€â”€â–ºterm.*/
else say  'the '  commas(n)th(n)  " number is: "   commas(j)    /*ª*show Nth #.*/
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
commas:  parse arg newV4;  do c=length(newV4)-3  to 1  by -3; newV4=insert(',', newV4, c); end;   return newV4
th:      parse arg th;  return word('th st nd rd',1+(th//10)*(th//100%10\==1)*(th//10<4))
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
init: newV1.= 0;   do i=1  for 9;    newV4= i' ';     newV1.newV4= 1;    newV4= '0'i;   newV1.newV4= +1;   end  /*ª*i*/
do i=10  to 99;   parse var i  a 2 b;     if a>b  then              newV1.i= -1
else if a<b  then newV1.i= +1
end   /*ª*i*/;      newV2= 0;        newV3=;        return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
show: say 'the first '   commas(newV2)   " numbers are:";   say;       w= length( word(newV3, newV2) )
newV4=;    do o=1  for n;     newV4= newV4 right( word(newV3, o), w);    if o//20\==0  then iterate
say substr(newV4, 2);  newV4=               /*ª*display a line;  nullify a new line. */
end   /*ª*o*/                         /*ª* [â†‘]  display  20  numbers to a line.*/

if newV4\==''  then say substr(newV4, 2);   return /*ª*handle any residual numbers in list. */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Numbers-with-equal-rises-and-falls\numbers-with-equal-rises-and-falls.rexx was migrated on 23 Mar 2025 at 10:43:22
 * -------------------------------------------------------------------------
*/ 
