/*ª*REXX pgm finds 1st N cyclops (Î˜) #s,  Î˜ primes,  blind Î˜ primes,  palindromic Î˜ primes*/
parse arg n cols .                               /*ª*obtain optional argument from the CL.*/
if    n=='' |    n==","  then    n=   50         /*ª*Not specified?  Then use the default.*/
if cols=='' | cols==","  then cols=   10         /*ª* "      "         "   "   "     "    */
call genP                                        /*ª*build array of semaphores for primes.*/
w= max(10, length( commas(newV1.newV5) ) )               /*ª*max width of a number in any column. */
prinewV3= 0; blinewV3= 0; palnewV3= 0; call 0 ' first ' commas(n)                   " cyclops numbers"
prinewV3= 1; blinewV3= 0; palnewV3= 0; call 0 ' first ' commas(n)             " prime cyclops numbers"
prinewV3= 1; blinewV3= 1; palnewV3= 0; call 0 ' first ' commas(n)       " blind prime cyclops numbers"
prinewV3= 1; blinewV3= 0; palnewV3= 1; call 0 ' first ' commas(n) " palindromic prime cyclops numbers"
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
commas: parse arg newV3;  do jc=length(newV3)-3  to 1  by -3; newV3=insert(',', newV3, jc); end;  return newV3
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
0: parse arg title;                idx= 1        /*ª*get the title of this output section.*/
say ' index â”‚'center(title,   1 + cols*(w+1)     )      /*ª*display the output title.  */
say 'â”€â”€â”€â”€â”€â”€â”€â”¼'center(""   ,   1 + cols*(w+1), 'â”€')      /*ª*   "     "     "  separator*/
finds= 0;                 newV4=  /*ª*the number of finds (so far); $ list.*/
do j=0  until finds== n;      L= length(j)  /*ª*find N cyclops numbers, start at 101.*/
if L//2==0  then do;    j= left(1, L+1, 0)  /*ª*Is J an even # of digits? Yes, bump J*/
iterate  /*ª*use a new J that has odd # of digits.*/
end
z= pos(0, j);  if z\==(L+1)%2 then iterate  /*ª* "  "    "    " (zero in mid)?    "  */
if pos(0, j, z+1)>0           then iterate  /*ª* "  "    "    " (has two 0's)?    "  */
if prinewV3  then if \newV2.j         then iterate  /*ª*Need a cyclops prime?      Then skip.*/
if blinewV3  then do;   newV3= space(translate(j, , 0), 0)   /*ª*Need a blind cyclops prime ?*/
if \newV2.newV3   then iterate  /*ª*Not a blind cyclops prime? Then skip.*/
end
if palnewV3  then do;   r= reverse(j)           /*ª*Need a palindromic cyclops prime?    */
if r\==j  then iterate  /*ª*Cyclops number not palindromic? Skip.*/
if \newV2.r   then iterate  /*ª*   "    palindrome not prime?     "  */
end
finds= finds + 1                            /*ª*bump the number of palindromic primes*/
newV4= newV4 right( commas(j), w)                   /*ª*add a palindromic prime â”€â”€â–º  $  list.*/
if finds//cols\==0            then iterate  /*ª*have we populated a line of output?  */
say center(idx, 7)'â”‚'  substr(newV4, 2);    newV4=  /*ª*display what we have so far  (cols). */
idx= idx + cols                             /*ª*bump the  index  count for the output*/
end   /*ª*j*/
if newV4\==''  then say center(idx, 7)"â”‚"  substr(newV4, 2)  /*ª*possible show residual output.*/
say 'â”€â”€â”€â”€â”€â”€â”€â”´'center(""  ,   1 + cols*(w+1), 'â”€');  say
return
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP: newV2.= 0;  hip= 7890987 - 1                   /*ª*placeholders for primes (semaphores).*/
newV1.1=2; newV1.2=3; newV1.3=5; newV1.4=7; newV1.5=11; newV1.6=13 /*ª*define some low primes.              */
newV2.2=1; newV2.3=1; newV2.5=1; newV2.7=1; newV2.11=1; newV2.13=1 /*ª*   "     "   "    "     flags.       */
newV5= 6;     sq.newV5= newV1.newV5 ** 2 /*ª*number of primes so far; prime square*/
do j=newV1.newV5+2  by 2  for max(0, hip%2-newV1.newV5%2-1)     /*ª*find odd primes from here on. */
parse var   j   ''  -1  newV6                       /*ª*get the last dec. digit of  J.*/
if     newV6==5  then iterate;  if j// 3==0  then iterate  /*ª*Ã· by 5?  Ã· by 3?  Skip.*/
if j// 7==0  then iterate;  if j//11==0  then iterate  /*ª*Ã·  " 7?  Ã· by 11?   "  */
do k=6  while sq.k<=j             /*ª* [â†“]  divide by the known odd primes.*/
if j // newV1.k == 0  then iterate j  /*ª*Is  J Ã· X?  Then not prime.     ___  */
end   /*ª*k*/                       /*ª* [â†‘]  only process numbers  â‰îå÷Ö´  âˆš J   */
newV5= newV5+1;    newV1.newV5= j;   sq.newV5= j*j;   newV2.j= 1 /*ª*bump # Ps;  assign next P;  P sq; P# */
end          /*ª*j*/;               return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Cyclops-numbers\cyclops-numbers.rexx was migrated on 23 Mar 2025 at 10:43:10
 * -------------------------------------------------------------------------
*/ 
