/*ª*REXX program computes some  primorial numbers  for low numbers,  and for various 10^n.*/
parse arg N H .                                  /*ª*get optional arguments:  N,  L,  H   */
if N=='' | N==','  then N=     10                /*ª*Not specified?  Then use the default.*/
if H=='' | H==','  then H= 100000                /*ª* "      "         "   "   "     "    */
numeric digits 600000                            /*ª*be able to handle gihugic numbers.   */
w= length( commas( digits() ) )                  /*ª*W:  width of the largest commatized #*/
newV1.=.; newV1.0= 1;  newV1.1= 2;  newV1.2= 3;  newV1.3=  5; newV1.4=  7; newV1.5=  11; newV1.6=  13 /*ª*some low primes.*/
s.1= 4;  s.2= 9;  s.3= 25; s.4= 49; s.5= 121; s.6= 169 /*ª*squared primes. */
newV2= 6                                                                  /*ª*number of primes*/
do j=0  for N                               /*ª*calculate the first  N  primorial #s.*/
say right(j, length(N))th(j)   " primorial is: "    right(commas(primorial(j) ), N+2)
end   /*ª*j*/
say
iw= length( commas(H) ) + 2                      /*ª*IW: width of largest commatized index*/
p= 1                                             /*ª*initialize the first multiplier for P*/
do k=1  for H                               /*ª*process a large range of numbers.    */
p= p * prime(k)                             /*ª*calculate the next primorial number. */
parse var  k   L  2  ''  -1  R              /*ª*get the left and rightmost dec digits*/
if R\==0              then iterate          /*ª*if rightâ”€most decimal digit\==0, skip*/
if L\==1              then iterate          /*ª* "  leftâ”€most    "      "  \==1,   " */
if strip(k, , 0)\==1  then iterate          /*ª*Not a power of 10?  Then skip this K.*/
say right( commas(k), iw)th(k)     ' primorial number length in decimal digits is:' ,
right( commas( length(p) ), w)
end   /*ª*k*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
commas:  parse arg newV3;  do newV4=length(newV3)-3  to 1  by -3; newV3=insert(',', newV3, newV4); end;   return newV3
th:      parse arg th; return word('th st nd rd', 1+ (th//10)*(th//100%10\==1)*(th//10<4))
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
primorial: procedure expose newV1. s. newV2;  parse arg y;    newV5= 1         /*ª*obtain the arg  Y. */
do p=0  to y;   newV5= newV5 * prime(p)                     /*ª*calculate product. */
end   /*ª*p*/;                           return newV5     /*ª*return with the #. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
prime: procedure expose newV1. s. newV2; parse arg n;  if newV1.n\==.  then return newV1.n
numeric digits 9                                             /*ª*limit digs to min.*/
do j=newV1.newV2+2  by 2                                           /*ª*start looking at #*/
if j//2==0  then iterate;     if j//3==0    then iterate   /*ª*divisible by 2â”‚3 ?*/
parse var  j   ''  -1  newV3;     if newV3==5       then iterate   /*ª*rightâ”€most digâ‰îå÷Öµ5? */
if j//7==0  then iterate;     if j//11==0   then iterate   /*ª*divisible by 7â”‚11?*/
do k=6  while s.k<=j;     if j//newV1.k==0  then iterate j /*ª*divide by primes. */
end   /*ª*k*/
newV2= newV2 + 1;         newV1.newV2= j;     s.newV2= j * j;        return j  /*ª*next prime; return*/
end     /*ª*j*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Primorial-numbers\primorial-numbers.rexx was migrated on 23 Mar 2025 at 10:43:25
 * -------------------------------------------------------------------------
*/ 
