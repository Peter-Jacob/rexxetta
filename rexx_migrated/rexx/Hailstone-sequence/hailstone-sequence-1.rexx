/*ª*REXX program tests a  number  and also a  range for  hailstone  (Collatz)  sequences. */
numeric digits 20                                /*ª*be able to handle gihugeic numbers.  */
parse arg x y .                                  /*ª*get optional arguments from the C.L. */
if x=='' | x==","   then x=     27               /*ª*No  1st  argument?  Then use default.*/
if y=='' | y==","   then y= 100000 - 1           /*ª* "  2nd      "        "   "     "    */
newV2= hailstone(x)     /*ª*â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’task 1â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’*/
say  x   ' has a hailstone sequence of '      words(newV2)
say      '    and starts with: '              subword(newV2, 1, 4)    " âˆ™âˆ™âˆ™"
say      '    and  ends  with:  âˆ™âˆ™âˆ™'          subword(newV2, max(5, words(newV2)-3))
if y==0  then exit  /*ª*â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’task 2â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’*/
say
w= 0;         do j=1  for y;  call hailstone j   /*ª*traipse through the range of numbers.*/
if newV1<=w  then iterate            /*ª*Not big 'nuff?   Then keep traipsing.*/
bigJ= j;   w= newV1                  /*ª*remember what # has biggest hailstone*/
end   /*ª*j*/
say '(between 1 â”€â”€â–º'   y") "       bigJ      ' has the longest hailstone sequence: '   w
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
hailstone: procedure expose newV1; parse arg n 1 s /*ª*N and S: are set to the 1st argument.*/
do newV1=1   while  n\==1     /*ª*keep loop while   N   isn't  unity.  */
if n//2  then n= n * 3  + 1 /*ª*N is odd ?   Then calculate  3*n + 1 */
else n= n % 2      /*ª*"  " even?   Then calculate  fast Ã·  */
s= s n                      /*ª* [â†‘]  %   is REXX integer division.  */
end   /*ª*#hs*/               /*ª* [â†‘]  append  N  to the sequence list*/
return s                              /*ª*return the  S  string to the invoker.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Hailstone-sequence\hailstone-sequence-1.rexx was migrated on 23 Mar 2025 at 10:43:15
 * -------------------------------------------------------------------------
*/ 
