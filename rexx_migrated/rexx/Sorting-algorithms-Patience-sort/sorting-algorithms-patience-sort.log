-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:30
-------------------------------------------------------------------------
0001 /*REXX program sorts a list of things (or items) using the  patience sort  algorithm.   */
0002 parse arg xxx;     say ' input: '      xxx       /*obtain a list of things from the C.L.*/
0003 n= words(xxx);     #= 0;       !.= 1             /*N:  # of things;  #:  number of piles*/
0004 @.=                                              /* [↓]  append or create a pile  (@.j) */
0005 do i=1  for n;              q= word(xxx, i)   /* [↓]  construct the piles of things. */
0006 do j=1  for #                    /*add the   Q   thing (item) to a pile.*/
0007 if q>word(@.j,1)  then iterate   /*Is this item greater?   Then skip it.*/
0008 @.j= q  @.j;           iterate i /*add this item to the top of the pile.*/
0009 end   /*j*/                      /* [↑]  find a pile, or make a new pile*/
0010 #= # + 1                                      /*increase the pile count.             */
0011 @.#= q                                        /*define a new pile.                   */
0012 end                /*i*/                      /*we are done with creating the piles. */
0013 $=                                               /* [↓]   build a thingy list from piles*/
0014 do k=1  until  words($)==n                    /*pick off the smallest from the piles.*/
0015 _=                                            /*this is the smallest thingy so far···*/
0016 do m=1  for  #;     z= word(@.m, !.m)  /*traipse through many piles of items. */
0017 if z==''  then iterate                 /*Is this pile null?    Then skip pile.*/
0018 if _==''  then _= z                    /*assume this one is the low pile value*/
0019 if _>=z   then do;  _= z;  p= m;  end  /*found a low value in a pile of items.*/
0020 end   /*m*/                            /*the traipsing is done, we found a low*/
0021 $= $ _                                        /*add to the output thingy  ($)  list. */
0022 !.p= !.p + 1                                  /*bump the thingy pointer in pile  P.  */
0023 end          /*k*/                            /* [↑]  each iteration finds a low item*/
0024 /* [↓]  string  $  has a leading blank.*/
0025 say 'output: '       strip($)                    /*stick a fork in it,  we're all done. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 xxx              2
002 n                3
003 i                5
004 q                5
005 j                6
006 k                14
007 m                16
008 z                16
009 p                19
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 !.               -> newV1.           3 22
002 @.               -> newV2.           4 8 11
003 #                -> newV3            3 10
004 $                -> newV4            13 21
005 _                -> newV5            15 18 19
