/*ª*REXX program counts the number of ways to make change with coins from an given amount.*/
numeric digits 20                                /*ª*be able to handle large amounts of $.*/
parse arg N newV3                                    /*ª*obtain optional arguments from the CL*/
if N='' | N=","    then N= 100                   /*ª*Not specified?  Then Use $1  (â‰¡100Â¢).*/
if newV3='' | newV3=","    then newV3= 1 5 10 25             /*ª*Use penny/nickel/dime/quarter default*/
if left(N,1)=='$'  then N= 100 * substr(N, 2)    /*ª*the amount was specified in  dollars.*/
NN= N;                     coins= words(newV3)       /*ª*the number of coins specified.       */
newV1.= .;        do j=1  for coins                  /*ª*create a fast way of accessing specie*/
newV4= word(newV3, j);    newV5= newV4 ' coin'     /*ª*define an array element for the coin.*/
if newV4=='Â½' | newV4=="1/2"   then newV4= .5  /*ª*an alternate spelling of a halfâ”€cent.*/
if newV4=='Â¼' | newV4=="1/4"   then newV4= .25 /*ª* "     "         "     " " quarterâ”€Â¢.*/
newV2.j= newV4                             /*ª*assign the value to a particular coin*/
end   /*ª*j*/
newV4= n // 100;                    cnt=' cents'     /*ª* [â†“]  is the amount in whole dollars?*/
if newV4=0  then do;   NN= '$'  ||  (NN%100);  cnt=  /*ª*show the amount in dollars, not cents*/
end
say 'with an amount of '      comma(NN)cnt",  there are "         comma( MKchg(N, coins) )
say 'ways to make change with coins of the following denominations: '    newV3
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
comma: procedure; parse arg newV4;     n= newV4'.9';      newV6= 123456789;      b= verify(n, newV6, "M")
e= verify(n, newV6'0', , verify(n, newV6"0.", 'M'))  -  4
do j=e  to b  by -3;   newV4= insert(',', newV4, j);    end  /*ª*j*/;          return newV4
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
MKchg: procedure expose newV2. newV1.;           parse arg a,k       /*ª*function is recursive.   */
if newV1.a.k\==.  then return newV1.a.k                       /*ª*found this A & K before? */
if a==0       then return 1                           /*ª*unroll for a special case*/
if k==1       then return 1                           /*ª*   "    "  "    "      " */
if k==2  then f= 1                                    /*ª*handle this special case.*/
else f= MKchg(a, k-1)                        /*ª*count, recurse the amount*/
if a==newV2.k  then do;  newV1.a.k= f+1;  return newV1.a.k;  end  /*ª*handle this special case.*/
if a <newV2.k  then do;  newV1.a.k= f  ;  return f    ;  end  /*ª*   "     "     "      "  */
newV1.a.k= f + MKchg(a-newV2.k, k);       return newV1.a.k        /*ª*compute, define, return. */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Count-the-coins\count-the-coins-2.rexx was migrated on 23 Mar 2025 at 10:43:09
 * -------------------------------------------------------------------------
*/ 
