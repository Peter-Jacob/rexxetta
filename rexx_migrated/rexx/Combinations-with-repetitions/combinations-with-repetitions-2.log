-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:08
-------------------------------------------------------------------------
0001 /*REXX compute (and show) combination sets for nt things in ns places*/
0002 debug=0
0003 Call time 'R'
0004 Call RcombN 3,2,'iced,jam,plain'  /* The 1st part of the task      */
0005 Call RcombN -10,3,'iced,jam,plain,d,e,f,g,h,i,j' /* 2nd part       */
0006 Call RcombN -10,9,'iced,jam,plain,d,e,f,g,h,i,j' /* extra part     */
0007 Say time('E') 'seconds'
0008 Exit
0009 /*-------------------------------------------------------------------*/
0010 Rcombn: Procedure Expose thing. debug
0011 Parse Arg nt,ns,thinglist
0012 tell=nt>0
0013 nt=abs(nt)
0014 Say '------------' nt 'doughnut selection taken' ns 'at a time:'
0015 If tell=0 Then
0016 Say ' list output suppressed'
0017 Do i=1 By 1 While thinglist>''
0018 Parse Var thinglist thing.i ',' thinglist /* assign things.      */
0019 End
0020 index.=1
0021 Do cmb=1 By 1
0022 If tell Then                    /* display combinations          */
0023 Call show                     /* show this one                 */
0024 index.ns=index.ns+1
0025 Call show_index 'A'
0026 If index.ns==nt+1 Then
0027 If proc(ns-1) Then
0028 Leave
0029 End
0030 Say '------------' cmb 'combinations.'
0031 Say
0032 Return
0033 /*-------------------------------------------------------------------*/
0034 proc: Procedure Expose nt ns thing. index. debug
0035 Parse Arg recnt
0036 If recnt>0 Then Do
0037 p=index.recnt+1
0038 If p=nt+1 Then
0039 Return proc(recnt-1)
0040 Do i=recnt To ns
0041 index.i=p
0042 End
0043 Call show_index 'C'
0044 End
0045 Return recnt=0
0046 /*-------------------------------------------------------------------*/
0047 show: Procedure Expose index. thing. ns debug
0048 l=''
0049 Call show_index 'B----------------------->'
0050 Do i=1 To ns
0051 j=index.i
0052 l=l thing.j
0053 End
0054 Say l
0055 Return
0056 
0057 show_index: Procedure Expose index. ns debug
0058 If debug Then Do
0059 Parse Arg tag
0060 l=tag
0061 Do i=1 To ns
0062 l=l index.i
0063 End
0064 Say l
0065 End
0066 Return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 tag              59
002 l                60 62
003 i                61
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
