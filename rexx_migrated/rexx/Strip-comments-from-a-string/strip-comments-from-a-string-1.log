-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:31
-------------------------------------------------------------------------
0001 /*REXX program  strips  a string  delineated  by a  hash (#)   or   a  semicolon (;).   */
0002 old1= ' apples, pears # and bananas'      ;      say '                 old ───►'old1"◄───"
0003 new1= stripCom1(old1)                     ;      say '     1st version new ───►'new1"◄───"
0004 new2= stripCom2(old1)                     ;      say '     2nd version new ───►'new2"◄───"
0005 new3= stripCom3(old1)                     ;      say '     3rd version new ───►'new3"◄───"
0006 new4= stripCom4(old1)                     ;      say '     4th version new ───►'new4"◄───"
0007 say  copies('▒', 62)
0008 old2= ' apples, pears ; and bananas'      ;      say '                 old ───►'old2"◄───"
0009 new1= stripCom1(old2)                     ;      say '     1st version new ───►'new1"◄───"
0010 new2= stripCom2(old2)                     ;      say '     2nd version new ───►'new2"◄───"
0011 new3= stripCom3(old2)                     ;      say '     3rd version new ───►'new3"◄───"
0012 new4= stripCom4(old2)                     ;      say '     4th version new ───►'new4"◄───"
0013 exit                                             /*stick a fork in it,  we're all done. */
0014 /*──────────────────────────────────────────────────────────────────────────────────────*/
0015 stripCom1: procedure;   parse arg x              /*obtain the argument (the  X  string).*/
0016 x=translate(x, '#', ";")              /*translate semicolons to a hash (#).  */
0017 parse  var  x    x  '#'               /*parse the X string,  ending in hash. */
0018 return strip(x)                       /*return the stripped shortened string.*/
0019 /*──────────────────────────────────────────────────────────────────────────────────────*/
0020 stripCom2: procedure;   parse arg x              /*obtain the argument (the  X  string).*/
0021 d= ';#'                               /*this is the delimiter list to be used*/
0022 d1=left(d,1)                          /*get the first character in delimiter.*/
0023 x=translate(x,copies(d1,length(d)),d) /*translates delimiters ──►  1st delim.*/
0024 parse  var  x    x  (d1)              /*parse the string,  ending in a hash. */
0025 return strip(x)                       /*return the stripped shortened string.*/
0026 /*──────────────────────────────────────────────────────────────────────────────────────*/
0027 stripCom3: procedure;   parse arg x              /*obtain the argument (the  X  string).*/
0028 d= ';#'                               /*this is the delimiter list to be used*/
0029 do j=1  for length(d) /*process each of the delimiters singly*/
0030 _=substr(d,j,1)       /*use only one delimiter at a time.    */
0031 parse  var  x  x  (_) /*parse the  X  string for each delim. */
0032 end   /*j*/           /* [↑]    (_)  means stop parsing at _ */
0033 return strip(x)                       /*return the stripped shortened string.*/
0034 /*──────────────────────────────────────────────────────────────────────────────────────*/
0035 stripCom4: procedure;   parse arg x              /*obtain the argument (the  X  string).*/
0036 d= ';#'                               /*this is the delimiter list to be used*/
0037 do k=1  for length(d)        /*process each of the delimiters singly*/
0038 p=pos(substr(d,k,1), x)      /*see if a delimiter is in the X string*/
0039 if p\==0  then x=left(x,p-1) /*shorten the X string by one character*/
0040 end   /*k*/                  /* [↑]  If p==0, then char wasn't found*/
0041 return strip(x)                       /*return the stripped shortened string.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                35 39
002 d                36
003 k                37
004 p                38
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 (d1)             -> newV1            24
002 (_)              -> newV2            31
003 _                -> newV3            30
