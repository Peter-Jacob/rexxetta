-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:06
-------------------------------------------------------------------------
0001 /*REXX program  computes  the   mean angle   for a  group of angles  (expressed in degrees). */
0002 call pi                                          /*define the value of  pi  to some accuracy.*/
0003 numeric digits length(pi) - 1;                   /*use PI width  decimal digits of precision,*/
0004 showDig= 10                              /*only display  ten  decimal digits.        */
0005 #= 350 10         ;   say show(#, meanAngleD(#)) /*display mean angle (in degrees), 1st case.*/
0006 #= 90 180 270 360 ;   say show(#, meanAngleD(#)) /*   "      "    "     "    "      2nd   "  */
0007 #= 10 20 30       ;   say show(#, meanAngleD(#)) /*   "      "    "     "    "      3rd   "  */
0008 exit                                             /*stick a fork in it, we're all done with it*/
0009 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0010 .sinCos: arg z,_,i; x=x*x;  do k=2 by 2 until p=z; p=z; _=-_*x/(k*(k+i)); z=z+_; end;  return z
0011 $fuzz:  return  min(arg(1), max(1, digits() - arg(2) ) )
0012 Acos:   procedure; parse arg x;        return pi() * .5 - Asin(x)
0013 Atan:   parse arg x; if abs(x)=1  then return pi()*.25 * sign(x);  return Asin(x/sqrt(1 + x*x))
0014 d2d:    return arg(1)           //  360
0015 d2r:    return r2r(d2d(arg(1))  /   180   * pi() )
0016 r2d:    return d2d((r2r(arg(1)) /   pi()) * 180)
0017 r2r:    return arg(1)           // (pi()  *   2)
0018 pi: pi=3.1415926535897932384626433832795028841971693993751058209749445923078164062862;return pi
0019 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0020 Asin:   procedure;  parse arg x 1 z 1 o 1 p;          a= abs(x);                aa= a * a
0021 if a>1  then call AsinErr x                            /*argument X  is out of range.*/
0022 if a >= sqrt(2) * .5  then  return sign(x) * acos( sqrt(1 - aa),  '-ASIN')
0023 do j=2  by 2  until p=z;  p= z;  o= o * aa * (j-1) / j;   z= z +o / (j+1);   end
0024 return  z                                              /* [↑]  compute until no noise*/
0025 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0026 Atan2:  procedure; parse arg y,x;                     call pi;        s= sign(y)
0027 select
0028 when x=0  then  z= s * pi * .5
0029 when x<0  then  if  y=0  then z= pi;  else z= s * (pi - abs( Atan(y/x) ) )
0030 otherwise       z= s * Atan(y / x)
0031 end   /*select*/;                           return z
0032 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0033 cos:    procedure; parse arg x;      x= r2r(x);       numeric fuzz  $fuzz(6, 3)
0034 a= abs(x);      if a=0  then return   1;      if a=pi    then return -1
0035 if a=pi*.5 | a= pi*1.5  then return   0;      if a=pi/3  then return .5
0036 if a= pi*2/3  then return -.5;                      return .sinCos(1, 1, -1)
0037 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0038 meanAngleD: procedure;  parse arg x;                  numeric digits digits() + digits() % 4
0039 n= words(x);                              _sin= 0;              _cos= 0
0040 do j=1  for n;  != d2r( word(x, j));   _sin= _sin + sin(!);  _cos= _cos + cos(!)
0041 end   /*j*/
0042 return  r2d( Atan2( _sin/n, _cos/n) )
0043 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0044 show:   parse arg a,mA;                               _= format(ma, , showDig, 0) / 1
0045 return left('angles='a, 30)   "mean angle="   right(_, max(4, length(_) ) )
0046 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0047 sin:    procedure; parse arg x;   x= r2r(x);          numeric fuzz  $fuzz(5, 3)
0048 if x=pi * .5         then return 1;           if x==pi * 1.5  then return -1
0049 if abs(x)=pi | x=0   then return 0;           return .sinCos(x, x, +1)
0050 /*───────────────────────────────────────────────────────────────────────────────────────────*/
0051 sqrt:   procedure; parse arg x; if x=0  then return 0;  d=digits();  m.=9; numeric form; h= d+6
0052 numeric digits;  parse value format(x,2,1,,0) 'E0'  with  g "E" _ .;  g= g * .5'e'_ % 2
0053 do j=0  while h>9;       m.j= h;               h= h % 2  +  1;     end  /*j*/
0054 do k=j+5  to 0  by -1;   numeric digits m.k;   g= (g + x/g) * .5;  end  /*k*/
0055 return g
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                51
002 d                51
003 m.               51 53
004 h                51 53
005 a                20
006 aa               20
007 j                23 53
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 NORMAL.17        
018 NORMAL.18        
019 NORMAL.19        
020 NORMAL.20        
021 NORMAL.21        
022 NORMAL.22        
023 g                52 52 54
024 k                54
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _sin             -> newV1            39 40
002 _cos             -> newV2            39 40
003 #                -> newV3            5 6 7
004 _                -> newV4            10 44 52
005 !                -> newV5            40
