-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:15
-------------------------------------------------------------------------
0001 /*REXX program solves   Ax=b   with Gaussian elimination  and  backwards  substitution. */
0002 numeric digits 1000                              /*heavy─duty decimal digits precision. */
0003 parse arg iFID .                                 /*obtain optional argument from the CL.*/
0004 if iFID=='' | iFID=="," then iFID= 'GAUSS_E.DAT' /*Not specified?  Then use the default.*/
0005 pad= left('', 23)                                /*used for indenting residual numbers. */
0006 do rec=1    while lines(iFID) \== 0         /*read the equation sets.              */
0007 #=0                                         /*the number of equations  (so far).   */
0008 do $=1  while lines(iFID) \== 0         /*process the equation.                */
0009 z= linein(iFID);   if z=''  then leave  /*Is this a blank line?    end─of─data.*/
0010 if $==1  then do;  say;     say center(' equations ', 75, "▓");        say
0011 end                       /* [↑]  if 1st equation, then show hdr.*/
0012 say z                                   /*display an equation to the terminal. */
0013 if left(space(z), 1)=='*'  then iterate /*Is this a comment?    Then ignore it.*/
0014 #= # + 1;     n= words(z) - 1           /*assign equation #; calculate # items.*/
0015 do e=1  for n;     a.#.e= word(z, e);     oa.#.e= a.#.e
0016 end   /*e*/                           /* [↑]  process  A  numbers; save orig.*/
0017 b.#= word(z, n+1);   ob.#=b.#           /* ◄───    "     B     "       "    "  */
0018 end     /*$*/
0019 if #\==0  then call Gauss_elim              /*Not zero?  Then display the results. */
0020 say
0021 do   i=1  for n;  r=0                   /*display the residuals to the terminal*/
0022 do j=1  for n;  r=r  +  oa.i.j * x.j  /* ┌───◄  don't display a fraction  if */
0023 end   /*j*/                           /* ↓      res ≤ 5% of significant digs.*/
0024 r= format(r-ob.i, , digits() - digits() * 0.05 % 1 ,  0) / 1   /*should be tiny*/
0025 say pad 'residual['right(i, length(n) )"] = " left('', r>=0) r /*right justify.*/
0026 end     /*i*/
0027 end         /*rec*/
0028 exit                                             /*stick a fork in it,  we're all done. */
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 Gauss_elim: say;              do     j=1  for n;   jp= j + 1
0031 do   i=jp  to n;   _= a.j.j / a.i.j
0032 do k=jp  to n;   a.i.k= a.j.k   -   _ * a.i.k
0033 end   /*k*/
0034 b.i= b.j   -   _ * b.i
0035 end     /*i*/
0036 end       /*j*/
0037 x.n= b.n / a.n.n
0038 do   j=n-1  to 1  by -1;   _= 0
0039 do i=j+1  to n;          _= _   +   a.j.i * x.i
0040 end     /*i*/
0041 x.j= (b.j - _) / a.j.j
0042 end       /*j*/    /* [↑]  uses backwards substitution.   */
0043 numeric digits                       /*for the display,  only use 8 digits. */
0044 say center('solution', 75, "═"); say /*a title line for articulated output. */
0045 do o=1  for n;   say right('x['o"] = ", 38)   left('', x.o>=0)    x.o/1
0046 end   /*o*/
0047 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 pad              5
002 rec              6
003 z                9
004 n                14
005 e                15
006 a.               15 32
007 oa.              15
008 b.               17 34
009 ob.              17
010 i                21 31 39
011 r                21 22 24
012 j                22 30 38
013 jp               30
014 k                32
015 x.               37 41
016 o                45
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #                -> newV1            7 14
002 $                -> newV2            8
003 _                -> newV3            31 38 39
