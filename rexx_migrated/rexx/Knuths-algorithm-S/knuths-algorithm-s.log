-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:18
-------------------------------------------------------------------------
0001 /*REXX program  using  Knuth's  algorithm  S  (a random sampling   N   of   M   items). */
0002 parse arg trials size .                          /*obtain optional arguments from the CL*/
0003 if trials=='' | trials==","  then trials= 100000 /*Not specified?  Then use the default.*/
0004 if   size=='' |   size==","  then   size=      3 /* "      "         "   "   "     "    */
0005 #.= 0                                            /*initialize frequency counter array.  */
0006 do trials                                  /*OK,  now let's light this candle.    */
0007 call s_of_n_creator    size                /*create an initial list of  N  items. */
0008 
0009 do gen=0  for 10;  call s_of_n gen     /*call s_of_n with a single decimal dig*/
0010 end   /*gen*/
0011 /* [↓]  examine what  SofN  generated. */
0012 do count=1  for size;     _= !.count   /*get a dec. digit from the  Nth item. */
0013 #._= #._ + 1                           /*bump counter for the decimal digit.  */
0014 end   /*count*/
0015 end       /*trials*/
0016 @= ' trials, and with a size of '
0017 hdr= "  Using Knuth's algorithm  S  for "  commas(trials)  @ || commas(size)":  "
0018 say hdr;         say copies("═", length(hdr) )   /*display the header and its separator.*/
0019 
0020 do dig=0  to 9                           /* [↓]  display the frequency of a dig.*/
0021 say right("frequency of the", 37)       dig       'digit is: '      commas(#.dig)
0022 end   /*dig*/
0023 exit                                             /*stick a fork in it,  we're all done. */
0024 /*──────────────────────────────────────────────────────────────────────────────────────*/
0025 commas: parse arg _;  do jc=length(_)-3  to 1  by -3; _=insert(',', _, jc); end;  return _
0026 /*──────────────────────────────────────────────────────────────────────────────────────*/
0027 s_of_n: parse arg item;         items= items + 1 /*get  "item",  bump the items counter.*/
0028 if random(1, items)>size  then return    /*probability isn't good,  so skip it. */
0029 _= random(1, size);       !._= item      /*now, figure out which previous ···   */
0030 return                                   /*      ··· item to replace with  ITEM.*/
0031 /*──────────────────────────────────────────────────────────────────────────────────────*/
0032 s_of_n_creator: parse arg item 1 items           /*generate    ITEM    number of items. */
0033 do k=1  for item     /*traipse through the first  N  items. */
0034 !.k= random(0, 9)    /*set the  Kth  item with random digit.*/
0035 end   /*k*/
0036 return                           /*the piddly stuff is done  (for now). */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 item             32
002 items            32
003 k                33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #.               -> newV1.           5 13
002 !.               -> newV2.           29 34
003 _                -> newV3            12 25 25 29
004 @                -> newV4            16
