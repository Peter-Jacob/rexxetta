-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:35
-------------------------------------------------------------------------
0001 /*REXX program  reads  a  file  and  displays  it to the screen  (with word wrap).      */
0002 parse arg iFID width kind _ .                    /*obtain optional arguments from the CL*/
0003 if  iFID=='' | iFID==","  then iFID = 'LAWS.TXT' /*Not specified?  Then use the default.*/
0004 if width=='' |width==","  then width= linesize() /* "      "         "   "   "     "    */
0005 if right(width, 1) =='%'  then width= linesize() * translate(width, , "%")  %  100
0006 if kind=='' | kind==","   then kind= 'Left'      /*Default?  Then use the default: LEFT */
0007 just= left(kind, 1);  upper just                 /*use 1st char of JUSTIFY,  uppercased.*/
0008 if pos(just, 'BCLR')==0  then call err "KIND  (3rd arg) is illegal:"      kind
0009 if _\==''                then call err "too many arguments specified."      _
0010 if \datatype(width,'W')  then call err "WIDTH (2nd arg) isn't an integer:"  width
0011 n=0                                              /*the number of words in the file.     */
0012 do j=0  while lines(iFID)\==0        /*read from the file until End-Of-File.*/
0013 _=linein(iFID)                       /*get a record  (line of text).        */
0014 do  until _=='';      n= n + 1  /*extract some words  (or maybe not).  */
0015 parse var _   @.n  _            /*obtain and assign next word in text. */
0016 end   /*until*/                 /*parse 'til the line of text is null. */
0017 end        /*j*/
0018 
0019 if j==0   then call err  'file'  iFID  "not found."
0020 if n==0   then call err  'file'  iFID  "is empty  (or has no words)"
0021 $=@.1                                            /*initialize  $  string with first word*/
0022 do m=2  for n-1;           x= @.m    /*parse until text  (@)  is exhausted. */
0023 _= $ x                               /*append it to the  $  string and test.*/
0024 if length(_)>= width  then call tell /*this word a bridge too far?   > w    */
0025 $= _                                 /*the new words are OK  (so far).      */
0026 end   /*m*/
0027 call tell                                        /*handle any residual words  (if any). */
0028 exit                                             /*stick a fork in it,  we're all done. */
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 err:  say;    say '***error***';     say;     say arg(1);     say;      say;       exit 13
0031 /*──────────────────────────────────────────────────────────────────────────────────────*/
0032 tell: if $==''  then return                      /* [↓]  the first word may be too long.*/
0033 w=max(width, length($) )                   /*don't truncate long words  (> w).    */
0034 select
0035 when just=='L'  then $=  strip($)    /*left ◄────────                       */
0036 when just=='R'  then $=  right($, w) /*──────► right                        */
0037 when just=='B'  then $=justify($, w) /*◄────both────►                       */
0038 when just=='C'  then $= center($, w) /*  ◄centered►                         */
0039 end   /*select*/
0040 say $                                      /*display the line of words to terminal*/
0041 _= x                                       /*handle any word overflow.            */
0042 return                                     /*go back and keep truckin'.           */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 m                22
002 x                22
003 w                33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           15
002 _                -> newV2            13 15 15 23 41
003 $                -> newV3            21 25
