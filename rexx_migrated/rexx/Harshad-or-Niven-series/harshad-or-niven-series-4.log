-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:16
-------------------------------------------------------------------------
0001 /*REXX program finds the first  A  Niven numbers;  it also finds first Niven number > B.*/
0002 parse arg A B .                                  /*obtain optional arguments from the CL*/
0003 if A=='' | A==','  then A=   20                  /*Not specified?  Then use the default.*/
0004 if B=='' | B==','  then B= 1000                  /* "      "         "   "    "     "   */
0005 tell= A>0;              A= abs(A)                /*flag for showing a Niven numbers list*/
0006 A= abs(a)
0007 numeric digits 1+max(8, length(A), length(B) )   /*enable the use of any sized numbers. */
0008 #= 0;    $=                                      /*set Niven numbers count;  Niven list.*/
0009 do j=1  until  #==A   /*◄───── let's go Niven number hunting.*/
0010 if isNiven(j)  then do;   #= #+1;    !.#= j;    end
0011 end   /*j*/           /* [↑]   bump count; append J ──► list.*/
0012 w= length(!.w)                                   /*W:   is the width of largest Niven #.*/
0013 if tell  then do
0014 say 'first' A 'Niven numbers:';  do k=1  for #; say right(!.k, w); end /*k*/
0015 end
0016 else say 'last of the'      A      'Niven numbers: '           !.#
0017 say
0018 do t=B+1  until  isNiven(t) /*hunt for a Niven (or Harshad) number.*/
0019 end
0020 say  'first Niven number >'     B      " is: "      t
0021 exit                                             /*stick a fork in it,  we're all done. */
0022 /*──────────────────────────────────────────────────────────────────────────────────────*/
0023 isNiven: parse arg x 1 sum 2 q                   /*use the first decimal digit for  SUM.*/
0024 do  while  q\=='';    parse var q _ 2 q;          sum= sum + _
0025 end   /*while*/                 /*    ↑                                */
0026 return x // sum == 0                    /*    └──────◄ is destructively parsed.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 q                24 24
002 sum              24
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 !.               -> newV1.           10
002 #                -> newV2            8 10
003 $                -> newV3            8
004 _                -> newV4            24
