-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:08
-------------------------------------------------------------------------
0001 /*REXX program compares a list of  (character) strings for:   equality,  all ascending. */
0002 @.1= 'ayu dab dog gar panda tui yak'             /*seven strings: they're all ascending.*/
0003 @.2= 'oy oy oy oy oy oy oy oy oy oy'             /*  ten strings:         all equal.    */
0004 @.3= 'somehow   somewhere  sometime'             /*three strings:   ¬equal,  ¬ascending.*/
0005 @.4= 'Hoosiers'                                  /*only a single string is defined.     */
0006 @.5=                                             /*Null.   That is,  no strings here.   */
0007 do j=1  for 5;    say;   say            /* [↓]  traipse through all the lists. */
0008 say center(' '@.j, 50, "═")             /*display a centered title/header.     */
0009 if ifEqual( @.j)  then  say 'strings are all equal.'
0010 if ifAscend(@.j)  then  say 'strings are ascending.'
0011 end   /*j*/
0012 exit                                             /*stick a fork in it,  we're all done. */
0013 /*──────────────────────────────────────────────────────────────────────────────────────*/
0014 ifEqual:  procedure; parse arg strings           /*set  STRINGS  to a string in the list*/
0015 do k=2  to words(strings)            /*scan the strings in the list.        */
0016 if word(strings,k)\==word(strings,k-1)  then return 0        /*string=prev? */
0017 end   /*k*/                          /* [↑]     0=false,   [↓] 1=true.      */
0018 return 1                               /*indicate that all strings are equal. */
0019 /*──────────────────────────────────────────────────────────────────────────────────────*/
0020 ifAscend: procedure; parse arg strings           /*set  STRINGS  to a string in the list*/
0021 do k=2  to words(strings)            /*scan the strings in the list.        */
0022 if word(strings,k)<<=word(strings,k-1)  then return 0        /*string>prev? */
0023 end   /*k*/                          /*  [↑]    0=false,     [↓]    1=true. */
0024 return 1                               /*indicate that strings are ascending. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 strings          20
002 k                21
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           2 3 4 5 6
