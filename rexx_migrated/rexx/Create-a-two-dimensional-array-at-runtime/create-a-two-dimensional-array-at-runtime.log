-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:09
-------------------------------------------------------------------------
0001 /*REXX program  allocates/populates/displays  a two-dimensional array.  */
0002 call bloat                   /*the BLOAT procedure does all allocations.*/
0003 /*no more array named   @   at this point. */
0004 exit                         /*stick a fork in it, we're all done honey.*/
0005 /*─────────────────────────BLOAT subroutine─────────────────────────────*/
0006 bloat: procedure;  say       /*"PROCEDURE"  makes this a ··· procedure. */
0007 say 'Enter two positive integers (a 2-dimensional array will be created).'
0008 pull n m .                   /*elements are allocated as they're defined*/
0009 /*N and M should be verified at this point.*/
0010 @.=' · '                     /*Initial value for all  @  array elements,*/
0011 /*this ensures  every  element has a value.*/
0012 do j    =1  for n          /*traipse through the first  dimension  [N]*/
0013 do k=1  for m          /*   "       "     "  second     "      [M]*/
0014 if random()//7==0  then @.j.k=j'~'k    /*populate every 7th random*/
0015 end  /*k*/
0016 end        /*j*/
0017 /* [↓]  display array to console:  row,col */
0018 do r=1  for n;    _=       /*construct one row (or line) at a time.   */
0019 do c=1  for m          /*construct row one column at a time.      */
0020 _=_ right(@.r.c,4)     /*append a nice-aligned column to the line.*/
0021 end   /*kk*/           /* [↑]   an nicely aligned line is built.  */
0022 say _                      /*display one row at a time to the terminal*/
0023 end         /*jj*/
0024 /*╔════════════════════════════════════════════════════════════════════╗
0025 ║ When the  RETURN  is executed (from a PROCEDURE in this case), and ║
0026 ║ array   @  is "de─allocated", that is, it's no longer defined, and ║
0027 ║ the array's storage is now free for other REXX variables.   If the ║
0028 ║ BLOAT   subroutine didn't have a   "PROCEDURE"   on that statement,║
0029 ║ the array    @    would've been left intact.    The same effect is ║
0030 ║ performed by a   DROP   statement   (an example is shown below).   ║
0031 ╚════════════════════════════════════════════════════════════════════╝*/
0032 drop @.                      /*because of the  PROCEDURE  statement, the*/
0033 return                       /* [↑]    DROP   statement is superfluous. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 j                12
002 k                13
003 r                18
004 c                19
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           10 14
002 _                -> newV2            18 20
