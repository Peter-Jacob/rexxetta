-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:32
-------------------------------------------------------------------------
0001 /*REXX program finds  symmetric difference  and  symmetric AND  (between two lists).    */
0002 a= '["John", "Serena", "Bob", "Mary", "Serena"]' /*note the duplicate element:  Serena  */
0003 b= '["Jim", "Mary", "John", "Jim", "Bob"]'       /*  "   "       "       "      Jim     */
0004 a.=0;   SD.=0;   SA.=0;    SD=;     SA=          /*falsify booleans; zero & nullify vars*/
0005 a.1=a;         say '──────────────list A ='  a   /*assign a list and display it to term.*/
0006 a.2=b;         say '──────────────list B ='  b   /*   "   "   "   "     "     "  "   "  */
0007 /* [↓]  parse the two lists.           */
0008 do k=1  for 2                                /*process both lists  (stemmed array). */
0009 a.k=strip( strip(a.k, , "["), ,']')          /*strip leading and trailing brackets. */
0010 do j=1  until a.k=''              /*parse names  [they may have blanks]. */
0011 a.k=strip(a.k, , ',')             /*strip all commas (if there are any). */
0012 parse var  a.k   '"'  _  '"'  a.k /*obtain the name of the list.         */
0013 a.k.j=_                           /*store the name of the list.          */
0014 a.k._=1                           /*make a boolean value.                */
0015 end   /*j*/
0016 a.k.0=j-1                                    /*the number of this list  (of names). */
0017 end              /*k*/
0018 say                                              /* [↓]  find the symmetric difference. */
0019 do k=1  for 2;             ko=word(2 1, k)   /*process both lists;   KO=other list. */
0020 do j=1  for a.k.0;       _=a.k.j           /*process the list names.              */
0021 if \a.ko._ & \SD._  then do;   SD._=1      /*if not in both, then  ···            */
0022 SD=SD  '"'_'",'   /*add to symmetric difference list.    */
0023 end
0024 end   /*j*/
0025 end     /*k*/
0026 /* [↓]  SD ≡  symmetric difference.    */
0027 SD= "["strip( strip(SD), 'T', ",")']'            /*clean up and add brackets [ ]  to it.*/
0028 say 'symmetric difference ='   SD                /*display the symmetric difference.    */
0029 /* [↓]  locate the symmetric AND.      */
0030 do j=1  for a.1.0;     _=a.1.j                /*process the   A   list names.        */
0031 if a.1._ & a.2._ & \SA._  then do;   SA._=1   /*if it's common to both, then  ···    */
0032 SA=SA '"'_'",' /*add to symmetric AND  list.          */
0033 end
0034 end   /*j*/
0035 say                                              /* [↓]  SA ≡  symmetric AND.           */
0036 SA= "["strip( strip(SA), 'T', ",")']'            /*clean up and add brackets [ ]  to it.*/
0037 say '       symmetric AND ='   SA                /*stick a fork in it,  we're all done. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 a.               12 12 13 14 16
002 k                19
003 ko               19
004 j                20 30
005 SD.              21
006 SD               22 27
007 SA.              31
008 SA               32 36
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _                -> newV1            12 20 30
