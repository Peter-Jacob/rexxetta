-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:34
-------------------------------------------------------------------------
0001 /*REXX program shows a    clockwise   Ulam spiral  of  primes  shown in a square matrix.*/
0002 parse arg size init char .                       /*obtain optional arguments from the CL*/
0003 if size=='' | size==","  then size= 79           /*Not specified?  Then use the default.*/
0004 if init=='' | init==","  then init=  1           /* "      "         "   "   "     "    */
0005 if char==''              then char= "█"          /* "      "         "   "   "     "    */
0006 tot=size**2                                      /*the total number of numbers in spiral*/
0007 /*define the upper/bottom right corners*/
0008 uR.=0; bR.=0;   do od=1  by 2  to tot; _=od**2+init;  uR._=1;  _=_+od;  bR._=1; end /*od*/
0009 /*define the bottom/upper left corners.*/
0010 bL.=0; uL.=0;   do ev=2  by 2  to tot; _=ev**2+init;  bL._=1;  _=_+ev;  uL._=1; end /*ev*/
0011 
0012 app=1;    bigP=0;    #p=0;    inc=0;     minR=1;    maxR=1;    r=1;    $=0;    $.=;    !.=
0013 /*▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ construct the spiral #s.*/
0014 do i=init  for tot;    r= r + inc;     minR= min(minR, r);      maxR= max(maxR, r)
0015 x= isPrime(i);   if x  then bigP= max(bigP, i);          #p= #p + x   /*bigP, #primes.*/
0016 if app  then $.r= $.r ||  x                                           /*append  token.*/
0017 else $.r=  x  || $.r                                          /*prepend token.*/
0018 if uR.i  then do;  app= 1;  inc= +1;  iterate  /*i*/;    end          /*advance  ↓    */
0019 if bL.i  then do;  app= 0;  inc= -1;  iterate  /*i*/;    end          /*   "     ↑    */
0020 if bR.i  then do;  app= 0;  inc=  0;  iterate  /*i*/;    end          /*   "     ►    */
0021 if uL.i  then do;  app= 1;  inc=  0;  iterate  /*i*/;    end          /*   "     ◄    */
0022 end   /*i*/                                                           /* [↓] pack two */
0023 /*lines ──► one.*/
0024 do j=minR  to maxR  by 2;    jp= j + 1;              $= $ + 1         /*fold two lines*/
0025 do k=1  for  length($.j);  top= substr($.j, k, 1)                   /*the  1st line.*/
0026 bot= word( substr($.jp, k, 1)   0, 1)    /*the  2nd line.*/
0027 if top  then if  bot  then !.$= !.$'█'                              /*has top & bot.*/
0028 else !.$= !.$'▀'                              /*has top,¬ bot.*/
0029 else if  bot  then !.$= !.$'▄'                              /*¬ top, has bot*/
0030 else !.$= !.$' '                              /*¬ top,   ¬ bot*/
0031 end   /*k*/
0032 end     /*j*/                                  /* [↓]  show the  prime  spiral matrix.*/
0033 do m=1  for $;     say !.m;     end  /*m*/
0034 say;  say init 'is the starting point,'  ,
0035 tot  'numbers used,'   #p   "primes found, largest prime:"   bigP
0036 exit                                             /*stick a fork in it,  we're all done. */
0037 /*──────────────────────────────────────────────────────────────────────────────────────*/
0038 isPrime: procedure; parse arg x;  if wordpos(x, '2 3 5 7 11 13 17 19') \==0  then return 1
0039 if x<17  then return 0;                            if x// 2    ==0  then return 0
0040 if x// 3    ==0  then return 0
0041 /*get the last digit*/    parse var x  ''  -1  _;  if         _==5  then return 0
0042 if x// 7    ==0  then return 0
0043 if x//11    ==0  then return 0
0044 if x//13    ==0  then return 0
0045 
0046 do j=17  by 6  until  j*j > x;            if x//j     ==0  then return 0
0047 if x//(j+2) ==0  then return 0
0048 end   /*j*/;          return 1
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                41
002 j                46
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #p               -> newV1            12 15
002 $.               -> newV2.           12 16
003 !.               -> newV3.           12 27
004 _                -> newV4            8 8 10 10 41
005 $                -> newV5            12 24
