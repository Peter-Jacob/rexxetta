/*ª*REXX program performs a  Burrowsâ”€Wheeler transform  (BWT)  on a character string(s).  */
newV1.=                                              /*ª*the default text for (all) the inputs*/
parse arg newV1.1                                    /*ª*obtain optional arguments from the CL*/
if newV1.1=''  then do;  newV1.1= "banana"               /*ª*Not specified?  Then use the defaults*/
newV1.2= "BANANA"
newV1.3= "appellee"
newV1.4= "dogwood"
newV1.5= "TO BE OR NOT TO BE OR WANT TO BE OR NOT?"
newV1.6= "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES"
newV1.7= "^ABC|"
newV1.7= "badâ”€bad thingy"'fd'x  /*ª* â—„â”€â”€â”€ this string can't be processed.*/
end
/*ª* [â†‘]  show blank line between outputs*/
do t=1  while newV1.t\='';  if t\==1 then say /*ª*process each of the inputs (or input)*/
out=  BWT(newV1.t)                            /*ª*invoke the  BWT  function, get result*/
ori= iBWT(out)                            /*ª*   "    "  iBWT      "      "     "  */
say '   input â”€â”€â”€â–º '   newV1.t                /*ª*display    input      string to term.*/
say '  output â”€â”€â”€â–º '   out                /*ª*   "       output        "    "   "  */
say 'original â”€â”€â”€â–º '   ori                /*ª*   "    reconstituted    "    "   "  */
end    /*ª*t*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
BWT:   procedure expose newV2.; parse arg y,,newV4       /*ª*obtain the input;  nullify $ string. */
newV2.1= 'fd'x;          newV2.2= "fc"x           /*ª*assign the  STX  and  ETX  strings.  */
do i=1  for 2                          /*ª* [â†“]  check for invalid input string.*/
newV5= verify(y, newV2.i, 'M');  if newV5==0  then iterate;        er= '***error***  BWT: '
say er "invalid input: "    y
say er 'The input string contains an invalid character at position' newV5"."; exit newV5
end   /*ª*i*/                            /*ª* [â†‘]  if error,  perform a hard exit.*/
y= newV2.1 || y || newV2.2;      L= length(y)     /*ª*get the input & add a fence; gel len.*/
newV3.1= y;                  m= L - 1         /*ª*define the first element of the table*/
do j=2  for m;        newV5= j-1 /*ª*now, define the rest of the elements.*/
newV3.j= right(newV3.newV5,1)left(newV3.newV5,m) /*ª*construct a table from the  Y  input.*/
end   /*ª*j*/                  /*ª* [â†‘]  each element: left & right part*/
call cSort L                              /*ª*invoke lexicographical sort for array*/
do k=1  for L                /*ª* [â†“]  construct the answer from array*/
newV4= newV4  ||  right(newV3.k, 1)      /*ª*build the answer from each of  Â·Â·Â·   */
end   /*ª*k*/                  /*ª* Â·Â·Â· the array's rightâ”€most character*/
return newV4                                  /*ª*return the constructed answer.       */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
iBWT:  procedure expose newV2.; parse arg y,,newV3.      /*ª*obtain the input;  nullify @. string.*/
L= length(y)                              /*ª*compute the length of the input str. */
do   j=1  for L               /*ª* [â†“]  step through each input letters*/
do k=1  for L               /*ª* [â†“]  step through each row of table.*/
newV3.k= substr(y, k, 1) || newV3.k /*ª*construct a row of the table of chars*/
end   /*ª*k*/                 /*ª* [â†‘]  order of table row is inverted.*/
call cSort L                  /*ª*invoke lexicographical sort for array*/
end    /*ª*j*/                  /*ª* [â†‘]  answer is the penultimate entry*/
do newV6=1
if right(newV3.newV6, 1)==newV2.2  then return substr(newV3.newV6, 2, L-2)  /*ª*return correct result*/
end   /*ª*#*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
cSort: procedure expose newV3.;  parse arg n;  m=n-1 /*ª*N: is the number of @ array elements.*/
do m=m  for m  by -1  until ok;  ok=1 /*ª*keep sorting the  @ array until done.*/
do j=1  for m;  k= j+1;   if newV3.j<<=newV3.k  then iterate   /*ª*elements in order?*/
newV5= newV3.j;  newV3.j= newV3.k;  newV3.k= newV5;   ok= 0 /*ª*swap two elements;  flag as not done.*/
end   /*ª*j*/
end     /*ª*m*/;       return
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Burrows-Wheeler-transform\burrows-wheeler-transform.rexx was migrated on 23 Mar 2025 at 10:43:07
 * -------------------------------------------------------------------------
*/ 
