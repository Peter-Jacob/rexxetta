-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:04
-------------------------------------------------------------------------
0001 /*REXX pgm displays abundant odd numbers:  1st 25,  one─thousandth,  first > 1 billion. */
0002 parse arg Nlow Nuno Novr .                       /*obtain optional arguments from the CL*/
0003 if Nlow=='' | Nlow==","  then Nlow=          25  /*Not specified?  Then use the default.*/
0004 if Nuno=='' | Nuno==","  then Nuno=        1000  /* "      "         "   "   "     "    */
0005 if Novr=='' | Novr==","  then Novr=  1000000000  /* "      "         "   "   "     "    */
0006 numeric digits max(9, length(Novr) )             /*ensure enough decimal digits for  // */
0007 @= 'odd abundant number'                         /*variable for annotating the output.  */
0008 #= 0                                             /*count of odd abundant numbers so far.*/
0009 do j=3  by 2  until #>=Nlow;   $= sigO(j)  /*get the  sigma  for an odd integer.  */
0010 if $<=j  then iterate                      /*sigma  ≤  J ?    Then ignore it.     */
0011 #= # + 1                                   /*bump the counter for abundant odd #'s*/
0012 say rt(th(#))     @      'is:'rt(commas(j), 8)     rt("sigma=")     rt(commas($), 9)
0013 end  /*j*/
0014 say
0015 #= 0                                             /*count of odd abundant numbers so far.*/
0016 do j=3  by 2;                  $= sigO(j)  /*get the  sigma  for an odd integer.  */
0017 if $<=j    then iterate                    /*sigma  ≤  J ?    Then ignore it.     */
0018 #= # + 1                                   /*bump the counter for abundant odd #'s*/
0019 if #<Nuno  then iterate                    /*Odd abundant# count<Nuno?  Then skip.*/
0020 say rt(th(#))     @      'is:'rt(commas(j), 8)     rt("sigma=")     rt(commas($), 9)
0021 leave                                      /*we're finished displaying NUNOth num.*/
0022 end  /*j*/
0023 say
0024 do j=1+Novr%2*2  by 2;         $= sigO(j)  /*get sigma for an odd integer > Novr. */
0025 if $<=j    then iterate                    /*sigma  ≤  J ?    Then ignore it.     */
0026 say rt(th(1))   @  'over'  commas(Novr)  "is: "   commas(j)  rt('sigma=')  commas($)
0027 leave                                      /*we're finished displaying NOVRth num.*/
0028 end  /*j*/
0029 exit                                             /*stick a fork in it,  we're all done. */
0030 /*──────────────────────────────────────────────────────────────────────────────────────*/
0031 commas:parse arg _;  do c_=length(_)-3  to 1  by -3; _=insert(',', _, c_);  end;  return _
0032 rt:    procedure;  parse arg #,len;     if len==''  then len= 20;     return right(#, len)
0033 th:    parse arg th; return th||word('th st nd rd',1+(th//10)*(th//100%10\==1)*(th//10<4))
0034 /*──────────────────────────────────────────────────────────────────────────────────────*/
0035 sigO:  parse arg x;            s= 1              /*sigma for odd integers.           ___*/
0036 do k=3  by 2  while k*k<x           /*divide by all odd integers up to √ x */
0037 if x//k==0  then  s= s + k + x%k    /*add the two divisors to (sigma) sum. */
0038 end   /*k*/                         /*                                  ___*/
0039 if k*k==x  then  return s + k             /*Was  X  a square?    If so, add  √ x */
0040 return s                 /*return (sigma) sum of the divisors.  */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                35
002 s                35 37
003 k                36
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @                -> newV1            7
002 #                -> newV2            8 11 15 18 32
003 $                -> newV3            9 16 24
004 _                -> newV4            31 31
