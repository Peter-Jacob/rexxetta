/*ª*REXX program  lists  (the longest)  ordered word(s)  from a  supplied  dictionary.    */
iFID= 'UNIXDICT.TXT'                             /*ª*the filename of the word dictionary. */
m= 1                                             /*ª*maximum length of an ordered word(s).*/
call linein iFID, 1, 0                           /*ª*point to the first word in dictionary*/
newV1.=                                              /*ª*placeholder array for list of words. */
do j=1  while lines(iFID)\==0; x=linein(iFID) /*ª*keep reading until file is exhausted.*/
w= length(x);       if w<m  then iterate      /*ª*Word not long enough? Then ignore it.*/
if \datatype(x, 'M')        then iterate      /*ª*Is it not a letter?  Then ignore it. */
parse upper var  x      xU  1  z  2           /*ª*get uppercase version of X & 1st char*/
do k=2  for w-1;    newV2= substr(xU, k, 1)  /*ª*process each letter in uppercase word*/
if newV2<z  then iterate j                   /*ª*is letter < than the previous letter?*/
z= newV2                                     /*ª*we have a newer current letter.      */
end   /*ª*k*/                              /*ª* [â†‘]  logic includes  â‰¥  order.      */
m= w                                          /*ª*maybe define a new maximum length.   */
newV1.w= newV1.w  x                                   /*ª*add the original word to a word list.*/
end   /*ª*j*/                                   /*ª*the 1st DO needs an index for ITERATE*/
newV3= words(newV1.m)                      /*ª*just a handyâ”€dandy variable to have. */
say newV3  'word's(newV3)  "found (of length" m')';  say /*ª*show the number of words and length. */
do n=1  for newV3;   say word(newV1.m, n);   end /*ª*display all the words, one to a line.*/
exit                                             /*ª*stick a fork in it,  we're all done. */
ghijk
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
s:  if arg(1)==1  then return '';   return "s"   /*ª*a simple pluralizer (merely adds "S")*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Ordered-words\ordered-words.rexx was migrated on 23 Mar 2025 at 10:43:23
 * -------------------------------------------------------------------------
*/ 
