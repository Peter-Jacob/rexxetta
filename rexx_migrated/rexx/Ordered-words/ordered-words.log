-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:23
-------------------------------------------------------------------------
0001 /*REXX program  lists  (the longest)  ordered word(s)  from a  supplied  dictionary.    */
0002 iFID= 'UNIXDICT.TXT'                             /*the filename of the word dictionary. */
0003 m= 1                                             /*maximum length of an ordered word(s).*/
0004 call linein iFID, 1, 0                           /*point to the first word in dictionary*/
0005 @.=                                              /*placeholder array for list of words. */
0006 do j=1  while lines(iFID)\==0; x=linein(iFID) /*keep reading until file is exhausted.*/
0007 w= length(x);       if w<m  then iterate      /*Word not long enough? Then ignore it.*/
0008 if \datatype(x, 'M')        then iterate      /*Is it not a letter?  Then ignore it. */
0009 parse upper var  x      xU  1  z  2           /*get uppercase version of X & 1st char*/
0010 do k=2  for w-1;    _= substr(xU, k, 1)  /*process each letter in uppercase word*/
0011 if _<z  then iterate j                   /*is letter < than the previous letter?*/
0012 z= _                                     /*we have a newer current letter.      */
0013 end   /*k*/                              /* [↑]  logic includes  ≥  order.      */
0014 m= w                                          /*maybe define a new maximum length.   */
0015 @.w= @.w  x                                   /*add the original word to a word list.*/
0016 end   /*j*/                                   /*the 1st DO needs an index for ITERATE*/
0017 #= words(@.m)                      /*just a handy─dandy variable to have. */
0018 say #  'word's(#)  "found (of length" m')';  say /*show the number of words and length. */
0019 do n=1  for #;   say word(@.m, n);   end /*display all the words, one to a line.*/
0020 exit                                             /*stick a fork in it,  we're all done. */
0021 ghijk
0022 /*──────────────────────────────────────────────────────────────────────────────────────*/
0023 s:  if arg(1)==1  then return '';   return "s"   /*a simple pluralizer (merely adds "S")*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                9
002 xU               9
003 z                9 12
004 k                10
005 m                14
006 n                19
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           5 15
002 _                -> newV2            10
003 #                -> newV3            17
