-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:27
-------------------------------------------------------------------------
0001 /*REXX program computes the  K  roots of  unity  (which usually includes complex roots).*/
0002 numeric digits length( pi() )  -  length(.)      /*use number of decimal digits in  pi. */
0003 parse arg n frac .                               /*get optional arguments from the C.L. */
0004 if   n=='' |    n==","  then     n= 1            /*Not specified?  Then use the default.*/
0005 if frac='' | frac==","  then  frac= 5            /* "      "         "   "   "     "    */
0006 start= abs(n)       /*assume only one  K  is wanted.       */
0007 if n<0                  then start= 1            /*Negative?  Then use a range of  K's. */
0008 do #=start  to abs(n)                      /*show unity roots  (for a range or 1).*/
0009 say right(# 'roots of unity', 40, "─") ' (showing' frac "fractional decimal digits)"
0010 do angle=0  by pi*2/#  for #            /*compute the angle for each root.     */
0011 Rp= adj( cos(angle) )                   /*the    real   part via COS  function.*/
0012 Ip= adj( sin(angle) )                   /* "  imaginary   "   "  SIN      "    */
0013 if Rp>=0  then Rp= ' 'Rp                /*Not neg?  Then pad with a blank char.*/
0014 if Ip>=0  then Ip= '+'Ip                /* "   "      "   "    "  "  plus   "  */
0015 if Ip =0  then say Rp                   /*Only real part? Ignore imaginary part*/
0016 else say left(Rp,frac+4)Ip'i' /*display the real and imaginary part. */
0017 end  /*angle*/
0018 end     /*#*/
0019 exit 0                                           /*stick a fork in it,  we're all done. */
0020 /*──────────────────────────────────────────────────────────────────────────────────────*/
0021 adj: parse arg x; if abs(x) < ('1e-')(digits()*9%10)  then x= 0;  return format(x,,frac)/1
0022 pi:  pi=3.141592653589793238462643383279502884197169399375105820974944592307816; return pi
0023 r2r: pi2= pi() + pi;     return arg(1)  //  pi2  /*reduce #radians: -2pi ─► +2pi radians*/
0024 /*──────────────────────────────────────────────────────────────────────────────────────*/
0025 cos: procedure; parse arg x;   x= r2r(x);   a= abs(x);   numeric fuzz min(9, digits() - 9)
0026 pi1_3=pi/3;      if a=pi1_3  then return .5;        if a=pi*.5 | a=pi2  then return 0
0027 if a=pi  then return -1;  if a=pi1_3*2  then return -.5;   z= 1;  _= 1;     $x= x * x
0028 do k=2  by 2  until p=z;  p=z;  _= -_ * $x / (k*(k-1));  z= z + _;  end;  return z
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 sin: procedure; parse arg x;   x= r2r(x);                numeric fuzz min(5, digits() - 3)
0031 if abs(x)=pi  then return 0;              $x= x * x;       z= x;  _= x
0032 do k=2  by 2  until p=z;  p=z;  _= -_ * $x / (k*(k+1));  z= z + _;  end;   return z
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                30 30
002 z                31 32
003 k                32
004 p                32
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 $x               -> newV1            27 31
002 #                -> newV2            8
003 _                -> newV3            27 28 31 32
