/*ª*REXX program displays  squareâ”€free numbers  (integers > 1)  up to a specified limit.  */
numeric digits 20                                /*ª*be able to handle larger numbers.    */
parse arg LO HI .                                /*ª*obtain optional arguments from the CL*/
if LO=='' | LO==","  then LO=   1                /*ª*Not specified?  Then use the default.*/
if HI=='' | HI==","  then HI= 145                /*ª* "      "         "   "   "     "    */
sw= linesize() - 1                               /*ª*use one less than a full line.       */
newV2 = 0                                            /*ª*count of squareâ”€free numbers found.  */
newV3=                                               /*ª*variable that holds a line of numbers*/
do j=LO  to abs(HI)                         /*ª*process all integers between LO & HI.*/
if \isSquareFree(j)   then iterate          /*ª*Not squareâ”€free?   Then skip this #. */
newV2= newV2 + 1                                    /*ª*bump the count of squareâ”€free numbers*/
if HI<0  then iterate                       /*ª*Only counting 'em? Then look for more*/
if length(newV3 || j)<sw  then newV3= strip(newV3 j)    /*ª*append the number to the output list.*/
else do;   say newV3;   newV3=j;   end   /*ª*display a line of numbers.*/
end   /*ª*j*/

if newV3\==''  then say newV3                            /*ª*are there any residuals to display ? */
newV1= 'The number of squareâ”€free numbers between '
if HI<0    then say newV1  LO      " and "      abs(HI)       ' (inclusive)  is: '     newV2
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
isSquareFree: procedure; parse arg x;  if x<1  then return 0  /*ª*is the number too small?*/
odd= x//2                          /*ª*ODD=1   if X is odd,   ODD=0 if even.*/
do k=2+odd  to iSqrt(x)  by 1+odd /*ª*use all numbers, or just odds*/
if x // k**2 == 0  then return 0  /*ª*Is  X  divisible by a square?*/
end   /*ª*k*/                       /*ª* [â†‘]  Yes? Then Â¬ squareâ”€free*/
return 1                           /*ª* [â†‘]       //  is REXX's Ã· remainder.*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
iSqrt: procedure; parse arg x;         q= 1;         do while q<=x;       q= q * 4
end   /*ª*while q<=x*/
r= 0
do while q>1;        q= q % 4;     newV4= x - r - q;        r= r % 2
if newV4>=0  then do;    x= newV4;         r= r + q;            end
end   /*ª*while q>1*/
return r                                  /*ª*R  is the integer square root of  X. */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Square-free-integers\square-free-integers.rexx was migrated on 23 Mar 2025 at 10:43:30
 * -------------------------------------------------------------------------
*/ 
