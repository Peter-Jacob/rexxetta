/*ª*REXX program puts the  Millerâ”€Rabin  primality test  through its paces.               */
parse arg limit times seed .                     /*ª*obtain optional arguments from the CL*/
if limit=='' | limit==","  then limit= 1000      /*ª*Not specified?  Then use the default.*/
if times=='' | times==","  then times=   10      /*ª*  "      "        "   "   "     "    */
if datatype(seed, 'W')  then call random ,,seed  /*ª*If seed specified, use it for RANDOM.*/
numeric digits max(200, 2*limit)                 /*ª*we're dealing with some ginormous #s.*/
tell= times<0                                    /*ª*display primes  only if times is neg.*/
times= abs(times);         w= length(times)      /*ª*use absolute value of TIMES; get len.*/
call genP  limit                                 /*ª*suspenders now, use a belt later Â·Â·Â· */
newV1= 'Millerâ”€Rabin primality test'               /*ª*define a character literal for  SAY. */
say "There are"     newV4     'primes â‰¤'     limit   /*ª*might as well display some stuff.    */
say                                              /*ª* [â†“]  (skipping unity); show sep line*/
do a=2  to times;     say copies('â”€', 89)   /*ª*(skipping unity)   do range of TIMEs.*/
p= 0                                        /*ª*the counter of primes for this pass. */
do z=1  for limit                      /*ª*now, let's get busy and crank primes.*/
if \M_Rt(z, a)  then iterate           /*ª*Not prime?   Then try another number.*/
p= p + 1                               /*ª*well, we found another one, by gum!  */
if tell  then say z   'is prime according to'       newV1       "with K="a
if newV3.z   then iterate
say '[K='a"] "    z   "isn't prime !"  /*ª*oopsyâ”€doopsy  and/or  whoopsyâ”€daisy !*/
end   /*ª*z*/
say '        for 1â”€â”€â–º'limit", K="right(a,w)',' newV1 "found"  p  'primes {out of' newV4"}."
end     /*ª*a*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
genP: parse arg high;    newV2.=0;    newV2.1=2;   newV2.2=3;    newV3.=newV2.;   newV3.2=1;   newV3.3=1;     newV4=2
do j=newV2.newV4+2  by 2  to high               /*ª*just examine odd integers from here. */
do k=2  while k*k<=j;  if j//newV2.k==0  then iterate j;   end  /*ª*k*/
newV4= newV4 + 1;       newV2.newV4= j;        newV3.j= 1   /*ª*bump prime counter; add prime to the */
end   /*ª*j*/;      return                /*ª*@. array; define a prime in !. array.*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
M_Rt: procedure;  parse arg n,k;  d= n-1;   nL=d /*ª*Millerâ”€Rabin:   A.K.A.  Rabinâ”€Miller.*/
if n==2           then return 1            /*ª*special case of (the)  even  prime.  */
if n<2 | n//2==0  then return 0            /*ª*check for too low, or an even number.*/

do s=-1  while d//2==0;  d= d % 2       /*ª*keep halving  until a zero remainder.*/
end   /*ª*while*/

do k;       newV5= random(2, nL)    /*ª* [â†“]  perform the DO loop   K  times.*/
x= newV5**d  //  n                  /*ª*X  can get real gihugeic really fast.*/
if x==1 | x==nL  then iterate   /*ª*First or penultimate? Try another pow*/
do s;     x= x**2  //  n      /*ª*compute new  X   â‰¡   XÂ²  modulus  N. */
if x==1   then return 0       /*ª*if unity,  it's definitely not prime.*/
if x==nL  then leave          /*ª*if  N-1,   then it  could  be prime. */
end   /*ª*r*/                   /*ª* [â†‘]  // is REXX's division remainder*/
if x\==nL   then return 0       /*ª*nope, it ain't prime nohows, noway.  */
end     /*ª*k*/                   /*ª*maybe it's prime, maybe it ain't Â·Â·Â· */
return 1                                   /*ª*coulda/woulda/shoulda be prime;  yup.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Miller-Rabin-primality-test\miller-rabin-primality-test.rexx was migrated on 23 Mar 2025 at 10:43:21
 * -------------------------------------------------------------------------
*/ 
