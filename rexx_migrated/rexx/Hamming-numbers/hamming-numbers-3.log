-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:15
-------------------------------------------------------------------------
0001 /*REXX program computes  Hamming numbers:  1 ──► 20,   # 1691,   and  the one millionth.*/
0002 call hamming       1, 20                         /*show the 1st ──► twentieth Hamming #s*/
0003 call hamming    1691                             /*show the 1,691st Hamming number.     */
0004 call hamming 1000000                             /*show the  1 millionth Hamming number.*/
0005 exit                                             /*stick a fork in it,  we're all done. */
0006 /*──────────────────────────────────────────────────────────────────────────────────────*/
0007 hamming: procedure; arg x,y;  if y==''  then y= x;  w= length(y);  L= length(y-1); p= 2**L
0008 numeric digits max(9, p + p%4 + p%16)   /*ensure enough decimal digits.        */
0009 #2= 1;    #3= 1;     #5= 1;     @.= 0;       @.1= 1
0010 do n=2  for y-1
0011 _2= @.#2 + @.#2                      /*this is faster than:      @.#2 * 2   */
0012 _3= @.#3 + @.#3 + @.#3               /*  "   "    "     "        @,#3 * 3   */
0013 _5= @.#5 * 5
0014 m= _2              /*assume a minimum (of the 3 Hammings).*/
0015 if _3  < m   then m= _3              /*is this number less than the minimum?*/
0016 if _5  < m   then m= _5              /* "   "     "     "    "   "     "    */
0017 @.n= format(m,,,,0)          /*now,  assign the next Hamming number.*/
0018 if _2 == m   then #2= #2 + 1         /*number already defined?   Use next #.*/
0019 if _3 == m   then #3= #3 + 1         /*   "      "       "        "    "  " */
0020 if _5 == m   then #5= #5 + 1         /*   "      "       "        "    "  " */
0021 end   /*n*/                          /* [↑]  maybe assign next Hamming #'s. */
0022 do j=x  to y;      say 'Hamming('right(j, w)") ="     @.j / 1
0023 end   /*j*/
0024 
0025 say right( 'length of last Hamming number ='     length(@.y / 1), 70);        say
0026 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 y                7
002 w                7
003 L                7
004 p                7
005 n                10
006 m                14 15 16
007 j                22
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #2               -> newV1            9 18
002 #3               -> newV2            9 19
003 #5               -> newV3            9 20
004 @.               -> newV4.           9 9 17
005 _2               -> newV5            11
006 _3               -> newV6            12
007 _5               -> newV7            13
