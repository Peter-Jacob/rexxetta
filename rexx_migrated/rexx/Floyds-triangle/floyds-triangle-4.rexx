/*ª*REXX program constructs/shows Floyd's triangle for any number of rows in any base â‰¤90.*/
parse arg N radx .                               /*ª*obtain optional arguments from the CL*/
if    N=='' |    N==","  then    N= 5            /*ª*Not specified?  Then use the default.*/
if radx=='' | radx==","  then radx=10            /*ª* "      "         "   "   "     "    */
mx=N * (N+1) % 2  -  N                           /*ª*calculate maximum value of any value.*/
say 'displaying a '  N   " row Floyd's triangle in base"  radx':'  /*ª*display the header.*/
say
newV4=1;  do     r=1  for N;   i=0;            newV5=    /*ª*construct Floyd's triangle row by row*/
do newV4=newV4  for r;    i=i+1                 /*ª*start to construct a row of triangle.*/
newV5=newV5 right(base(newV4, radx),  length( base(mx+i, radx) ) )    /*ª*build triangle row.*/
end   /*ª*#*/
say substr(newV5, 2)                           /*ª*remove 1st leading blank in the line,*/
end      /*ª*r*/                             /*ª* [â†‘]   introduced by first abutment. */
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
base: procedure; parse arg x 1 ox,toB,inB              /*ª*obtain number, toBase, inBase. */
newV2= 'abcdefghijklmnopqrstuvwxyz'               /*ª*lowercase Latin alphabet.      */
newV1=newV2;        upper newV1                   /*ª*go whole hog and extend 'em.   */
newV3= '0123456789'newV2 || newV1                   /*ª*prefix 'em with numeric digits.*/
newV3=newV3'<>[]{}()?~!@#$%^&*_=|\/;:Â¢Â¬â‰ˆ'            /*ª*add some special chars as well.*/
/*ª* [â†‘]  handles up to base 90,  all chars must be viewable.*/
numeric digits 3000                              /*ª*what the hey, support gihugeics*/
mxB=length(newV3)                                  /*ª*max base (radix) supported here*/
if toB=='' | toB=="," then toB=10                /*ª*if skipped, assume default (10)*/
if inB=='' | inB=="," then inB=10                /*ª* "    "        "      "      " */
if inB<2   | inb>mxB  then call erb 'inBase',inB /*ª*invalid/illegal arg:   inBase. */
if toB<2   | tob>mxB  then call erb 'toBase',toB /*ª*    "      "     "     toBase. */
if x==''              then call erm              /*ª*    "      "     "     number. */
sigX=left(x, 1)                           /*ª*obtain a possible leading sign.*/
if pos(sigX, '-+')\==0  then x=substr(x, 2)      /*ª*X  number has a leading sign?  */
else sigX=               /*ª*           Â·Â·Â· no leading sign.*/
newV4=0
do j=1  for length(x);  newV5=substr(x, j, 1)  /*ª*convert X, base inB â”€â”€â–º base 10*/
v=pos(newV5, newV3)                              /*ª*get the value of this "digit". */
if v==0 | v>inB  then call erd x,j,inB     /*ª*is this an illegal "numeral" ? */
newV4=newV4 * inB + v - 1                          /*ª*construct new num, dig by dig. */
end   /*ª*j*/
y=
do  while  newV4 >= toB                        /*ª*convert #, base 10 â”€â”€â–º base toB*/
y=substr(newV3, (newV4 // toB) + 1, 1)y          /*ª*construct the number for output*/
newV4=newV4 % toB                                  /*ª* Â·Â·Â· and whittle  #  down also.*/
end   /*ª*while*/

y=sigX || substr(newV3, newV4+1, 1)y                   /*ª*prepend the sign if it existed.*/
return y                                         /*ª*return the number in base  toB.*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
erb:  call ser  'illegal'   arg(2)   "base: "   arg(1)   "must be in range:  2â”€â”€â–º "    mxB
erd:  call ser  'illegal "digit" in'            x":"     newV5
erm:  call ser  'no argument specified.'
ser:  say; say  '***error***';             say arg(1);     say;      exit 13
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Floyds-triangle\floyds-triangle-4.rexx was migrated on 23 Mar 2025 at 10:43:14
 * -------------------------------------------------------------------------
*/ 
