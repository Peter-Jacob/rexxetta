-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:22
-------------------------------------------------------------------------
0001 /*REXX program  generates and displays  a number of  narcissistic (Armstrong)  numbers. */
0002 numeric digits 39                                /*be able to handle largest Armstrong #*/
0003 parse arg N .                                    /*obtain optional argument from the CL.*/
0004 if N=='' | N==","  then N=25                     /*Not specified?  Then use the default.*/
0005 N=min(N, 89)                                     /*there are only  89  narcissistic #s. */
0006 @.=0                                             /*set default for the @ stemmed array. */
0007 #=0                                              /*number of narcissistic numbers so far*/
0008 do p=0  for 39+1; if p<10  then call tell p /*display the 1st 1─digit dec. numbers.*/
0009 do i=1  for 9;     @.p.i= i**p          /*build table of ten digits ^ P power. */
0010 end   /*i*/
0011 end       /*p*/                             /* [↑]  table is a fixed (limited) size*/
0012 /* [↓]  skip the 2─digit dec. numbers. */
0013 do j=100;              L=length(j)          /*get length of the  J  decimal number.*/
0014 parse var  j    _1  2  _2  3  m  ''  -1  _R /*get 1st, 2nd, middle, last dec. digit*/
0015 $=@.L._1  +  @.L._2  +  @.L._R              /*sum of the J decimal digs^L (so far).*/
0016 
0017 do k=3  for L-3  until $>j         /*perform for other decimal digits in J*/
0018 parse var  m    _  +1  m           /*get next dec. dig in J, start at 3rd.*/
0019 $=$ + @.L._                        /*add dec. digit raised to pow to sum. */
0020 end   /*k*/                        /* [↑]  calculate the rest of the sum. */
0021 
0022 if $==j  then do;  call tell j              /*does the sum equal to  J?  Show the #*/
0023 if #==n  then leave      /*does the sum equal to  J?  Show the #*/
0024 end
0025 end   /*j*/                                 /* [↑]  the  J loop  list starts at 100*/
0026 exit                                             /*stick a fork in it,  we're all done. */
0027 /*──────────────────────────────────────────────────────────────────────────────────────*/
0028 tell: #=# + 1                                    /*bump the counter for narcissistic #s.*/
0029 say right(#,9)   ' narcissistic:'   arg(1) /*display index and narcissistic number*/
0030 if #==n  &  n<11  then exit                /*finished showing of narcissistic #'s?*/
0031 return                                     /*return to invoker & keep on truckin'.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 m                18 18
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           6 9
002 _1               -> newV2            14
003 _2               -> newV3            14
004 _R               -> newV4            14
005 #                -> newV5            7
006 $                -> newV6            15 19
007 _                -> newV7            18
