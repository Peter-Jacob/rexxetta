-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:20
-------------------------------------------------------------------------
0001 /*REXX program gens/shows (a range of)  ludic numbers,  or a count when a range is used.*/
0002 parse arg N count bot top triples .              /*obtain optional arguments from the CL*/
0003 if       N=='' |       N=="," then       N=   25 /*Not specified?  Then use the default.*/
0004 if   count=='' |   count=="," then   count= 1000 /* "      "         "   "   "     "    */
0005 if     bot=='' |     bot=="," then     bot= 2000 /* "      "         "   "   "     "    */
0006 if     top=='' |     top=="," then     top= 2005 /* "      "         "   "   "     "    */
0007 if triples=='' | triples=="," then triples=  249 /* "      "         "   "   "     "    */
0008 #= 0                                             /*the number of ludic numbers (so far).*/
0009 $= ludic( max(N, count, bot, top, triples) )                /*generate enough ludic nums*/
0010 say 'The first '   N   " ludic numbers: "   subword($,1,25) /*display 1st  N  ludic nums*/
0011 do j=1  until word($, j) > count             /*search up to a specific #.*/
0012 end   /*j*/
0013 say
0014 say "There are "          j - 1           ' ludic numbers that are  ≤ '            count
0015 say
0016 say "The "  bot  '───►'     top     ' (inclusive)  ludic numbers are: '    subword($, bot)
0017 @=                                               /*list of ludic triples found (so far).*/
0018 do j=1  for words($)
0019 _= word($, j)                               /*it is known that ludic   _   exists. */
0020 if _>=triples  then leave                   /*only process up to a specific number.*/
0021 if wordpos(_+2, $)==0 | wordpos(_+6, $)==0  then iterate    /*Not triple?  Skip it.*/
0022 #= # + 1                                    /*bump the triple counter.             */
0023 @= @ '◄'_  _+2  _+6"► "                     /*append the newly found triple ──►  @ */
0024 end   /*j*/
0025 say
0026 if @==''  then  say  'From 1──►'triples", no triples found."
0027 else  say  'From 1──►'triples", "     #     ' triples found:'      @
0028 exit                                             /*stick a fork in it,  we're all done. */
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 ludic: procedure; parse arg m,,@;    $= 1 2      /*$≡ludic numbers superset;  @≡sequence*/
0031 do j=3  by 2  to  m*15;   @= @ j      /*construct an initial list of numbers.*/
0032 end   /*j*/
0033 @= @' ';                    n= words(@)   /*append a blank to the number sequence*/
0034 do while n\==0;         f= word(@, 1) /*examine the first word in the @ list.*/
0035 $= $ f                                /*add the word to the  $  list.        */
0036 do d=1  by f  while d<=n;   n= n-1 /*use 1st number, elide all occurrences*/
0037 @= changestr(' 'word(@, d)" ",  @,  ' . ')     /*cross─out a number in  @ */
0038 end   /*d*/                        /* [↑]  done eliding the "1st" number. */
0039 @= translate(@, , .)                  /*change dots to blanks; count numbers.*/
0040 end      /*while*/                    /* [↑]  done eliding ludic numbers.    */
0041 return subword($, 1, m)                   /*return a  range  of  ludic  numbers. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 m                30
002 j                31
003 n                33 36
004 while            34
005 f                34
006 d                36
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #                -> newV1            8 22
002 $                -> newV2            9 30 35
003 @                -> newV3            17 23 30 31 33 37 39
004 _                -> newV4            19
