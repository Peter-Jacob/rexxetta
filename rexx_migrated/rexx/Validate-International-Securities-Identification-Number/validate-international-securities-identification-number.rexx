/*ª*REXX program validates the  checksum digit for an  International Securities ID number.*/
parse arg z                                      /*ª*obtain optional  ISINs  from the C.L.*/
if z=''  then z= "US0378331005 US0373831005 U50378331005 US03378331005 AU0000XVGZA3" ,
'AU0000VXGZA3 FR0000988040'     /*ª* [â†‘]  use the default list of  ISINs.*/
/*ª* [â†“]  process  all  specified  ISINs.*/
do n=1  for words(z);  x=word(z, n);  y= x  /*ª*obtain an  ISIN  from the  Z  list.  */
newV1=                                          /*ª* [â†“]  construct list of ISIN digits. */
do k=1  for length(x);  newV2= substr(x,k,1) /*ª*the ISIN may contain alphabetic chars*/
p= pos(newV2, 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ)   /*ª*X must contain Aâ”€â”€â–ºZ, 0â”€â”€â–º9.*/
if p==0  then y=                                  /*ª*trigger  "not"  valid below.*/
else newV1= newV1 || p-1                /*ª*convert  X  string (base 36 â”€â”€â–º dec).*/
end   /*ª*k*/                              /*ª* [â†‘]  convert  alphabetic â”€â”€â–º digits.*/
newV3=                                          /*ª*placeholder for the "not" in message.*/
if length(y)\==12             then newV3= "not" /*ª*see if the ISIN is exactly 12 chars. */
if \datatype( left(x,2),'U')  then newV3= "not" /*ª* "   "  "    "  1st 2 chars cap. let.*/
if \datatype(right(x,1),'W')  then newV3= "not" /*ª* "   "  "    "  last char not a digit*/
if newV3==''  then  if \luhn(newV1)   then newV3= "not" /*ª* "   "  "    "  passed the Luhn test.*/
say right(x, 30)   right(newV3, 5)   "valid"    /*ª*display the   yea  or  nay   message.*/
end   /*ª*n*/                                 /*ª* [â†‘] 1st 3 IFs could've been combined*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
Luhn: procedure;  parse arg x;           newV1= 0    /*ª*get credit card number;  zero $ sum. */
y= reverse( left(0, length(x) // 2)x)      /*ª*add leading zero if needed, & reverse*/
do j=1  to length(y)-1  by 2;    newV2= 2  *  substr(y, j+1, 1)
newV1= newV1 + substr(y, j, 1)  +  left(newV2, 1)  +  substr(newV2, 2  , 1, 0)
end   /*ª*j*/          /*ª* [â†‘]   sum the  odd and even  digits.*/
return right(newV1, 1)==0                      /*ª*return "1" if number passed Luhn test*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Validate-International-Securities-Identification-Number\validate-international-securities-identification-number.rexx was migrated on 23 Mar 2025 at 10:43:34
 * -------------------------------------------------------------------------
*/ 
