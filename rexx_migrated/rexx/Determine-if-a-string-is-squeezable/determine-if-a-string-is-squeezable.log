-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:10
-------------------------------------------------------------------------
0001 /*REXX program "squeezes" all immediately repeated characters in a string (or strings). */
0002 @.=                                              /*define a default for the  @.  array. */
0003 #.1= ' '; @.1=
0004 #.2= '-'; @.2= '"If I were two-faced, would I be wearing this one?" --- Abraham Lincoln '
0005 #.3= '7'; @.3=  ..1111111111111111111111111111111111111111111111111111111111111117777888
0006 #.4=  . ; @.4= "I never give 'em hell, I just tell the truth, and they think it's hell. "
0007 #.5= ' '; @.5= '                                                   ---  Harry S Truman  '
0008 #.6= '-'; @.6= @.5
0009 #.7= 'r'; @.7= @.5
0010 
0011 do j=1;    L= length(@.j)                   /*obtain the length of an array element*/
0012 say copies('═', 105)                        /*show a separator line between outputs*/
0013 if j>1  &  L==0     then leave              /*if arg is null and  J>1, then leave. */
0014 say '    specified immediate repeatable character='     #.j      "   ('"c2x(#.j)"'x)"
0015 say '    length='right(L, 3)     "   input=«««" || @.j || '»»»'
0016 new= squeeze(@.j, #.j)
0017 w= length(new)
0018 say '    length='right(w, 3)     "  output=«««" || new || '»»»'
0019 end   /*j*/
0020 exit                                             /*stick a fork in it,  we're all done. */
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 squeeze: procedure; parse arg y 1 $ 2,z          /*get string; get immed. repeated char.*/
0023 if pos(z || z, y)==0  then return y     /*No repeated immediate char?  Return Y*/
0024 /* [↑]  Not really needed;  a speed─up.*/
0025 do k=2  to length(y)        /*traipse through almost all the chars.*/
0026 _= substr(y, k, 1)                      /*pick a character from  Y */
0027 if _==right($, 1) & _==z then iterate   /*Same character?  Skip it.*/
0028 $= $ || _                               /*append char., it's diff. */
0029 end     /*j*/
0030 return $
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 y                22
002 z                22
003 k                25
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           2 3 4 5 6 7 8 9
002 #.               -> newV2.           3 4 5 6 7 8 9
003 $                -> newV3            22 28
004 _                -> newV4            26
