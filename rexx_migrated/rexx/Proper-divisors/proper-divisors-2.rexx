/*ª*REXX program finds proper divisors (and count) of integer ranges; finds the max count.*/
parse arg bot top inc range xtra                 /*ª*obtain optional arguments from the CL*/
if   bot=='' |   bot==","  then    bot=     1    /*ª*Not specified?  Then use the default.*/
if   top=='' |   top==","  then    top=    10    /*ª* "      "         "   "   "     "    */
if   inc=='' |   inc==","  then    inc=     1    /*ª* "      "         "   "   "     "    */
if range=='' | range==","  then  range= 20000    /*ª* "      "         "   "   "     "    */
w= max( length(top), length(bot), length(range)) /*ª*determine the biggest number of these*/
numeric digits max(9, w + 1)                     /*ª*have enough digits for  //  operator.*/
newV1.= 'and'                                        /*ª*a literal used to separate #s in list*/
do n=bot  to top  by inc                   /*ª*process the first range specified.   */
q= Pdivs(n);    newV2= words(q)                /*ª*get proper divs; get number of Pdivs.*/
if q=='âˆž'  then newV2= q                       /*ª*adjust number of Pdivisors for zero. */
say right(n, max(20, w) )   'has'   center(newV2, 4)     "proper divisors: "    q
end   /*ª*n*/
m= 0                                             /*ª*M â‰¡ maximum number of Pdivs (so far).*/
do r=1  for range;    q= Pdivs(r)          /*ª*process the second range specified.  */
newV2= words(q);          if newV2<m  then iterate /*ª*get proper divs; get number of Pdivs.*/
if newV2<m  then iterate                       /*ª*Less then max?   Then ignore this #. */
newV1.newV2= newV1.newV2  newV1.  r;      m=newV2                  /*ª*add this Pdiv to max list; set new M.*/
end   /*ª*r*/                                /*ª* [â†‘]   process 2nd range of integers.*/
say
say m  ' is the highest number of proper divisors in range 1â”€â”€â–º'range,
", and it's for: "       subword(newV1.m, 3)
say                                              /*ª* [â†“]  handle any given extra numbers.*/
do i=1  for words(xtra);  n= word(xtra, i) /*ª*obtain an extra number from XTRA list*/
w= max(w, 1 + length(n) )                  /*ª*use maximum width for aligned output.*/
numeric digits max(9, 1 + length(n) )      /*ª*have enough digits for  //  operator.*/
q= Pdivs(n);              newV2= words(q)      /*ª*get proper divs; get number of Pdivs.*/
say  right(n, max(20, w) )     'has'     center(newV2, 4)      "proper divisors."
end   /*ª*i*/                                /*ª* [â†‘] support extra specified integers*/
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
Pdivs: procedure; parse arg x,b;  x= abs(x);   if x==1  then return ''          /*ª*unity?*/
odd= x // 2;                            if x==0  then return 'âˆž'         /*ª*zero ?*/
a= 1                                      /*ª* [â†“]  use all, or only odd #s.    ___*/
do j=2+odd  by 1+odd  while j*j < x   /*ª*divide by some integers up to    âˆš X */
if x//j==0  then do;  a=a j;  b=x%j b /*ª*if Ã·, add both divisors to Î± & ÃŸ.    */
end
end   /*ª*j*/                           /*ª* [â†‘]  %  is the REXX integer division*/
/*ª* [â†“]  adjust for a square.        ___*/
if j*j==x  then  return  a j b            /*ª*Was  X  a square?    If so, add  âˆš X */
return  a   b            /*ª*return the divisors  (both lists).   */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Proper-divisors\proper-divisors-2.rexx was migrated on 23 Mar 2025 at 10:43:25
 * -------------------------------------------------------------------------
*/ 
