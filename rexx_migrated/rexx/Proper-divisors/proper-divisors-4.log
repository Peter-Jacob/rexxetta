-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:25
-------------------------------------------------------------------------
0001 /*REXX program finds proper divisors (and count) of integer ranges; finds the max count.*/
0002 parse arg bot top inc range xtra                 /*obtain optional arguments from the CL*/
0003 if   bot=='' |   bot==","  then    bot=     1    /*Not specified?  Then use the default.*/
0004 if   top=='' |   top==","  then    top=    10    /* "      "         "   "   "     "    */
0005 if   inc=='' |   inc==","  then    inc=     1    /* "      "         "   "   "     "    */
0006 if range=='' | range==","  then  range= 20000    /* "      "         "   "   "     "    */
0007 w= max( length(top), length(bot), length(range)) /*determine the biggest number of these*/
0008 numeric digits max(9, w + 1)                     /*have enough digits for  //  operator.*/
0009 @.= 'and'                                        /*a literal used to separate #s in list*/
0010 do n=bot  to top  by inc                   /*process the first range specified.   */
0011 q= Pdivs(n);    #= words(q)                /*get proper divs; get number of Pdivs.*/
0012 if q=='∞'  then #= q                       /*adjust number of Pdivisors for zero. */
0013 say right(n, max(20, w) )   'has'   center(#, 4)     "proper divisors: "    q
0014 end   /*n*/
0015 m= 0                                             /*M ≡ maximum number of Pdivs (so far).*/
0016 do r=1  for range;    q= Pdivs(r)          /*process the second range specified.  */
0017 #= words(q);          if #<m  then iterate /*get proper divs; get number of Pdivs.*/
0018 if #<m  then iterate                       /*Less then max?   Then ignore this #. */
0019 @.#= @.#  @.  r;      m=#                  /*add this Pdiv to max list; set new M.*/
0020 end   /*r*/                                /* [↑]   process 2nd range of integers.*/
0021 say
0022 say m  ' is the highest number of proper divisors in range 1──►'range,
0023 ", and it's for: "       subword(@.m, 3)
0024 say                                              /* [↓]  handle any given extra numbers.*/
0025 do i=1  for words(xtra);  n= word(xtra, i) /*obtain an extra number from XTRA list*/
0026 w= max(w, 1 + length(n) )                  /*use maximum width for aligned output.*/
0027 numeric digits max(9, 1 + length(n) )      /*have enough digits for  //  operator.*/
0028 q= Pdivs(n);              #= words(q)      /*get proper divs; get number of Pdivs.*/
0029 say  right(n, max(20, w) )     'has'     center(#, 4)      "proper divisors."
0030 end   /*i*/                                /* [↑] support extra specified integers*/
0031 exit 0                                           /*stick a fork in it,  we're all done. */
0032 /*──────────────────────────────────────────────────────────────────────────────────────*/
0033 iSqrt: procedure; parse arg x;  r=0;  q=1;             do while q<=x;  q=q*4;  end
0034 do while q>1; q=q%4; _=x-r-q; r=r%2; if _>=0 then do;x=_;r=r+q; end; end
0035 return r
0036 /*──────────────────────────────────────────────────────────────────────────────────────*/
0037 Pdivs: procedure; parse arg x,b;  x= abs(x)
0038 if x==1  then return ''                    /*null set.*/
0039 if x==0  then return '∞'                   /*infinity.*/
0040 odd= x // 2                               /*oddness of  X.        ___            */
0041 r= iSqrt(x)                               /* obtain the integer  √ X             */
0042 a= 1                                      /* [↓]  use all,  or only odd numbers. */
0043 /*                                  ___*/
0044 if odd then do j=3  by 2 for r%2-(r*r==x) /*divide by some integers up to    √ X */
0045 if x//j==0  then do;  a=a j; b=x%j b /*÷?  Add both divisors to A & B*/
0046 end
0047 end   /*j*/                   /*                                  ___*/
0048 else do j=2       for r-1-(r*r==x) /*divide by some integers up to    √ X */
0049 if x//j==0  then do;  a=a j; b=x%j b /*÷?  Add both divisors to A & B*/
0050 end
0051 end   /*j*/
0052 if r*r==x  then  return  a j b            /*Was  X  a square?    If so, add  √ X */
0053 return  a   b            /*return proper divisors  (both lists).*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                37 37
002 b                37 45 49
003 odd              40
004 r                41
005 a                42 45 49
006 j                44
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           9 19
002 #                -> newV2            11 12 17 28
003 _                -> newV3            34
