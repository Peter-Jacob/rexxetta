-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:10
-------------------------------------------------------------------------
0001 /*REXX pgm computes and displays the probabilities of a two─player S─sided, N─dice game.*/
0002 numeric digits 100                               /*increase/decrease to heart's desire. */
0003 call game  9  4, 6  6   /*1st player:  9 dice,  4 sides;   2nd player:  6 dice,  6 sides*/
0004 call game  5 10, 6  7   /* "     "     5   "   10   "       "     "     6   "    7   "  */
0005 exit                                             /*stick a fork in it,  we're all done. */
0006 /*──────────────────────────────────────────────────────────────────────────────────────*/
0007 game: parse arg  w.1  s.1,   w.2  s.2            /*1st player(dice sides), 2nd player···*/
0008 p.= 0
0009 do   j=1  for 2;         @@.j= prob(w.j, s.j)
0010 do k=w.j  to w.j*s.j;  parse var  @@.j   p.j.k  @@.j;  end  /*k*/
0011 end   /*j*/
0012 low.= 0
0013 do   j=w.1  to w.1*s.1
0014 do k=0  for j;         low.j= low.j + p.2.k;           end  /*k*/
0015 end   /*j*/
0016 say '   Player  1  has '       w.1       " dice with "       s.1      ' sides each.'
0017 say '   Player  2  has '       w.2       " dice with "       s.2      ' sides each.'
0018 winP= 0
0019 do   j=w.1  to w.1*s.1;  winP= winP   + p.1.j * low.j
0020 end   /*j*/
0021 say 'The probability for first player to win is '  format(winP*100,,digits()%2) "%."
0022 say                                        /*                               ↑     */
0023 return                                     /*show 1/2 of 100 dec. digits────┘     */
0024 /*──────────────────────────────────────────────────────────────────────────────────────*/
0025 prob: procedure; parse arg n,s,,@ $;     #.= 0;              pow= s**n
0026 do j=1  for n;     @= @'DO _'j"=1 FOR" s';';   end  /*j*/
0027 @= @'_=';                  do k=1  for n-1;   @= @"_"k'+'             ;   end  /*k*/
0028 interpret  @'_'n";#."_'=#.'_"+1"copies(';END', k)
0029 ns= n*s;                   do j=0  to ns;     p.j= #.j / pow;             end  /*j*/
0030 do k=n  to ns;     $= $ p.k;                   end  /*k*/
0031 return $   /* ◄──────────────── probability of 1st player to win, S─sided, N dice.*/
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 n                25
002 s                25
003 pow              25
004 j                26 29
005 k                27 30
006 ns               29
007 p.               29
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @@.              -> newV1.           9 10 10
002 #.               -> newV2.           25
003 @                -> newV3            25 26 27 27
004 $                -> newV4            25 30
