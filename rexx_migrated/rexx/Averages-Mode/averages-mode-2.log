-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:06
-------------------------------------------------------------------------
0001 /* Rexx */
0002 /*-- ~~ main ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
0003 call run_samples
0004 return
0005 exit
0006 
0007 /*-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
0008 /*-- returns a comma separated string of mode values from a comma separated input vector string */
0009 mode:
0010 procedure
0011 parse arg lvector
0012 drop vector.
0013 vector. = ''
0014 call makeStem lvector /*-- this call creates the "vector." stem from the input string */
0015 seen.   = 0
0016 modes.  = ''
0017 modeMax = 0
0018 do v_ = 1 to vector.0
0019 mv = vector.v_
0020 seen.mv = seen.mv + 1
0021 select
0022 when seen.mv > modeMax then do
0023 modeMax = seen.mv
0024 drop modes.
0025 modes. = ''
0026 nx = 1
0027 modes.0  = nx
0028 modes.nx = mv
0029 end
0030 when seen.mv = modeMax then do
0031 nx = modes.0 + 1
0032 modes.0  = nx
0033 modes.nx = mv
0034 end
0035 otherwise do
0036 nop
0037 end
0038 end
0039 end v_
0040 
0041 lmodes = ''
0042 do e_ = 1 to modes.0
0043 lmodes = lmodes modes.e_
0044 end e_
0045 lmodes = strip(space(lmodes, 1, ','))
0046 
0047 return lmodes
0048 
0049 /*-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
0050 /*-- pretty-print */
0051 show_mode:
0052 procedure
0053 parse arg lvector
0054 lmodes = mode(lvector)
0055 say 'Vector: ['space(lvector, 0)'], Mode(s): ['space(lmodes, 0)']'
0056 return modes
0057 
0058 /*-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
0059 /*-- load the "vector." stem from the comma separated input vector string */
0060 makeStem:
0061 procedure expose vector.
0062 vector.0 = 0
0063 parse arg lvector
0064 do v_ = 1 while lvector \= ''
0065 parse var lvector val ',' lvector
0066 vector.0 = v_
0067 vector.v_ = strip(val)
0068 vector = strip(lvector)
0069 end v_
0070 return vector.0
0071 
0072 /*-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
0073 run_samples:
0074 procedure
0075 call show_mode '10, 9, 8, 7, 6, 5, 4, 3, 2, 1'                     -- 10 9 8 7 6 5 4 3 2 1
0076 call show_mode '10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11'   -- 0
0077 call show_mode '30, 10, 20, 30, 40, 50, -100, 4.7, -11e+2'         -- 30
0078 call show_mode '30, 10, 20, 30, 40, 50, -100, 4.7, -11e+2, -11e+2' -- 30 -11e2
0079 call show_mode '1, 8, 6, 0, 1, 9, 4, 6, 1, 9, 9, 9'                -- 9
0080 call show_mode '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11'                 -- 1 2 3 4 5 6 7 8 9 10 11
0081 call show_mode '8, 8, 8, 2, 2, 2'                                  -- 8 2
0082 call show_mode 'cat, kat, Cat, emu, emu, Kat'                      -- emu
0083 call show_mode '0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 1, 0'                -- 4
0084 call show_mode '2, 7, 1, 8, 2'                                     -- 2
0085 call show_mode '2, 7, 1, 8, 2, 8'                                  -- 8 2
0086 call show_mode 'E, n, z, y, k, l, o, p, ä, d, i, e'                -- E n z y k l o p ä d i e
0087 call show_mode 'E, n, z, y, k, l, o, p, ä, d, i, e, ä'             -- ä
0088 call show_mode '3, 1, 4, 1, 5, 9, 7, 6'                            -- 1
0089 call show_mode '3, 1, 4, 1, 5, 9, 7, 6, 3'                         -- 3, 1
0090 call show_mode '1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17'                -- 6
0091 call show_mode '1, 1, 2, 4, 4'                                     -- 4 1
0092 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 lvector          65 65
002 val              65
003 vector.          66 67
004 vector           68
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
