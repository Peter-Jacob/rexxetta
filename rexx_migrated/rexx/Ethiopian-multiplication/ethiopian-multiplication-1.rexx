/*ª*REXX program multiplies two integers by the  Ethiopian  (or Russian peasant)  method. */
numeric digits 3000                              /*ª*handle some gihugeic integers.       */
parse arg a b .                                  /*ª*get two numbers from the command line*/
say  'a=' a                                      /*ª*display a formatted value of  A.     */
say  'b='   b                                    /*ª*   "    "     "       "    "  B.     */
say  'product='    eMult(a, b)                   /*ª*invoke eMult & multiple two integers.*/
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
eMult:   procedure;  parse arg x,y;  s=sign(x)   /*ª*obtain the two arguments; sign for X.*/
newV1=0                                     /*ª*product of the two integers (so far).*/
do  while x\==0            /*ª*keep processing while   X   not zero.*/
if \isEven(x)  then newV1=newV1+y  /*ª*if odd,  then add   Y   to product.  */
x= halve(x)                /*ª*invoke the  HALVE   function.        */
y=double(y)                /*ª*   "    "   DOUBLE      "            */
end   /*ª*while*/            /*ª* [â†‘]  Ethiopian multiplication method*/
return newV1*s/1                            /*ª*maintain the correct sign for product*/
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
double:  return  arg(1)  * 2                     /*ª*   *   is REXX's  multiplication.    */
halve:   return  arg(1)  % 2                     /*ª*   %    "   "     integer division.  */
isEven:  return  arg(1) // 2 == 0                /*ª*   //   "   "     division remainder.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Ethiopian-multiplication\ethiopian-multiplication-1.rexx was migrated on 23 Mar 2025 at 10:43:12
 * -------------------------------------------------------------------------
*/ 
