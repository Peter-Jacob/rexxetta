-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:29
-------------------------------------------------------------------------
0001 /*REXX program  sorts  and displays  a  stemmed array  using the  comb sort  algorithm. */
0002 call gen                                         /*generate the   @   array elements.   */
0003 call show    'before sort'                       /*display the  before  array elements. */
0004 say  copies('▒', 60) /*display a separator line  (a fence). */
0005 call combSort    #                               /*invoke the comb sort (with # entries)*/
0006 call show    ' after sort'                       /*display the   after  array elements. */
0007 exit 0                                           /*stick a fork in it,  we're all done. */
0008 /*──────────────────────────────────────────────────────────────────────────────────────*/
0009 combSort: procedure expose @.;   parse arg N     /*N:  is the number of  @  elements.   */
0010 g= N-1                                 /*G:  is the gap between the sort COMBs*/
0011 do  until g<=1 & done;  done= 1 /*assume sort is done  (so far).       */
0012 g= g * 0.8  % 1                 /*equivalent to:   g= trunc( g / 1.25) */
0013 if g==0  then g= 1              /*handle case of the gap is too small. */
0014 do j=1  until $>=N;  $= j+g  /*$:     a temporary index  (pointer). */
0015 if @.j>@.$  then do;   _= @.j;    @.j= @.$;   @.$= _;   done= 0;   end
0016 end   /*j*/
0017 end     /*until*/               /* [↑]  swap two elements in the array.*/
0018 return
0019 /*──────────────────────────────────────────────────────────────────────────────────────*/
0020 gen: @.=;     @.1  = '----polygon---  sides'  ;              @.12 = "dodecagon         12"
0021 @.2  = '============== =======' ;              @.13 = "tridecagon        13"
0022 @.3  = 'triangle           3'   ;              @.14 = "tetradecagon      14"
0023 @.4  = 'quadrilateral      4'   ;              @.15 = "pentadecagon      15"
0024 @.5  = 'pentagon           5'   ;              @.16 = "hexadecagon       16"
0025 @.6  = 'hexagon            6'   ;              @.17 = "heptadecagon      17"
0026 @.7  = 'heptagon           7'   ;              @.18 = "octadecagon       18"
0027 @.8  = 'octagon            8'   ;              @.19 = "enneadecagon      19"
0028 @.9  = 'nonagon            9'   ;              @.20 = "icosagon          20"
0029 @.10 = 'decagon           10'   ;              @.21 = "hectogon         100"
0030 @.11 = 'hendecagon        11'   ;              @.22 = "chiliagon       1000"
0031 @.23 = "myriagon       10000"
0032 do #=1  while  @.#\=='';  end    /*find how many elements in @ */
0033 #= #-1;     w= length(#);           return          /*adjust # because of DO loop.*/
0034 /*──────────────────────────────────────────────────────────────────────────────────────*/
0035 show:     do k=1  for #; say right('element',15) right(k,w)  arg(1)":"  @.k;  end;  return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 N                9
002 g                10 12 13
003 until            11
004 done             11 15
005 j                14
006 w                33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           15 15 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31
002 $                -> newV2            14
003 _                -> newV3            15
004 #                -> newV4            32 33
