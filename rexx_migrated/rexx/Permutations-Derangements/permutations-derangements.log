-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:24
-------------------------------------------------------------------------
0001 /*REXX program generates all  permutations  of   N   derangements  and  subfactorial #  */
0002 numeric digits 1000                              /*be able to handle large subfactorials*/
0003 parse arg N .;     if N=='' | N==","  then N=4   /*Not specified?  Then use the default.*/
0004 d= derangeSet(N)                                 /*go and build the  derangements  set. */
0005 say d  'derangements for'    N    "items are:"
0006 say
0007 do i=1  for  d                             /*display the derangements for N items.*/
0008 say right('derangement', 22)       right(i, length(d) )        '───►'         $.i
0009 end   /*i*/
0010 say                                              /* [↓]  count and calculate subfact !L.*/
0011 do L=0  to 2;  d= derangeSet(L)
0012 say L 'items:  derangement count='right(d, 6)",  !"L'='right( !s(L), 6)
0013 end   /*L*/
0014 say
0015 say right('!20=' , 22)     !s( 20)
0016 say right('!200=', 22)     !s(200)
0017 exit                                             /*stick a fork in it,  we're all done. */
0018 /*──────────────────────────────────────────────────────────────────────────────────────*/
0019 !s:         _=1;      do j=1  for arg(1);  if j//2  then _= j*_  -  1;     else _=j*_  + 1
0020 end   /*j*/;                       return _
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 derangeSet: procedure expose $.;  parse arg x;   $.=;    #=0;   p=x-1
0023 if x==0  then return 1;  if x==1  then return 0
0024 @.1=2;  @.2=1                                    /*populate 1st derangement.*/
0025 do i=3  to x;  @.i=i;  end  /*i*/              /*    "    the rest of 'em.*/
0026 parse value  @.p  @.x   with   @.x  @.p;   call .buildD x    /*swap & build.*/
0027 /*build others.*/
0028 do while .nextD(x, 0);  call .buildD x;   end;                  return #
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 .buildD:              do j=1  for arg(1);   if @.j==j  then return;  end
0031 #=#+1;    do j=1  for arg(1);   $.#= $.# @.j;            end;     return
0032 /*──────────────────────────────────────────────────────────────────────────────────────*/
0033 .nextD:     procedure expose @.;  parse arg n,i
0034 
0035 do k=n-1  by -1  for n-1;  kp=k+1;     if @.k<@.kp  then do; i=k; leave; end
0036 end   /*k*/
0037 
0038 do j=i+1  while j<n;       parse value  @.j  @.n   with   @.n  @.j;   n=n-1
0039 end   /*j*/
0040 if i==0  then return 0
0041 do m=i+1  while @.m<@.i;   end  /*m*/          /* [↓]  swap two values.   */
0042 parse  value   @.m @.i   with   @.i @.m;                          return 1
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 n                33 38
002 i                33 35
003 k                35
004 kp               35
005 j                38
006 NORMAL.6         
007 NORMAL.7         
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
014 NORMAL.14        
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 $.               -> newV1.           22 31
002 @.               -> newV2.           24 24 25 26 26 38 38 42 42
003 _                -> newV3            19
004 #                -> newV4            22 31
