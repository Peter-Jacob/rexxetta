-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:26
-------------------------------------------------------------------------
0001 /*REXX program performs range consolidation (they can be [equal] ascending/descending). */
0002 #.=                                              /*define the default for range sets.   */
0003 parse arg #.1                                    /*obtain optional arguments from the CL*/
0004 if #.1=''  then do                               /*Not specified?  Then use the defaults*/
0005 #.1= '[1.1, 2.2]'
0006 #.2= '[6.1, 7.2], [7.2, 8.3]'
0007 #.3= '[4, 3], [2, 1]'
0008 #.4= '[4, 3], [2, 1], [-1, -2], [3.9, 10]'
0009 #.5= '[1, 3], [-6, -1], [-4, -5], [8, 2], [-6, -6]'
0010 #.6= '[]'
0011 end
0012 
0013 do j=1  while #.j\=='';   $= #.j          /*process each of the range sets.      */
0014 say copies('═', 75)                       /*display a fence between range sets.  */
0015 say '         original ranges:'     $     /*display the original range set.      */
0016 $= order($)                               /*order low and high ranges; normalize.*/
0017 call xSort  words($)                      /*sort the ranges using a simple sort. */
0018 $= merge($)                               /*consolidate the ranges.              */
0019 say '     consolidated ranges:'     $     /*display the consolidated range set.  */
0020 end   /*j*/
0021 exit                                             /*stick a fork in it,  we're all done. */
0022 /*──────────────────────────────────────────────────────────────────────────────────────*/
0023 merge: procedure expose @.; parse arg y
0024 if words(y)<2  then signal build          /*Null or only 1 range?  Skip merging. */
0025 
0026 do j=1  to @.0-1;         if @.j==''  then iterate      /*skip deleted ranges.*/
0027 do k=j+1  to  @.0;      if @.k==''  then iterate      /*  "     "       "   */
0028 parse var  @.j  a   b;  parse var  @.k  aa  bb        /*extract low and high*/
0029 /*■■■■►*/   if a<=aa & b>=bb  then  do; @.k=;  iterate;            end  /*within a range*/
0030 /*■■■■►*/   if a<=aa & b>=aa  then  do; @.j= a bb; @.k=; iterate;  end  /*abutted ranges*/
0031 end   /*k*/
0032 end     /*j*/
0033 build: z=
0034 do r=1  for @.0;  z= z translate(@.r, ',', " ");  end   /*r*/   /*add comma*/
0035 f=;   do s=1  for words(z);   f= f '['word(z, s)"], ";  end   /*s*/   /*add [ ], */
0036 if f==''  then return '[]'                                            /*null set.*/
0037 return space( changestr(',',  strip( space(f), 'T', ","), ", ") )     /*add blank*/
0038 /*──────────────────────────────────────────────────────────────────────────────────────*/
0039 order: procedure expose @.; parse arg y,,z;  @.= /*obtain arguments from the invocation.*/
0040 y= space(y, 0)                            /*elide superfluous blanks in the sets.*/
0041 do k=1  while y\==''  &  y\=='[]'      /*process ranges while range not blank.*/
0042 y= strip(y, 'L', ",")                  /*elide commas between sets of ranges. */
0043 parse var  y   '['  L  ","  H  ']'   y /*extract  the "low" and "high" values.*/
0044 if H<L  then parse value  L H with H L /*order     "    "    "     "      "   */
0045 L= L / 1;     H= H / 1                 /*normalize the  L  and the  H  values.*/
0046 @.k= L H;     z= z L','H               /*re─build the set w/o and with commas.*/
0047 end   /*k*/                            /* [↓]  at this point, K is one to big.*/
0048 @.0= k - 1                                /*keep track of the number of ranges.  */
0049 return strip(z)                           /*elide the extra leading blank in set.*/
0050 /*──────────────────────────────────────────────────────────────────────────────────────*/
0051 xSort: procedure expose @.; parse arg n          /*a simple sort for small set of ranges*/
0052 do j=1  to n-1;                        _= @.j
0053 do k=j+1  to n; if word(@.k,1)>=word(_,1)  then iterate; @.j=@.k; @.k=_; _=@.j
0054 end   /*k*/
0055 end     /*j*/;        return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 n                51
002 j                52
003 k                53
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #.               -> newV1.           2 3 5 6 7 8 9 10
002 @.               -> newV2.           28 28 29 30 30 39 46 48 53 53
003 $                -> newV3            13 16 18
004 _                -> newV4            52 53
