-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:09
-------------------------------------------------------------------------
0001 /* REXX Use Cramer's rule to compute solutions of given linear equations  */
0002 Numeric Digits 20
0003 names='w x y z'
0004 M='  2  -1   5   1',
0005 '  3   2   2  -6',
0006 '  1   3   3  -1',
0007 '  5  -2  -3   3'
0008 v=' -3',
0009 '-32',
0010 '-47',
0011 ' 49'
0012 Call mk_mat(m)                      /* M -> a.i.j                    */
0013 Do j=1 To dim                       /* Show the input                */
0014 ol=''
0015 Do i=1 To dim
0016 ol=ol format(a.i.j,6)
0017 End
0018 ol=ol format(word(v,j),6)
0019 Say ol
0020 End
0021 Say copies('-',35)
0022 
0023 d=det(m)                            /* denominator determinant       */
0024 
0025 Do k=1 To dim                       /* construct nominator matrix    */
0026 Do j=1 To dim
0027 Do i=1 To dim
0028 If i=k Then
0029 b.i.j=word(v,j)
0030 Else
0031 b.i.j=a.i.j
0032 End
0033 End
0034 Call show_b
0035 d.k=det(mk_str())                 /* numerator determinant         */
0036 Say word(names,k) '=' d.k/d       /* compute value of variable k   */
0037 End
0038 Exit
0039 
0040 mk_mat: Procedure Expose a. dim     /* Turn list into matrix a.i.j */
0041 Parse Arg list
0042 dim=sqrt(words(list))
0043 k=0
0044 Do j=1 To dim
0045 Do i=1 To dim
0046 k=k+1
0047 a.i.j=word(list,k)
0048 End
0049 End
0050 Return
0051 
0052 mk_str: Procedure Expose b. dim     /* Turn matrix b.i.j into list   */
0053 str=''
0054 Do j=1 To dim
0055 Do i=1 To dim
0056 str=str b.i.j
0057 End
0058 End
0059 Return str
0060 
0061 show_b: Procedure Expose b. dim     /* show numerator matrix         */
0062 do j=1 To dim
0063 ol=''
0064 Do i=1 To dim
0065 ol=ol format(b.i.j,6)
0066 end
0067 Call dbg ol
0068 end
0069 Return
0070 
0071 det: Procedure                      /* compute determinant           */
0072 Parse Arg list
0073 n=words(list)
0074 call dbg 'det:' list
0075 do dim=1 To 10
0076 If dim**2=n Then Leave
0077 End
0078 call dbg 'dim='dim
0079 If dim=2 Then Do
0080 det=word(list,1)*word(list,4)-word(list,2)*word(list,3)
0081 call dbg 'det=>'det
0082 Return det
0083 End
0084 k=0
0085 Do j=1 To dim
0086 Do i=1 To dim
0087 k=k+1
0088 a.i.j=word(list,k)
0089 End
0090 End
0091 Do j=1 To dim
0092 ol=j
0093 Do i=1 To dim
0094 ol=ol format(a.i.j,6)
0095 End
0096 call dbg ol
0097 End
0098 det=0
0099 Do i=1 To dim
0100 ol=''
0101 Do j=2 To dim
0102 Do ii=1 To dim
0103 If ii<>i Then
0104 ol=ol a.ii.j
0105 End
0106 End
0107 call dbg 'i='i 'ol='ol
0108 If i//2 Then
0109 det=det+a.i.1*det(ol)
0110 Else
0111 det=det-a.i.1*det(ol)
0112 End
0113 Call dbg 'det=>>>'det
0114 Return det
0115 sqrt: Procedure
0116 /* REXX ***************************************************************
0117 * EXEC to calculate the square root of a = 2 with high precision
0118 **********************************************************************/
0119 Parse Arg x,prec
0120 If prec<9 Then prec=9
0121 prec1=2*prec
0122 eps=10**(-prec1)
0123 k = 1
0124 Numeric Digits 3
0125 r0= x
0126 r = 1
0127 Do i=1 By 1 Until r=r0 | (abs(r*r-x)<eps)
0128 r0 = r
0129 r  = (r + x/r) / 2
0130 k  = min(prec1,2*k)
0131 Numeric Digits (k + 5)
0132 End
0133 Numeric Digits prec
0134 r=r+0
0135 Return r
0136 
0137 
0138 dbg: Return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                119
002 prec             119 120
003 prec1            121
004 eps              122
005 k                123 130
006 r0               125 128
007 r                126 129 134
008 i                127
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
