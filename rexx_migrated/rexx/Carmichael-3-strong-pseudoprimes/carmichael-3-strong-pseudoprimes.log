-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:07
-------------------------------------------------------------------------
0001 /*REXX program calculates  Carmichael  3─strong  pseudoprimes  (up to and including N). */
0002 numeric digits 18                                /*handle big dig #s (9 is the default).*/
0003 parse arg N .;    if N=='' | N==","  then N=61   /*allow user to specify for the search.*/
0004 tell= N>0;           N= abs(N)                   /*N>0?  Then display Carmichael numbers*/
0005 #= 0                                             /*number of Carmichael numbers so far. */
0006 @.=0;   @.2=1; @.3=1; @.5=1; @.7=1; @.11=1; @.13=1; @.17=1; @.19=1; @.23=1; @.29=1; @.31=1
0007 /*[↑]  prime number memoization array. */
0008 do p=3  to N  by 2;  pm= p-1;  bot=0;  top=0 /*step through some (odd) prime numbers*/
0009 if \isPrime(p)  then iterate;  nps= -p*p     /*is   P   a prime?   No, then skip it.*/
0010 c.= 0                                        /*the list of Carmichael #'s  (so far).*/
0011 do h3=2  for  pm-1;   g= h3 + p     /*get Carmichael numbers for this prime*/
0012 npsH3= ((nps // h3) + h3) // h3     /*define a couple of shortcuts for pgm.*/
0013 gPM= g * pm                         /*define a couple of shortcuts for pgm.*/
0014 /* [↓] perform some weeding of D values*/
0015 do d=1  for g-1;                   if gPM // d    \== 0      then iterate
0016 if npsH3       \== d//h3  then iterate
0017 q= 1  +  gPM   % d;    if \isPrime(q)            then iterate
0018 r= 1  +  p * q % h3;   if q * r // pm \== 1      then iterate
0019 if \isPrime(r)            then iterate
0020 #= # + 1;   c.q= r              /*bump Carmichael counter; add to array*/
0021 if bot==0  then bot= q;   bot= min(bot, q);             top= max(top, q)
0022 end   /*d*/
0023 end       /*h3*/
0024 $=                                           /*build list of some Carmichael numbers*/
0025 if tell  then  do j=bot  to top  by 2;          if c.j\==0  then $= $  p"∙"j'∙'c.j
0026 end           /*j*/
0027 
0028 if $\==''  then say  'Carmichael number: '      strip($)
0029 end                /*p*/
0030 say
0031 say '──────── '     #     " Carmichael numbers found."
0032 exit                                             /*stick a fork in it,  we're all done. */
0033 /*──────────────────────────────────────────────────────────────────────────────────────*/
0034 isPrime: parse arg x;             if @.x      then return 1       /*is X  a known prime?*/
0035 if x<37  then return 0;  if x//2==0  then return 0; if x// 3==0     then return 0
0036 parse var x  ''  -1  _;  if _==5     then return 0; if x// 7==0     then return 0
0037 if x//11==0  then return 0; if x//13==0  then return 0; if x//17==0 then return 0
0038 if x//19==0  then return 0; if x//23==0  then return 0; if x//29==0 then return 0
0039 do k=29  by 6  until k*k>x;    if x//k       ==0  then return 0
0040 if x//(k+2)   ==0  then return 0
0041 end   /*k*/
0042 @.x=1;                                                                   return 1
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                36
002 k                39
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           6 6 6 6 6 6 6 6 6 6 6 6 42
002 #                -> newV2            5 20
003 $                -> newV3            24 25
004 _                -> newV4            36
