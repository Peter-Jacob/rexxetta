-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:25
-------------------------------------------------------------------------
0001 /*REXX program counts the number of  Pythagorean triples  that exist given a maximum    */
0002 /*──────────────────── perimeter of  N, and also counts how many of them are primitives.*/
0003 parse arg N .                                    /*obtain optional argument from the CL.*/
0004 if N=='' | N==","  then N= 100                   /*Not specified?  Then use the default.*/
0005 do j=1  for N;   @.j= j*j;   end   /*pre-compute some squares.            */
0006 N66= N * 2%3                                     /*calculate  2/3  of  N     (for a+b). */
0007 T= 0;   P= 0                                     /*set the number of Triples, Primitives*/
0008 do a=3  to N%3                     /*limit  side  to 1/3 of the perimeter.*/
0009 do b= a+1                       /*the triangle can't be  isosceles.    */
0010 ab= a + b                       /*compute a partial perimeter (2 sides)*/
0011 if ab>=N66       then iterate a /*is a+b≥66% perimeter? Try different A*/
0012 aabb= @.a + @.b                 /*compute the sum of  a²+b²  (shortcut)*/
0013 do c=b+1                     /*compute the value of the third side. */
0014 if ab+c > N   then iterate a /*is a+b+c>perimeter ? Try different A.*/
0015 if @.c >aabb  then iterate b /*is     c²  > a²+b² ? Try      "    B.*/
0016 if @.c\==aabb then iterate   /*is     c² ¬= a²+b² ? Try      "    C.*/
0017 T= T + 1                     /*eureka. We found a Pythagorean triple*/
0018 P= P + (gcd(a, b)==1)        /*is this  triple  a primitive triple? */
0019 end   /*c*/
0020 end      /*b*/
0021 end         /*a*/
0022 _= left('', 7)                                   /*for padding the output with 7 blanks.*/
0023 say 'max perimeter ='    N   _    "Pythagorean triples ="    T    _    'primitives ='    P
0024 exit                                             /*stick a fork in it,  we're all done. */
0025 /*──────────────────────────────────────────────────────────────────────────────────────*/
0026 gcd: procedure; parse arg x,y;  do until y==0; parse value x//y y with y x; end;  return x
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                26 26
002 y                26 26
003 until            26
004 T                7 17
005 P                7 18
006 a                8
007 b                9
008 ab               10
009 aabb             12
010 c                13
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           5
002 _                -> newV2            22
