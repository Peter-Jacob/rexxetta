-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:33
-------------------------------------------------------------------------
0001 /*REXX program calculates the total area of  (possibly overlapping)  circles.           */
0002 parse arg box dig .                              /*obtain optional argument from the CL.*/
0003 if box=='' | box==','  then box= 500             /*Not specified?  Then use the default.*/
0004 if dig=='' | dig==','  then dig=  12             /* "      "         "   "   "     "    */
0005 numeric digits dig                               /*have enough decimal digits for points*/
0006 data = ' 1.6417233788   1.6121789534  0.0848270516',
0007 '-1.4944608174   1.2077959613  1.1039549836',
0008 ' 0.6110294452  -0.6907087527  0.9089162485',
0009 ' 0.3844862411   0.2923344616  0.2375743054',
0010 '-0.2495892950  -0.3832854473  1.0845181219',
0011 ' 1.7813504266   1.6178237031  0.8162655711',
0012 '-0.1985249206  -0.8343333301  0.0538864941',
0013 '-1.7011985145  -0.1263820964  0.4776976918',
0014 '-0.4319462812   1.4104420482  0.7886291537',
0015 ' 0.2178372997  -0.9499557344  0.0357871187',
0016 '-0.6294854565  -1.3078893852  0.7653357688',
0017 ' 1.7952608455   0.6281269104  0.2727652452',
0018 ' 1.4168575317   1.0683357171  1.1016025378',
0019 ' 1.4637371396   0.9463877418  1.1846214562',
0020 '-0.5263668798   1.7315156631  1.4428514068',
0021 '-1.2197352481   0.9144146579  1.0727263474',
0022 '-0.1389358881   0.1092805780  0.7350208828',
0023 ' 1.5293954595   0.0030278255  1.2472867347',
0024 '-0.5258728625   1.3782633069  1.3495508831',
0025 '-0.1403562064   0.2437382535  1.3804956588',
0026 ' 0.8055826339  -0.0482092025  0.3327165165',
0027 '-0.6311979224   0.7184578971  0.2491045282',
0028 ' 1.4685857879  -0.8347049536  1.3670667538',
0029 '-0.6855727502   1.6465021616  1.0593087096',
0030 ' 0.0152957411   0.0638919221  0.9771215985'
0031 circles= words(data) % 3     /*     ══x══          ══y══       ══radius══     */
0032 parse var data minX minY . 1 maxX maxY .              /*assign minimum & maximum values.*/
0033 do j=1  for circles;      _= j * 3  -  2  /*assign some circles with datum. */
0034 @x.j= word(data,_);    @y.j= word(data, _ + 1)
0035 @r.j= word(data,_+2);    @rr.j= @r.j**2
0036 minX= min(minX, @x.j - @r.j);   maxX= max(maxX, @x.j + @r.j)
0037 minY= min(minY, @y.j - @r.j);   maxY= max(maxY, @y.j + @r.j)
0038 end   /*j*/
0039 dx= (maxX-minX) / box
0040 dy= (maxY-minY) / box
0041 #= 0                                                  /*count of sample points (so far).*/
0042 do   row=0  to box;          y= minY + row*dy   /*process each of the grid rows.  */
0043 do col=0  to box;          x= minX + col*dx   /*   "      "   "  "    "  column.*/
0044 do k=1  for circles                         /*now process each new circle.    */
0045 if (x - @x.k)**2 + (y - @y.k)**2 <= @rr.k  then  do;   #= # + 1;    leave;   end
0046 end   /*k*/
0047 end     /*col*/
0048 end       /*row*/
0049 /*stick a fork in it, we're done. */
0050 say 'Using ' box  " boxes (which have "  box**2  ' points)  and '  dig  " decimal digits,"
0051 say 'the approximate area is: '       # * dx * dy
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 data             32
002 minX             32 36
003 minY             32 37
004 maxX             32 36
005 maxY             32 37
006 j                33
007 dx               39
008 dy               40
009 row              42
010 y                42
011 col              43
012 x                43
013 k                44
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @rr.             -> newV1.           35
002 @x.              -> newV2.           34
003 @y.              -> newV3.           34
004 @r.              -> newV4.           35
005 _                -> newV5            33
006 #                -> newV6            41 45
