-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:29
-------------------------------------------------------------------------
0001 /*REXX program sorts a stemmed array (has characters) using the insertion sort algorithm*/
0002 call gen                                         /*generate the array's (data) elements.*/
0003 call show           'before sort'                /*display the  before  array elements. */
0004 say copies('▒', 85)                         /*display a separator line  (a fence). */
0005 call insertionSort  #                            /*invoke the  insertion  sort.         */
0006 call show           ' after sort'                /*display the   after  array elements. */
0007 exit                                             /*stick a fork in it,  we're all done. */
0008 /*──────────────────────────────────────────────────────────────────────────────────────*/
0009 gen: @.=;                 @.1  = "---Monday's Child Is Fair of Face  (by Mother Goose)---"
0010 @.2  = "======================================================="
0011 @.3  = "Monday's child is fair of face;"
0012 @.4  = "Tuesday's child is full of grace;"
0013 @.5  = "Wednesday's child is full of woe;"
0014 @.6  = "Thursday's child has far to go;"
0015 @.7  = "Friday's child is loving and giving;"
0016 @.8  = "Saturday's child works hard for a living;"
0017 @.9  = "But the child that is born on the Sabbath day"
0018 @.10 = "Is blithe and bonny, good and gay."
0019 do #=1  while @.#\==''; end;  #= #-1 /*determine how many entries in @ array*/
0020 return                                      /* [↑]  adjust # for the DO loop index.*/
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 insertionSort:  procedure expose @.;      parse arg #
0023 do i=2  to #;   $= @.i;       do j=i-1  by -1  to 1  while @.j>$
0024 _= j + 1;        @._= @.j
0025 end   /*j*/
0026 _= j + 1;       @._= $
0027 end   /*i*/
0028 return
0029 /*──────────────────────────────────────────────────────────────────────────────────────*/
0030 show:  do j=1  for #;  say '   element'  right(j,length(#))  arg(1)": "  @.j; end;  return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 i                23
002 j                23
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           9 10 11 12 13 14 15 16 17 18 24 26
002 #                -> newV2            19 19 22
003 $                -> newV3            23
004 _                -> newV4            24 26
