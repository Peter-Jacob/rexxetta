-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:12
-------------------------------------------------------------------------
0001 /*REXX program computes the factorial of a  non─negative integer, and it automatically  */
0002 /*────────────────────── adjusts the number of decimal digits to accommodate the answer.*/
0003 numeric digits 99                                /*99 digits initially,  then expanded. */
0004 parse arg n                                      /*obtain optional argument from the CL.*/
0005 if n=''                   then call er  'no argument specified'
0006 if arg()>1 | words(n)>1   then call er  'too many arguments specified.'
0007 if \datatype(n,'N')       then call er  "argument isn't numeric: "          n
0008 if \datatype(n,'W')       then call er  "argument isn't a whole number: "   n
0009 if n<0                    then call er  "argument can't be negative: "      n
0010 != 1                                             /*define the factorial product (so far)*/
0011 do j=2 to n;    !=!*j                   /*compute  the factorial the hard way. */
0012 if pos(.,!)==0  then iterate            /*is the  !  in exponential notation?  */
0013 parse var ! 'E' digs                    /*extract exponent of the factorial,   */
0014 numeric digits  digs  +  digs % 10      /*  ··· and increase it by ten percent.*/
0015 end   /*j*/                             /* [↑]  where da rubber meets da road. */
0016 != !/1                                           /*normalize the factorial product.     */
0017 say n'!  is  ['length(!) "digits]:"              /*display number of digits in factorial*/
0018 say                                              /*add some whitespace to the output.   */
0019 say !                                            /*display the factorial product ──►term*/
0020 exit                                             /*stick a fork in it,  we're all done. */
0021 /*──────────────────────────────────────────────────────────────────────────────────────*/
0022 er:    say;      say '***error!***';      say;       say arg(1);      say;         exit 13
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 digs             13
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 !                -> newV1            10 11 13 16
