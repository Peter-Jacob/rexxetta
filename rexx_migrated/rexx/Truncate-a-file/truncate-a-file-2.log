-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:34
-------------------------------------------------------------------------
0001 /*REXX program  truncates  a file  to a  specified  (and smaller)  number of bytes.     */
0002 parse arg siz FID                                /*obtain required arguments from the CL*/
0003 FID=strip(FID)                                   /*elide  FID  leading/trailing blanks. */
0004 if siz==''             then call ser "No truncation size was specified  (1st argument)."
0005 if FID==''             then call ser "No fileID was specified  (2nd argument)."
0006 if \datatype(siz,'W')  then call ser "trunc size isn't an integer: "          siz
0007 if siz<1               then call ser "trunc size isn't a positive integer: "  siz
0008 chunk=4000                                       /*read the file with this "buffer" size*/
0009 call charin fid,1,0                              /*position the file pointer to byte # 1*/
0010 _=                                               /* [↓]  read while the length data<siz.*/
0011 do  while length(_)<=siz            /* [↓]  have we reached  End-Of-File ? */
0012 buffer=charin(FID,,chunk)
0013 if length(buffer)==0  then leave    /*Nothing read? Then we're done reading*/
0014 _=_ || buffer                       /*append the chunk to the _  input data*/
0015 end   /*while*/
0016 #=length(_)                                      /*get the length of the part just read.*/
0017 if #==0                then call ser "the specified file doesn't exist: "     FID
0018 if #<siz               then call ser "the file is smaller than trunc size: "   #
0019 call lineout FID                                 /*close the file used, just to be safe.*/
0020 'ERASE'      FID                                 /*invoke a command to delete the file  */
0021 call lineout FID                                 /*close the file, maybe for REXX's use.*/
0022 call charout FID, left(_,siz), 1                 /*write a truncated version of the file*/
0023 call lineout FID                                 /*close the file used, just to be safe.*/
0024 say 'file '  FID " truncated to "  siz  'bytes.' /*display some information to terminal.*/
0025 exit                                             /*stick a fork in it,  we're all done. */
0026 /*──────────────────────────────────────────────────────────────────────────────────────*/
0027 ser:  say '***error***'  arg(1);      exit 13    /*display an error message  and  exit. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 siz              2
002 FID              2 3
003 chunk            8
004 while            11
005 buffer           12
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _                -> newV1            10 14
002 #                -> newV2            16
