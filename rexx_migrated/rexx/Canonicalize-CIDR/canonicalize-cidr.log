-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:07
-------------------------------------------------------------------------
0001 /*REXX pgm canonicalizes IPv4 addresses that are in CIDR notation  (dotted─dec/network).*/
0002 parse arg a .                                    /*obtain optional argument from the CL.*/
0003 if a=='' | a==","  then a= '87.70.141.1/22'    , /*Not specified?  Then use the defaults*/
0004 '36.18.154.103/12'  ,
0005 '62.62.197.11/29'   ,
0006 '67.137.119.181/4'  ,
0007 '161.214.74.21/24'  ,
0008 '184.232.176.184/18'
0009 
0010 do i=1  for words(a);  z= word(a, i)         /*process each IPv4 address in the list*/
0011 parse var   z    #  '/'  -0  mask            /*get the address nodes & network mask.*/
0012 #= subword( translate(#, , .)  0 0 0, 1, 4)  /*elide dots from addr, ensure 4 nodes.*/
0013 $= #                                         /*use original node address (for now). */
0014 hb= 32 - substr(word(mask .32, 1), 2)        /*obtain the size of the host bits.    */
0015 $=;                          ##=             /*crop the host bits only if mask ≤ 32.*/
0016 do k=1  for 4;        _= word(#, k)  /*create a 32-bit (binary) IPv4 address*/
0017 ##= ##  ||  right(d2b(_), 8, 0)      /*append eight bits of the   "     "   */
0018 end   /*k*/                          /* [↑] ... and ensure a node is 8 bits.*/
0019 ##= left(##, 32-hb, 0)                       /*crop bits in host part of IPv4 addr. */
0020 ##= left(##, 32,    0)                       /*replace cropped bits with binary '0's*/
0021 do j=8  by 8  for 4                  /* [↓]  parse the four nodes of address*/
0022 $= $ || . || b2d(substr(##, j-7, 8)) /*reconstitute the decimal nodes.      */
0023 end   /*j*/                          /* [↑]  and insert a dot between nodes.*/
0024 say                                          /*introduce a blank line between IPv4's*/
0025 $= substr($, 2)                              /*elid the leading decimal point in  $ */
0026 say '   original IPv4 address: '  z          /*display the original  IPv4  address. */
0027 say '   canonicalized address: '  translate( space($), ., " ")mask  /*canonicalized.*/
0028 end   /*i*/
0029 exit 0                                           /*stick a fork in it,  we're all done. */
0030 /*──────────────────────────────────────────────────────────────────────────────────────*/
0031 b2d: return  x2d( b2x( arg(1) ) )  +  0          /*convert binary  ───►  decimal number.*/
0032 d2b: return  x2b( d2x( arg(1) ) )  +  0          /*   "    decimal ───►   binary    "   */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 z                11
002 mask             11
003 hb               14
004 k                16
005 j                21
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 ##               -> newV1            15 17 19 20
002 #                -> newV2            11 12
003 $                -> newV3            13 15 22 25
004 _                -> newV4            16
