/*ª*REXX pgm canonicalizes IPv4 addresses that are in CIDR notation  (dottedâ”€dec/network).*/
parse arg a .                                    /*ª*obtain optional argument from the CL.*/
if a=='' | a==","  then a= '87.70.141.1/22'    , /*ª*Not specified?  Then use the defaults*/
'36.18.154.103/12'  ,
'62.62.197.11/29'   ,
'67.137.119.181/4'  ,
'161.214.74.21/24'  ,
'184.232.176.184/18'

do i=1  for words(a);  z= word(a, i)         /*ª*process each IPv4 address in the list*/
parse var   z    newV2  '/'  -0  mask            /*ª*get the address nodes & network mask.*/
newV2= subword( translate(newV2, , .)  0 0 0, 1, 4)  /*ª*elide dots from addr, ensure 4 nodes.*/
newV3= newV2                                         /*ª*use original node address (for now). */
hb= 32 - substr(word(mask .32, 1), 2)        /*ª*obtain the size of the host bits.    */
newV3=;                          newV1=             /*ª*crop the host bits only if mask â‰îå÷Ö³ 32.*/
do k=1  for 4;        newV4= word(newV2, k)  /*ª*create a 32-bit (binary) IPv4 address*/
newV1= newV1  ||  right(d2b(newV4), 8, 0)      /*ª*append eight bits of the   "     "   */
end   /*ª*k*/                          /*ª* [â†‘] ... and ensure a node is 8 bits.*/
newV1= left(newV1, 32-hb, 0)                       /*ª*crop bits in host part of IPv4 addr. */
newV1= left(newV1, 32,    0)                       /*ª*replace cropped bits with binary '0's*/
do j=8  by 8  for 4                  /*ª* [â†“]  parse the four nodes of address*/
newV3= newV3 || . || b2d(substr(newV1, j-7, 8)) /*ª*reconstitute the decimal nodes.      */
end   /*ª*j*/                          /*ª* [â†‘]  and insert a dot between nodes.*/
say                                          /*ª*introduce a blank line between IPv4's*/
newV3= substr(newV3, 2)                              /*ª*elid the leading decimal point in  $ */
say '   original IPv4 address: '  z          /*ª*display the original  IPv4  address. */
say '   canonicalized address: '  translate( space(newV3), ., " ")mask  /*ª*canonicalized.*/
end   /*ª*i*/
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
b2d: return  x2d( b2x( arg(1) ) )  +  0          /*ª*convert binary  â”€â”€â”€â–º  decimal number.*/
d2b: return  x2b( d2x( arg(1) ) )  +  0          /*ª*   "    decimal â”€â”€â”€â–º   binary    "   */
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Canonicalize-CIDR\canonicalize-cidr.rexx was migrated on 23 Mar 2025 at 10:43:07
 * -------------------------------------------------------------------------
*/ 
