-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:04
-------------------------------------------------------------------------
0001 /*REXX program  calculates and displays  some values for the  Ackermann function.       */
0002 numeric digits 100                               /*use up to 100 decimal digit integers.*/
0003 /*╔═════════════════════════════════════════════════════════════╗
0004 ║ When REXX raises a number to an integer power  (via the  ** ║
0005 ║ operator,  the power can be positive, zero, or negative).   ║
0006 ║ Ackermann(5,1)   is a bit impractical to calculate.         ║
0007 ╚═════════════════════════════════════════════════════════════╝*/
0008 high=24
0009 do     j=0  to 4;                   say
0010 do k=0  to high % (max(1, j))
0011 call tell_Ack  j, k
0012 if j==4 & k==2  then leave          /*there's no sense in going overboard. */
0013 end   /*k*/
0014 end       /*j*/
0015 exit                                             /*stick a fork in it,  we're all done. */
0016 /*──────────────────────────────────────────────────────────────────────────────────────*/
0017 tell_Ack:  parse arg mm,nn;   calls=0            /*display an echo message to terminal. */
0018 #=right(nn,length(high))
0019 say 'Ackermann('mm", "#')='right(ackermann(mm, nn), high),
0020 left('', 12)     'calls='right(calls, high)
0021 return
0022 /*──────────────────────────────────────────────────────────────────────────────────────*/
0023 ackermann: procedure expose calls                /*compute value of Ackermann function. */
0024 parse arg m,n;   calls=calls+1
0025 if m==0  then return n + 1
0026 if m==1  then return n + 2
0027 if m==2  then return n + 3 + n
0028 if m==3  then return 2**(n+3) - 3
0029 if m==4  then do; #=2                 /* [↓]  Ugh!  ···  and still more ughs.*/
0030 do (n+3)-1 /*This is where the heavy lifting is.  */
0031 #=2**#
0032 end
0033 return #-3
0034 end
0035 if n==0  then return ackermann(m-1, 1)
0036 return ackermann(m-1, ackermann(m, n-1) )
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 m                24
002 n                24
003 calls            24
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 #                -> newV1            18 29 31
