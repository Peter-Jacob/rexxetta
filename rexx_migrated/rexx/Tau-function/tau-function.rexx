/*ª*REXX program counts the number of divisors (tau,  or sigma_0)  up to and including  N.*/
parse arg LO HI cols .                           /*ª*obtain optional argument from the CL.*/
if   LO=='' |   LO==","  then  LO=   1           /*ª*Not specified?  Then use the default.*/
if   HI=='' |   HI==","  then  HI=  LO + 100 - 1 /*ª*Not specified?  Then use the default.*/
if cols=='' | cols==","  then cols= 20           /*ª* "      "         "   "   "     "    */
w= 2 + (HI>45359)                                /*ª*W:  used to align the output columns.*/
say 'The number of divisors  (tau)  for integers up to '    n    " (inclusive):";      say
say 'â”€indexâ”€'   center(" tau (number of divisors) ",  cols * (w+1)  +  1,  'â”€')
newV1=;                                   c= 0       /*ª*$:  the output list,  shown ROW/line.*/
do j=LO  to HI;       c= c + 1   /*ª*list # proper divisors (tau) 1 â”€â”€â–º N */
newV1= newV1  right( tau(j), w)          /*ª*add a tau number to the output list. */
if c//cols \== 0  then iterate   /*ª*Not a multiple of ROW? Don't display.*/
idx= j - cols + 1                /*ª*calculate index value (for this row).*/
say center(idx, 7)    newV1;  newV1=     /*ª*display partial list to the terminal.*/
end   /*ª*j*/

if newV1\==''  then say center(idx+cols, 7)    newV1     /*ª*there any residuals left to display ?*/
exit 0                                           /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
tau: procedure; parse arg x 1 y                  /*ª*X  and  $  are both set from the arg.*/
if x<6  then return 2 + (x==4) - (x==1)     /*ª*some low #s should be handled special*/
odd= x // 2                                 /*ª*check if  X  is odd (remainder of 1).*/
if odd  then       newV2= 2                     /*ª*Odd?    Assume divisor count of  2.  */
else do;   newV2= 4;   y= x % 2;   end  /*ª*Even?      "      "      "    "  4.  */
/*ª* [â†‘]  start with known number of divs*/
do j=3  for x%2-3  by 1+odd  while j<y   /*ª*for odd number,  skip even numbers.  */
if x//j==0  then do                      /*ª*if no remainder, then found a divisor*/
newV2= newV2 + 2;   y= x % j    /*ª*bump # of divisors;  calculate limit.*/
if j>=y  then do;   newV2= newV2 - 1;   leave;   end   /*ª*reached limit?*/
end                     /*ª*                     ___             */
else if j*j>x  then leave    /*ª*only divide up to   âˆš x              */
end   /*ª*j*/;               return newV2      /*ª* [â†‘]  this form of DO loop is faster.*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Tau-function\tau-function.rexx was migrated on 23 Mar 2025 at 10:43:32
 * -------------------------------------------------------------------------
*/ 
