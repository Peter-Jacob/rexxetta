-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:33
-------------------------------------------------------------------------
0001 /*REXX program implements the Trabb─Pardo-Knuth algorithm for N numbers (default is 11).*/
0002 numeric digits 200                               /*the number of digits precision to use*/
0003 parse arg N .;   if N=='' | N==","  then N=11    /*Not specified?  Then use the default.*/
0004 maxValue= 400                                    /*the maximum value   f(x)   can have. */
0005 wid=  20                                    /*  ··· but only show this many digits.*/
0006 frac=   5                                    /*  ··· show this # of fractional digs.*/
0007 say '                           _____'           /* ◄─── this  SAY  displays a vinculum.*/
0008 say 'function:        ƒ(x)  ≡  √ │x│   +   (5 * x^3)'
0009 prompt= 'enter '      N      " numbers for the Trabb─Pardo─Knuth algorithm:     (or Quit)"
0010 
0011 do ask=0;    say;  /*░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░*/
0012 say prompt;  say;      pull $;     say                                             /*░*/
0013 if abbrev('QUIT',$,1)  then do;    say 'quitting.';    exit 1;   end               /*░*/
0014 ok=0                                                                               /*░*/
0015 select                  /*validate there're N numbers.*/    /*░*/
0016 when $=''        then say  "no numbers entered"             /*░*/
0017 when words($)<N  then say  "not enough numbers entered"     /*░*/
0018 when words($)>N  then say  "too many numbers entered"       /*░*/
0019 otherwise        ok=1                                       /*░*/
0020 end   /*select*/                                            /*░*/
0021 if \ok  then iterate                                    /* [↓]  W=max width. */    /*░*/
0022 w=0;                   do v=1  for N;       _=word($, v);   w=max(w, length(_) )   /*░*/
0023 if datatype(_, 'N')  then iterate          /*numeric ?*/    /*░*/
0024 say _  "isn't numeric";   iterate ask                       /*░*/
0025 end   /*v*/                                                 /*░*/
0026 leave                                                                              /*░*/
0027 end   /*ask*/      /*░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░*/
0028 
0029 say 'numbers entered: '    $
0030 say
0031 do i=N  by -1  for N;  #=word($, i) / 1  /*process the numbers in reverse.      */
0032 g =  fmt(   f( # )        )              /*invoke  function  ƒ  with arg number.*/
0033 gw=right(  'ƒ('#") ",  w+7)              /*nicely formatted  ƒ(number).         */
0034 if g>maxValue  then say gw    "is >  "     maxValue      ' ['space(g)"]"
0035 else say gw     "   = "     g
0036 end   /*i*/                              /* [↑]  display the result to terminal.*/
0037 exit                                             /*stick a fork in it,  we're all done. */
0038 /*──────────────────────────────────────────────────────────────────────────────────────*/
0039 f:    procedure;  parse arg x;           return  sqrt( abs(x) )    +    5 * x**3
0040 /*──────────────────────────────────────────────────────────────────────────────────────*/
0041 fmt:  z=right(translate(format(arg(1), wid, frac), 'e', "E"), wid) /*right adjust; use e*/
0042 if pos(.,z)\==0 then z=left(strip(strip(z,'T',0),"T",.),wid) /*strip trailing 0 &.*/
0043 return right(z, wid - 4*(pos('e', z)==0) )                   /*adjust: no exponent*/
0044 /*──────────────────────────────────────────────────────────────────────────────────────*/
0045 sqrt: procedure; parse arg x; if x=0  then return 0; d=digits(); m.=9; numeric form; h=d+6
0046 numeric digits; parse value format(x,2,1,,0) 'E0'  with  g 'E' _ .;  g=g *.5'e'_ % 2
0047 do j=0  while h>9;      m.j=h;               h=h % 2  + 1;  end  /*j*/
0048 do k=j+5  to 0  by -1;  numeric digits m.k;  g=(g+x/g)*.5;  end  /*k*/;   return g
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 x                45
002 d                45
003 m.               45 47
004 h                45 47
005 prompt           9
006 ask              11
007 ok               14
008 w                22 22
009 v                22
010 i                31
011 g                32 46 46 48
012 gw               33
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 NORMAL.17        
018 NORMAL.18        
019 NORMAL.19        
020 NORMAL.20        
021 NORMAL.21        
022 NORMAL.22        
023 j                47
024 k                48
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 _                -> newV1            22 46
002 #                -> newV2            31
