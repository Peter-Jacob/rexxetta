-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:23
-------------------------------------------------------------------------
0001 /*REXX program parses an  IP address  into  ──►  IPv4  or  IPv6 format,  optional pport.*/
0002 _= "_";    say center('input IP address'   , 30),
0003 center('hex IP address'     , 32),
0004 center('decimal IP address' , 39)         "space  port"
0005 say copies(_, 30)   copies(_, 32)   copies(_, 39)   copies(_, 5)   copies(_, 5)
0006 call IP_parse  127.0.0.1                         /*this simple  IP  doesn't need quotes.*/
0007 call IP_parse '127.0.0.1:80'
0008 call IP_parse '::1'
0009 call IP_parse '[::1]:80'
0010 call IP_parse '2605:2700:0:3::4713:93e3'
0011 call IP_parse '[2605:2700:0:3::4713:93e3]:80'
0012 exit                                             /*stick a fork in it,  we're all done. */
0013 /*──────────────────────────────────────────────────────────────────────────────────────*/
0014 IP_parse:  procedure;  parse arg a .;       hx=;              @.=;       numeric digits 50
0015 dot= pos(., a)\==0                    /*see if there is a dot present in IP. */
0016 
0017 if dot then do;   parse var   a    @.1  '.'  @.2  "."  @.3  '.'  @.4  ":"  port
0018 do j=1  for 4;    hx= hx  ||  d2x(@.j, 2)
0019 end   /*j*/
0020 end
0021 else do;   parse var  a  pureA  ']:'  port
0022 _= space( translate( pureA, , '[]'), 0)        /*remove brackets.*/
0023 parse var _ x '::' y
0024 do L=1  until x==''       /*get  left side. */
0025 parse var  x  @.L  ':'  x
0026 end   /*L*/
0027 y= reverse(y)
0028 do r=8  by -1             /*get right side. */
0029 parse var  y  z  ':'  y;   if z=='' then leave
0030 @.r= reverse(z)
0031 end   /*r*/
0032 
0033 do k=1  for 8;  hx=hx  ||  right( word(@.k 0, 1), 4, 0)
0034 end   /*k*/
0035 end
0036 
0037 say left(a,30) right(hx,32) right(x2d(hx),39) ' IPv' || (6-2*dot) right(port,5)
0038 return
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 y                29 29
002 z                29
003 k                33
004 hx               33
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 127.             -> newV1.           6
002 @.               -> newV2.           14 17 17 17 17 25 30
003 _                -> newV3            2 22 23
