-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:22
-------------------------------------------------------------------------
0001 /*REXX program (a game):  reverse a jumbled set of decimal digits 'til they're in order.*/
0002 signal on halt                                   /*allows the CBLF to  HALT the program.*/
0003 ___= copies('─', 9);      pad=left('', 9)        /*a fence used for computer's messages.*/
0004 say ___  "This game will show you nine random unique digits  (1 ──► 9),  and you'll enter"
0005 say ___  "one of those digits  which will reverse all the digits from the left-most digit"
0006 say ___  "up to  (and including)  that decimal digit.  The game's objective is to get all"
0007 say ___  "of the digits in ascending order with the fewest tries.    Here're your digits:"
0008 ok= 123456789                                    /*the result that the string should be.*/
0009 $=                                               /* ◄─── decimal target to be generated.*/
0010 do  until length($)==9;     _=random(1, 9) /*build a random unique numeric string.*/
0011 if pos(_, $) \== 0  then iterate           /*¬ unique? Only use a decimal dig once*/
0012 $=$ || _                                   /*construct a string of unique digits. */
0013 if $==ok  then $=                          /*string can't be in order, start over.*/
0014 end   /*until*/
0015 
0016 do  score=1  until  $==ok;           say       /* [↓]  display the digits & the prompt*/
0017 say ___  $   right('please enter a digit  (or  Quit):', 50)
0018 parse pull ox  .  1  ux . 1  x  .;   upper ux  /*get a decimal digit (maybe) from CBLF*/
0019 if abbrev('QUIT', ux, 1)  then signal halt     /*does the CBLF want to quit this game?*/
0020 if length(x)>1  then do;  say ___ pad '***error***  invalid input:  ' ox;  iterate;  end
0021 if x=''  then  iterate                         /*try again, CBLF didn't enter anything*/
0022 g=pos(x, $)                                    /*validate if the input digit is legal.*/
0023 if g==0  then say ___ pad '***error***  invalid digit:  '     ox
0024 else $=strip(reverse(left($,g))substr($,g+1))  /*reverse some (or all) digits*/
0025 end   /*score*/
0026 
0027 say;    say ___  $;     say;    say center(' Congratulations! ', 70, "═");       say
0028 say ___ pad  'Your score was' score;  exit       /*stick a fork in it,  we're all done. */
0029 halt:  say  ___  pad  'quitting.';     exit      /*  "   "   "   "  "     "    "    "   */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 pull             18
002 ox               18
003 ux               18
004 x                18
005 g                22
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 ___              -> newV1            3
002 $                -> newV2            9 12 13
003 _                -> newV3            10
