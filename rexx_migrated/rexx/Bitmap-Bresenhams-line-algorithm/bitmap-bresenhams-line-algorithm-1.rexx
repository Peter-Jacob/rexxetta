/*ª*REXX program  plots/draws line segments  using the  Bresenham's line  (2D) algorithm. */
parse arg data                                   /*ª*obtain optional arguments from the CL*/
if data=''  then data= "(1,8)  (8,16)  (16,8)  (8,1)  (1,8)"         /*ª* â—„â”€â”€â”€â”€ a rhombus.*/
data= translate(data, , '()[]{}/,:;')            /*ª*elide chaff from the data points.    */
newV1.= 'Â·'                                          /*ª*use midâ”€dots chars (plot background).*/
do points=1  while data\=''           /*ª*put the data points into an array (!)*/
parse var data x y data; newV2.points=x y /*ª*extract the line segments.           */
if points==1  then do;  minX= x;  maxX= x;  minY= y;  maxY= y     /*ª*1st case.*/
end
minX= min(minX,x);   maxX= max(maxX,x);   minY= min(minY,y);  maxY= max(maxY,y)
end   /*ª*points*/                      /*ª* [â†‘]  data points pairs in array  !. */
border= 2                                        /*ª*border:  is extra space around plot. */
minX= minX - border*2;    maxX= maxX + border*2  /*ª*min and max  X  for the plot display.*/
minY= minY - border  ;    maxY= maxY + border    /*ª* "   "   "   Y   "   "    "     "    */

do x=minX  to maxX;  newV1.x.0= 'â”€';  end /*ª*draw a dash from    left â”€â”€â”€â–º  right.*/
do y=minY  to maxY;  newV1.0.y= 'â”‚';  end /*ª*draw a pipe from  lowest â”€â”€â”€â–º highest*/
newV1.0.0= 'â”¼'                                       /*ª*define the plot's origin axis point. */
do seg=2  to points-1;     newV3= seg - 1 /*ª*obtain the  X and Y  line coÃ¶rdinates*/
call drawLine  newV2.newV3, newV2.seg             /*ª*draw (plot) a line segment.          */
end      /*ª*seg*/                      /*ª* [â†‘]  drawing the line segments.     */
/*ª* [â†“]  display the plot to terminal.  */
do    y=maxY  to minY  by -1;   newV3=    /*ª*display the plot one line at a time. */
do x=minX  to maxX;  newV3= newV3 || newV1.x.y /*ª*construct/build a line of the plot.  */
end   /*ª*x*/                        /*ª*      (a line is a "row" of points.) */
say newV3                                 /*ª*display a line of the plotâ”€â”€â–ºterminal*/
end      /*ª*y*/                        /*ª* [â†‘]  all done plotting the points.  */
exit                                             /*ª*stick a fork in it,  we're all done. */
/*ª*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
drawLine: procedure expose newV1.; parse arg  x y,xf yf;    parse value  '-1 -1'   with  sx sy
dx= abs(xf-x);    if x<xf  then sx= 1  /*ª*obtain  X  range, determine the slope*/
dy= abs(yf-y);    if y<yf  then sy= 1  /*ª*   "    Y    "        "      "    "  */
err= dx - dy                           /*ª*calculate error between adjustments. */
/*ª*Î˜  is the plot character for points. */
do  forever;           newV1.x.y= 'Î˜'  /*ª*plot the points until it's complete. */
if x=xf  &  y=yf  then return      /*ª*are the plot points at the finish?   */
err2= err + err                    /*ª*calculate  double  the error value.  */
if err2 > -dy  then  do;    err= err - dy;    x= x + sx;     end
if err2 <  dx  then  do;    err= err + dx;    y= y + sy;     end
end   /*ª*forever*/
/* -------------------------------------------------------------------------
 * REXX C:\Users\PeterJ\rexxetta\rexx\Bitmap-Bresenhams-line-algorithm\bitmap-bresenhams-line-algorithm-1.rexx was migrated on 23 Mar 2025 at 10:43:06
 * -------------------------------------------------------------------------
*/ 
