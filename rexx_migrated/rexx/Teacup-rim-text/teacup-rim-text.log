-------------------------------------------------------------------------
Initial REXX INFILE on 23 Mar 2025 at 10:43:32
-------------------------------------------------------------------------
0001 /*REXX pgm finds circular words (length>2),  using a dictionary,  suppress permutations.*/
0002 parse arg iFID L .                               /*obtain optional arguments from the CL*/
0003 if iFID==''|iFID==","  then iFID= 'wordlist.10k' /*Not specified?  Then use the default.*/
0004 if    L==''|   L==","  then    L= 3              /* "      "         "   "   "     "    */
0005 #= 0                                             /*number of words in dictionary, Len>L.*/
0006 @.=                                              /*stemmed array of non─duplicated words*/
0007 do r=0  while lines(iFID) \== 0           /*read all lines (words) in dictionary.*/
0008 parse upper value  linein(iFID)  with z . /*obtain a word from the dictionary.   */
0009 if length(z)<L | @.z\==''  then iterate   /*length must be  L  or more,  no dups.*/
0010 if \datatype(z, 'U')       then iterate   /*Word contains non-letters?  Then skip*/
0011 @.z = z                                   /*assign a word from the dictionary.   */
0012 #= # + 1;     $.#= z                      /*bump word count; append word to list.*/
0013 end   /*r*/                               /* [↑]  dictionary need not be sorted. */
0014 cw= 0                                            /*the number of circular words (so far)*/
0015 say "There're "    r    ' entries in the dictionary (of all types):  '      iFID
0016 say "There're "    #    ' words in the dictionary of at least length '      L
0017 say
0018 do j=1  for #;      x= $.j;      y= x     /*obtain the  Jth  word in the list.   */
0019 if x==''  then iterate                    /*if a null, don't show variants.      */
0020 yy= y                                     /*the start of a list of the variants. */
0021 do k=1  for length(x)-1     /*"circulate" the litters in the word. */
0022 y= substr(y, 2)left(y, 1)   /*add the left letter to the right end.*/
0023 if @.y==''  then iterate j  /*if not a word,  then skip this word. */
0024 yy= yy','   y               /*append to the list of the variants.  */
0025 @.y=                        /*nullify word to suppress permutations*/
0026 end   /*k*/
0027 cw= cw + 1                                /*bump counter of circular words found.*/
0028 say 'circular word: '     yy              /*display a circular word and variants.*/
0029 end   /*j*/
0030 say
0031 say cw     ' circular words were found.'         /*stick a fork in it,  we're all done. */
-------------------------------------------------------------------------
Cross Reference Table Solid Variable Names
-------------------------------------------------------------------------
001 L                4
002 r                7
003 NORMAL.3         
004 NORMAL.4         
005 NORMAL.5         
006 NORMAL.6         
007 NORMAL.7         
008 NORMAL.8         
009 NORMAL.9         
010 NORMAL.10        
011 NORMAL.11        
012 NORMAL.12        
013 NORMAL.13        
014 NORMAL.14        
015 NORMAL.15        
016 NORMAL.16        
017 NORMAL.17        
018 NORMAL.18        
019 NORMAL.19        
020 NORMAL.20        
021 NORMAL.21        
022 NORMAL.22        
023 NORMAL.23        
024 NORMAL.24        
025 NORMAL.25        
026 z                8
027 cw               14 27
028 j                18
029 x                18
030 y                18 22
031 yy               20 24
032 k                21
-------------------------------------------------------------------------
Cross Reference Table Bizarre Variable Names
-------------------------------------------------------------------------
001 @.               -> newV1.           6 11 25
002 $.               -> newV2.           12
003 #                -> newV3            5 12
